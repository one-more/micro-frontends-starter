module.exports=function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var r={};return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=4)}([function(e,t,r){"use strict";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e){d.driver=d.driver.migrate(e)}function i(e){return d.driver.getItem(e)}function u(e,t){d.driver.setItem(e,t)}function c(e){d.driver.removeItem(e)}Object.defineProperty(t,"__esModule",{value:!0});var a;t.setStorageDriver=o,t.getStorage=i,t.addStorage=u,t.removeStorage=c;var s=new Map,f=new Map,l=t.storageKeys={PROPS:"props",EVENTS:"events"},p={items:Object.create((a={},n(a,l.PROPS,s),n(a,l.EVENTS,f),a)),setItem:function(e,t){this.items[e]=t},getItem:function(e){return this.items[e]},removeItem:function(e){delete this.items[e]},migrate:function(e){for(var t in this.items)e.setItem(t,this.items[t]);return e}},d=t.storage={driver:p}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={registerComponent:function(e,t){"customElements"in window?customElements.define(e,t):u().then(function(){i(e,t)})},isCustomComponent:function(e){return e.nodeName.includes("-")}},o=n,i=function(e,t){return o.registerComponent(e,t)},u=(t.setImplementation=function(e){o=e},function(){return Promise.resolve()});t.componentsReady=function(){return u()},t.setReadyCheck=function(e){u=e};t.default=i;t.isCustomComponent=function(e){return o.isCustomComponent(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={reducers:{},subscriptions:{},addReducer:function(e,t){this.reducers[e]=t},removeReducer:function(e){return delete this.reducers[e],!1},subscribe:function(e,t){var r=this;return this.subscriptions[e]||(this.subscriptions[e]=[]),this.subscriptions[e].push(t),{unsubscribe:function(){r.subscriptions[e]=r.subscriptions[e].filter(function(e){return e!==t})}}},getState:function(e){},migrate:function(e){for(var t in this.reducers){var r=this.reducers[t];e.addReducer(t,r)}for(var n in this.subscriptions){var o=!0,i=!1,u=void 0;try{for(var c,a=this.subscriptions[n][Symbol.iterator]();!(o=(c=a.next()).done);o=!0){var s=c.value;e.subscribe(n,s)}}catch(e){i=!0,u=e}finally{try{!o&&a.return&&a.return()}finally{if(i)throw u}}}return e}},o={currentImplementation:n};t.setImplementation=function(e){o.currentImplementation=o.currentImplementation.migrate(e)},t.registerReducer=function(e,t){o.currentImplementation.addReducer(e,t)},t.removeReducer=function(e){o.currentImplementation.removeReducer(e)},t.subscribe=function(e,t){return o.currentImplementation.subscribe(e,t)},t.getState=function(e){return o.currentImplementation.getState(e)}},function(e,t,r){"use strict";function n(e){return e.split("-").reduce(function(e,t){return t?e+t[0].toUpperCase()+t.slice(1):e})}function o(e){for(var t="",r=0;r<e.length;r++)e[r]===e[r].toUpperCase()?t+="-"+e[r].toLowerCase():t+=e[r];return t}function i(e,t){return t?"__ARG__"+e:"\x3c!--__ARG__"+e+"--\x3e"}function u(e){return e.match(/(?:<!--)?__ARG__(\d+)(?:-->)?/)}function c(e,t){return e.replace(/(?:<!--)?__ARG__(\d+)(?:-->)?/g,t)}function a(e){return'="'===e.trim().slice(-2)}Object.defineProperty(t,"__esModule",{value:!0}),t.tagNameToProp=n,t.propNameToTag=o,t.createTagArg=i,t.matchTagArg=u,t.replaceTagArg=c,t.attributeStarts=a},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(1);Object.defineProperty(t,"changeWebComponentsImplemenation",{enumerable:!0,get:function(){return o.setImplementation}}),Object.defineProperty(t,"componentsReady",{enumerable:!0,get:function(){return o.componentsReady}}),Object.defineProperty(t,"changeWebComponentsReadyCheck",{enumerable:!0,get:function(){return o.setReadyCheck}}),Object.defineProperty(t,"registerComponent",{enumerable:!0,get:function(){return n(o).default}});var i=r(2);Object.defineProperty(t,"changeStoreImplementation",{enumerable:!0,get:function(){return i.setImplementation}}),Object.defineProperty(t,"registerReducer",{enumerable:!0,get:function(){return i.registerReducer}}),Object.defineProperty(t,"removeReducer",{enumerable:!0,get:function(){return i.removeReducer}}),Object.defineProperty(t,"subscribe",{enumerable:!0,get:function(){return i.subscribe}}),Object.defineProperty(t,"getState",{enumerable:!0,get:function(){return i.getState}});var u=r(5);Object.defineProperty(t,"css",{enumerable:!0,get:function(){return u.css}});var c=r(0);Object.defineProperty(t,"getStorage",{enumerable:!0,get:function(){return c.getStorage}}),Object.defineProperty(t,"addStorage",{enumerable:!0,get:function(){return c.addStorage}}),Object.defineProperty(t,"removeStorage",{enumerable:!0,get:function(){return c.removeStorage}}),Object.defineProperty(t,"setStorageDriver",{enumerable:!0,get:function(){return c.setStorageDriver}});var a=r(6);Object.defineProperty(t,"bind",{enumerable:!0,get:function(){return a.bind}});var s=r(3);Object.defineProperty(t,"matchTagArg",{enumerable:!0,get:function(){return s.matchTagArg}}),Object.defineProperty(t,"replaceTagArg",{enumerable:!0,get:function(){return s.replaceTagArg}});var f=r(7);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return n(f).default}}),Object.defineProperty(t,"connect",{enumerable:!0,get:function(){return f.connect}}),Object.defineProperty(t,"define",{enumerable:!0,get:function(){return f.define}}),Object.defineProperty(t,"props",{enumerable:!0,get:function(){return f.props}})},function(e,t,r){"use strict";function n(e){return function(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];for(var o="",i=0;i<e.length;i++)o+=e[i],i<e.length-1&&("function"==typeof r[i]?o+=r[i]():o+=r[i]);return o}}Object.defineProperty(t,"__esModule",{value:!0}),t.css=n},function(e,t,r){"use strict";function n(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}function o(e,t){var r=(0,u.getStorage)(c);if(r.size===a){var n=r.keys();r.delete(n.next().value)}r.set(e,t)}function i(e){for(var t=(0,u.getStorage)(c),r=t.get(e),i=arguments.length,a=Array(i>1?i-1:0),s=1;s<i;s++)a[s-1]=arguments[s];var f=a[0],l=e.bind.apply(e,[null].concat(n(a)));if(r)return r.get(f)?r.get(f):(r.set(f,l),l);var p=new Map;return p.set(f,l),o(e,p),l}Object.defineProperty(t,"__esModule",{value:!0}),t.bind=i;var u=r(0),c="BOUNDS",a=100;(0,u.addStorage)(c,new Map)},function(e,t,r){"use strict";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function c(e){var t={},r=!0,n=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done);r=!0){var c=i.value;t[(0,v.tagNameToProp)(c.name)]=c.value}}catch(e){n=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(n)throw o}}return t}function a(e){return function(t){return function(t){function r(){return o(this,r),i(this,(r.__proto__||Object.getPrototypeOf(r)).apply(this,arguments))}return u(r,t),d(r,[{key:"keys",get:function(){return[e]}}]),r}(t)}}function s(e){return function(t){return(0,y.default)(e,t),t}}function f(e){var t=S++;return O.set(t,e),{"props-id":t,toString:function(){return'props-id="'+t+'"'}}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},d=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();t.connect=a,t.define=s,t.props=f;var b=r(1),y=function(e){return e&&e.__esModule?e:{default:e}}(b),m=r(2),g=r(8),h=r(0),v=r(3),_=function(e){var t=e.getPrototypeOf||function(e){return e.__proto__},r=e.setPrototypeOf||function(e,t){return e.__proto__=t,e},n="object"===("undefined"==typeof Reflect?"undefined":l(Reflect))?Reflect.construct:function(e,t,n){var o,i=[null];return i.push.apply(i,t),o=e.bind.apply(e,i),r(new o,n.prototype)};return function(e){var o=t(e);return r(e,r(function(){return n(o,arguments,t(this).constructor)},o))}}(Object),O=(0,h.getStorage)(h.storageKeys.PROPS),P=_(function(e){function t(){var e,r,n,u;o(this,t);for(var c=arguments.length,a=Array(c),s=0;s<c;s++)a[s]=arguments[s];return r=n=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n.__defaultProps={},n.subscriptions=[],n.state={},n.mounted=!1,u=r,i(n,u)}return u(t,e),d(t,[{key:"beforeRender",value:function(){}},{key:"render",value:function(){return""}},{key:"insertContent",value:function(e,t){if("string"!=typeof t)throw new Error("default renderer can handle only strings");e.innerHTML=t}},{key:"afterRender",value:function(){}},{key:"subscribeToStore",value:function(){var e=this,t=!0,r=!1,n=void 0;try{for(var o,i=this.keys[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;this.subscriptions.push((0,m.subscribe)(u,function(t){e.state=t,g.render.call(e)})),this.state=(0,m.getState)(u)}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}}},{key:"connectedCallback",value:function(){this.subscribeToStore(),g.render.call(this),this.connected()}},{key:"connected",value:function(){}},{key:"disconnectedCallback",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.subscriptions[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){n.value.unsubscribe()}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}this.disconnected()}},{key:"disconnected",value:function(){}},{key:"adoptedCallback",value:function(){this.subscribeToStore(),g.render.call(this),this.adopted()}},{key:"adopted",value:function(){}},{key:"attributeChangedCallback",value:function(e,t,r){this.mounted&&t!=r&&(this.propsChanged(p({},this.props,n({},e,r))),g.render.call(this))}},{key:"propsChanged",value:function(e){}},{key:"name",get:function(){return Object.getPrototypeOf(this).constructor.name}},{key:"isShadow",get:function(){return!0}},{key:"props",get:function(){var e=c(this.attributes),t=Number(e.propsId);return p({},this.__defaultProps,e,O.get(t)||{})},set:function(e){this.__defaultProps=e}},{key:"keys",get:function(){return[]}},{key:"styles",get:function(){return""}}],[{key:"observedAttributes",get:function(){return this.observableProps.map(v.propNameToTag).concat("props-id")}},{key:"observableProps",get:function(){return[]}}]),t}(HTMLElement));t.default=P;var S=0},function(e,t,r){"use strict";function n(){this.beforeRender(),this.isShadow&&!this.shadowRoot&&this.attachShadow({mode:"open"}),this.root||(this.isShadow?(this.shadowRoot.innerHTML="<style>"+this.styles+"</style>",this.root=document.createElement("div"),this.shadowRoot.appendChild(this.root),this.root.style="display: contents"):(this.innerHTML="<style>"+this.styles+"</style>",this.root=this));var e=this.render();e&&this.insertContent(this.root,e),this.mounted=!0,this.afterRender()}Object.defineProperty(t,"__esModule",{value:!0}),t.render=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vbWFpbi5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgZThjMjVmMzU3ZjJjMGVlZWQwNzYiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlYi1jb21wb25lbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy90YWcuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2JpbmQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL0NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvcmVuZGVyLmpzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJtb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiaW5zdGFsbGVkTW9kdWxlcyIsImkiLCJsIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJjb25maWd1cmFibGUiLCJlbnVtZXJhYmxlIiwiZ2V0IiwibiIsIl9fZXNNb2R1bGUiLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJ2YWx1ZSIsIndyaXRhYmxlIiwic2V0U3RvcmFnZURyaXZlciIsImRyaXZlciIsInN0b3JhZ2UiLCJtaWdyYXRlIiwiZ2V0U3RvcmFnZSIsImdldEl0ZW0iLCJhZGRTdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZVN0b3JhZ2UiLCJyZW1vdmVJdGVtIiwiX09iamVjdCRjcmVhdGUiLCJwcm9wc01hcCIsIk1hcCIsImV2ZW50c01hcCIsInN0b3JhZ2VLZXlzIiwiUFJPUFMiLCJFVkVOVFMiLCJpdGVtcyIsImNyZWF0ZSIsInRoaXMiLCJkZWZhdWx0SW1wbGVtZW50YXRpb24iLCJyZWdpc3RlckNvbXBvbmVudCIsImNvbXBvbmVudCIsIndpbmRvdyIsImN1c3RvbUVsZW1lbnRzIiwiZGVmaW5lIiwiY3VycmVudFJlYWR5Q2hlY2siLCJ0aGVuIiwiaXNDdXN0b21Db21wb25lbnQiLCJub2RlIiwibm9kZU5hbWUiLCJpbmNsdWRlcyIsImN1cnJlbnRJbXBsZW1lbnRhdGlvbiIsInNldEltcGxlbWVudGF0aW9uIiwiaW1wbGVtZW50YXRpb24iLCJQcm9taXNlIiwicmVzb2x2ZSIsImNvbXBvbmVudHNSZWFkeSIsInNldFJlYWR5Q2hlY2siLCJyZWFkeUNoZWNrIiwiZGVmYXVsdCIsInN0dWJJbXBsZW1lbnRhdGlvbiIsInJlZHVjZXJzIiwic3Vic2NyaXB0aW9ucyIsImFkZFJlZHVjZXIiLCJyZWR1Y2VyIiwicmVtb3ZlUmVkdWNlciIsInN1YnNjcmliZSIsImNiIiwiX3RoaXMiLCJwdXNoIiwidW5zdWJzY3JpYmUiLCJmaWx0ZXIiLCJlbCIsImdldFN0YXRlIiwibmV3U3RvcmUiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uIiwiX2RpZEl0ZXJhdG9yRXJyb3IiLCJfaXRlcmF0b3JFcnJvciIsInVuZGVmaW5lZCIsIl9zdGVwIiwiX2l0ZXJhdG9yIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJuZXh0IiwiZG9uZSIsInN1YnNjcmlwdGlvbiIsImVyciIsInJldHVybiIsInN0b3JlIiwicmVnaXN0ZXJSZWR1Y2VyIiwidGFnTmFtZVRvUHJvcCIsInNwbGl0IiwicmVkdWNlIiwiYWNjIiwidG9VcHBlckNhc2UiLCJzbGljZSIsInByb3BOYW1lVG9UYWciLCJwcm9wIiwicmVzIiwibGVuZ3RoIiwidG9Mb3dlckNhc2UiLCJjcmVhdGVUYWdBcmciLCJpbmRleCIsInN0YXJ0QXR0cmlidXRlIiwibWF0Y2hUYWdBcmciLCJzdHIiLCJtYXRjaCIsInJlcGxhY2VUYWdBcmciLCJmbiIsInJlcGxhY2UiLCJhdHRyaWJ1dGVTdGFydHMiLCJ0cmltIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl93ZWJDb21wb25lbnRzIiwiX3N0b3JlIiwiX3RhZyIsImNzcyIsIl9zdG9yYWdlIiwiX2JpbmQiLCJiaW5kIiwiX3V0aWxzIiwiX0NvbXBvbmVudCIsImNvbm5lY3QiLCJwcm9wcyIsImN0eCIsInN0cmluZ3MiLCJfbGVuIiwiYXJndW1lbnRzIiwiYXJncyIsIkFycmF5IiwiX2tleSIsInJlc3VsdCIsIl90b0NvbnN1bWFibGVBcnJheSIsImFyciIsImlzQXJyYXkiLCJhcnIyIiwiZnJvbSIsImFwcGVuZFRvU3RvcmFnZSIsIktFWSIsInNpemUiLCJNQVhfU1RPUkFHRV9TSVpFIiwia2V5cyIsImRlbGV0ZSIsInNldCIsImJvdW5kIiwiZmlyc3RBcmciLCJib3VuZEZuIiwiYXBwbHkiLCJjb25jYXQiLCJmbk1hcCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJUeXBlRXJyb3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJwYXJzZUF0dHJpYnV0ZXMiLCJhdHRyaWJ1dGVzIiwiYXR0cmlidXRlIiwiV3JhcHBlZCIsIl9XcmFwcGVkIiwiX2NsYXNzMiIsImdldFByb3RvdHlwZU9mIiwiX2NyZWF0ZUNsYXNzIiwiX3dlYkNvbXBvbmVudHMyIiwiaWQiLCJwcm9wc0lkIiwicHJvcHNTdG9yYWdlIiwicHJvcHMtaWQiLCJ0b1N0cmluZyIsIl90eXBlb2YiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsInNvdXJjZSIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3JlbmRlciIsIl9maXhCYWJlbEV4dGVuZCIsIk8iLCJnUE8iLCJzUE8iLCJjb25zdHJ1Y3QiLCJSZWZsZWN0IiwiUGFyZW50IiwiQ2xhc3MiLCJhIiwiQ29tcG9uZW50IiwiX0hUTUxFbGVtZW50IiwiX3JlZiIsIl90ZW1wIiwiX3JldCIsIl9fZGVmYXVsdFByb3BzIiwic3RhdGUiLCJtb3VudGVkIiwicm9vdCIsImNvbnRlbnQiLCJFcnJvciIsImlubmVySFRNTCIsIl90aGlzMiIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsInJlbmRlciIsInN1YnNjcmliZVRvU3RvcmUiLCJjb25uZWN0ZWQiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyIsIl9kaWRJdGVyYXRvckVycm9yMyIsIl9pdGVyYXRvckVycm9yMyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJkaXNjb25uZWN0ZWQiLCJhZG9wdGVkIiwiYXR0cmlidXRlTmFtZSIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJwcm9wc0NoYW5nZWQiLCJuZXdQcm9wcyIsIk51bWJlciIsIm9ic2VydmFibGVQcm9wcyIsIm1hcCIsIkhUTUxFbGVtZW50IiwiYmVmb3JlUmVuZGVyIiwiaXNTaGFkb3ciLCJzaGFkb3dSb290IiwiYXR0YWNoU2hhZG93IiwibW9kZSIsInN0eWxlcyIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImFwcGVuZENoaWxkIiwic3R5bGUiLCJyZW5kZXJSZXMiLCJpbnNlcnRDb250ZW50IiwiYWZ0ZXJSZW5kZXIiXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPQyxRQUNFLFNBQVVDLEdDR25CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBSCxPQUdBLElBQUFELEdBQUFLLEVBQUFELElBQ0FFLEVBQUFGLEVBQ0FHLEdBQUEsRUFDQU4sV0FVQSxPQU5BQyxHQUFBRSxHQUFBSSxLQUFBUixFQUFBQyxRQUFBRCxJQUFBQyxRQUFBRSxHQUdBSCxFQUFBTyxHQUFBLEVB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S0FBS3dNLE9BQWhDLFdBQ0F4TSxLQUFLc0ssS0FBT3RLLE1BSXBCLElBQU02TSxHQUFZN00sS0FBS2dMLFFBQ25CNkIsSUFDQTdNLEtBQUs4TSxjQUFjOU0sS0FBS3NLLEtBQU11QyxHQUdsQzdNLEtBQUtxSyxTQUFVLEVBRWZySyxLQUFLK00sY1ZxM0JUcFAsT0FBT0MsZUFBZWYsRUFBUyxjQUMzQjhCLE9BQU8sSUFFWDlCLEVVbDVCZ0JtTyIsImZpbGUiOiJtYWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuLyoqKioqKi8gfSlcbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKiovXG4vKioqKioqLyAoW1xuLyogMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfT2JqZWN0JGNyZWF0ZTtcblxuZXhwb3J0cy5zZXRTdG9yYWdlRHJpdmVyID0gc2V0U3RvcmFnZURyaXZlcjtcbmV4cG9ydHMuZ2V0U3RvcmFnZSA9IGdldFN0b3JhZ2U7XG5leHBvcnRzLmFkZFN0b3JhZ2UgPSBhZGRTdG9yYWdlO1xuZXhwb3J0cy5yZW1vdmVTdG9yYWdlID0gcmVtb3ZlU3RvcmFnZTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIHByb3BzTWFwID0gbmV3IE1hcCgpO1xuXG52YXIgZXZlbnRzTWFwID0gbmV3IE1hcCgpO1xuXG52YXIgc3RvcmFnZUtleXMgPSBleHBvcnRzLnN0b3JhZ2VLZXlzID0ge1xuICAgIFBST1BTOiBcInByb3BzXCIsXG4gICAgRVZFTlRTOiBcImV2ZW50c1wiXG59O1xuXG52YXIgZHJpdmVyID0ge1xuICAgIGl0ZW1zOiBPYmplY3QuY3JlYXRlKChfT2JqZWN0JGNyZWF0ZSA9IHt9LCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIHN0b3JhZ2VLZXlzLlBST1BTLCBwcm9wc01hcCksIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwgc3RvcmFnZUtleXMuRVZFTlRTLCBldmVudHNNYXApLCBfT2JqZWN0JGNyZWF0ZSkpLFxuICAgIHNldEl0ZW06IGZ1bmN0aW9uIHNldEl0ZW0oa2V5LCB2YWx1ZSkge1xuICAgICAgICB0aGlzLml0ZW1zW2tleV0gPSB2YWx1ZTtcbiAgICB9LFxuICAgIGdldEl0ZW06IGZ1bmN0aW9uIGdldEl0ZW0oa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLml0ZW1zW2tleV07XG4gICAgfSxcbiAgICByZW1vdmVJdGVtOiBmdW5jdGlvbiByZW1vdmVJdGVtKGtleSkge1xuICAgICAgICBkZWxldGUgdGhpcy5pdGVtc1trZXldO1xuICAgIH0sXG4gICAgbWlncmF0ZTogZnVuY3Rpb24gbWlncmF0ZShkcml2ZXIpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMuaXRlbXMpIHtcbiAgICAgICAgICAgIGRyaXZlci5zZXRJdGVtKGtleSwgdGhpcy5pdGVtc1trZXldKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZHJpdmVyO1xuICAgIH1cbn07XG5cbnZhciBzdG9yYWdlID0gZXhwb3J0cy5zdG9yYWdlID0ge1xuICAgIGRyaXZlcjogZHJpdmVyXG59O1xuXG5mdW5jdGlvbiBzZXRTdG9yYWdlRHJpdmVyKGRyaXZlcikge1xuICAgIHN0b3JhZ2UuZHJpdmVyID0gc3RvcmFnZS5kcml2ZXIubWlncmF0ZShkcml2ZXIpO1xufVxuXG5mdW5jdGlvbiBnZXRTdG9yYWdlKGtleSkge1xuICAgIHJldHVybiBzdG9yYWdlLmRyaXZlci5nZXRJdGVtKGtleSk7XG59XG5cbmZ1bmN0aW9uIGFkZFN0b3JhZ2Uoa2V5LCB2YWx1ZSkge1xuICAgIHN0b3JhZ2UuZHJpdmVyLnNldEl0ZW0oa2V5LCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0b3JhZ2Uoa2V5KSB7XG4gICAgc3RvcmFnZS5kcml2ZXIucmVtb3ZlSXRlbShrZXkpO1xufVxuXG4vKioqLyB9KSxcbi8qIDEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG5cbnZhciBkZWZhdWx0SW1wbGVtZW50YXRpb24gPSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQ6IGZ1bmN0aW9uIHJlZ2lzdGVyQ29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCkge1xuICAgICAgICBpZiAoJ2N1c3RvbUVsZW1lbnRzJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZShuYW1lLCBjb21wb25lbnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudFJlYWR5Q2hlY2soKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfcmVnaXN0ZXJDb21wb25lbnQobmFtZSwgY29tcG9uZW50KTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSxcbiAgICBpc0N1c3RvbUNvbXBvbmVudDogZnVuY3Rpb24gaXNDdXN0b21Db21wb25lbnQobm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5ub2RlTmFtZS5pbmNsdWRlcyhcIi1cIik7XG4gICAgfVxufTtcblxudmFyIGN1cnJlbnRJbXBsZW1lbnRhdGlvbiA9IGRlZmF1bHRJbXBsZW1lbnRhdGlvbjtcblxudmFyIF9yZWdpc3RlckNvbXBvbmVudCA9IGZ1bmN0aW9uIF9yZWdpc3RlckNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpIHtcbiAgICByZXR1cm4gY3VycmVudEltcGxlbWVudGF0aW9uLnJlZ2lzdGVyQ29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCk7XG59O1xuXG52YXIgc2V0SW1wbGVtZW50YXRpb24gPSBleHBvcnRzLnNldEltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24gc2V0SW1wbGVtZW50YXRpb24oaW1wbGVtZW50YXRpb24pIHtcbiAgICBjdXJyZW50SW1wbGVtZW50YXRpb24gPSBpbXBsZW1lbnRhdGlvbjtcbn07XG5cbnZhciBjdXJyZW50UmVhZHlDaGVjayA9IGZ1bmN0aW9uIGN1cnJlbnRSZWFkeUNoZWNrKCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbn07XG5cbnZhciBjb21wb25lbnRzUmVhZHkgPSBleHBvcnRzLmNvbXBvbmVudHNSZWFkeSA9IGZ1bmN0aW9uIGNvbXBvbmVudHNSZWFkeSgpIHtcbiAgICByZXR1cm4gY3VycmVudFJlYWR5Q2hlY2soKTtcbn07XG5cbnZhciBzZXRSZWFkeUNoZWNrID0gZXhwb3J0cy5zZXRSZWFkeUNoZWNrID0gZnVuY3Rpb24gc2V0UmVhZHlDaGVjayhyZWFkeUNoZWNrKSB7XG4gICAgY3VycmVudFJlYWR5Q2hlY2sgPSByZWFkeUNoZWNrO1xufTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gX3JlZ2lzdGVyQ29tcG9uZW50O1xudmFyIGlzQ3VzdG9tQ29tcG9uZW50ID0gZXhwb3J0cy5pc0N1c3RvbUNvbXBvbmVudCA9IGZ1bmN0aW9uIGlzQ3VzdG9tQ29tcG9uZW50KG5vZGUpIHtcbiAgICByZXR1cm4gY3VycmVudEltcGxlbWVudGF0aW9uLmlzQ3VzdG9tQ29tcG9uZW50KG5vZGUpO1xufTtcblxuLyoqKi8gfSksXG4vKiAyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuXG52YXIgc3R1YkltcGxlbWVudGF0aW9uID0ge1xuICAgIHJlZHVjZXJzOiB7fSxcbiAgICBzdWJzY3JpcHRpb25zOiB7fSxcbiAgICBhZGRSZWR1Y2VyOiBmdW5jdGlvbiBhZGRSZWR1Y2VyKGtleSwgcmVkdWNlcikge1xuICAgICAgICB0aGlzLnJlZHVjZXJzW2tleV0gPSByZWR1Y2VyO1xuICAgIH0sXG4gICAgcmVtb3ZlUmVkdWNlcjogZnVuY3Rpb24gcmVtb3ZlUmVkdWNlcihrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMucmVkdWNlcnNba2V5XTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlOiBmdW5jdGlvbiBzdWJzY3JpYmUoa2V5LCBjYikge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgICAgIGlmICghdGhpcy5zdWJzY3JpcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2tleV0ucHVzaChjYik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZTogZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3Vic2NyaXB0aW9uc1trZXldID0gX3RoaXMuc3Vic2NyaXB0aW9uc1trZXldLmZpbHRlcihmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGVsICE9PSBjYjtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9LFxuICAgIGdldFN0YXRlOiBmdW5jdGlvbiBnZXRTdGF0ZShrZXkpIHt9LFxuICAgIG1pZ3JhdGU6IGZ1bmN0aW9uIG1pZ3JhdGUobmV3U3RvcmUpIHtcbiAgICAgICAgZm9yICh2YXIga2V5IGluIHRoaXMucmVkdWNlcnMpIHtcbiAgICAgICAgICAgIHZhciByZWR1Y2VyID0gdGhpcy5yZWR1Y2Vyc1trZXldO1xuICAgICAgICAgICAgbmV3U3RvcmUuYWRkUmVkdWNlcihrZXksIHJlZHVjZXIpO1xuICAgICAgICB9XG4gICAgICAgIGZvciAodmFyIF9rZXkgaW4gdGhpcy5zdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSB0aGlzLnN1YnNjcmlwdGlvbnNbX2tleV1bU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBuZXdTdG9yZS5zdWJzY3JpYmUoX2tleSwgc3Vic2NyaXB0aW9uKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdTdG9yZTtcbiAgICB9XG59O1xuXG52YXIgc3RvcmUgPSB7XG4gICAgY3VycmVudEltcGxlbWVudGF0aW9uOiBzdHViSW1wbGVtZW50YXRpb25cbn07XG5cbnZhciBzZXRJbXBsZW1lbnRhdGlvbiA9IGV4cG9ydHMuc2V0SW1wbGVtZW50YXRpb24gPSBmdW5jdGlvbiBzZXRJbXBsZW1lbnRhdGlvbihpbXBsZW1lbnRhdGlvbikge1xuICAgIHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbiA9IHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbi5taWdyYXRlKGltcGxlbWVudGF0aW9uKTtcbn07XG5cbnZhciByZWdpc3RlclJlZHVjZXIgPSBleHBvcnRzLnJlZ2lzdGVyUmVkdWNlciA9IGZ1bmN0aW9uIHJlZ2lzdGVyUmVkdWNlcihrZXksIHJlZHVjZXIpIHtcbiAgICBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24uYWRkUmVkdWNlcihrZXksIHJlZHVjZXIpO1xufTtcbnZhciByZW1vdmVSZWR1Y2VyID0gZXhwb3J0cy5yZW1vdmVSZWR1Y2VyID0gZnVuY3Rpb24gcmVtb3ZlUmVkdWNlcihrZXkpIHtcbiAgICBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24ucmVtb3ZlUmVkdWNlcihrZXkpO1xufTtcbnZhciBzdWJzY3JpYmUgPSBleHBvcnRzLnN1YnNjcmliZSA9IGZ1bmN0aW9uIHN1YnNjcmliZShrZXksIGNiKSB7XG4gICAgcmV0dXJuIHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbi5zdWJzY3JpYmUoa2V5LCBjYik7XG59O1xudmFyIGdldFN0YXRlID0gZXhwb3J0cy5nZXRTdGF0ZSA9IGZ1bmN0aW9uIGdldFN0YXRlKGtleSkge1xuICAgIHJldHVybiBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24uZ2V0U3RhdGUoa2V5KTtcbn07XG5cbi8qKiovIH0pLFxuLyogMyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnRhZ05hbWVUb1Byb3AgPSB0YWdOYW1lVG9Qcm9wO1xuZXhwb3J0cy5wcm9wTmFtZVRvVGFnID0gcHJvcE5hbWVUb1RhZztcbmV4cG9ydHMuY3JlYXRlVGFnQXJnID0gY3JlYXRlVGFnQXJnO1xuZXhwb3J0cy5tYXRjaFRhZ0FyZyA9IG1hdGNoVGFnQXJnO1xuZXhwb3J0cy5yZXBsYWNlVGFnQXJnID0gcmVwbGFjZVRhZ0FyZztcbmV4cG9ydHMuYXR0cmlidXRlU3RhcnRzID0gYXR0cmlidXRlU3RhcnRzO1xuZnVuY3Rpb24gdGFnTmFtZVRvUHJvcChub2RlTmFtZSkge1xuICAgIHJldHVybiBub2RlTmFtZS5zcGxpdChcIi1cIikucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5leHQpIHtcbiAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2MgKyBuZXh0WzBdLnRvVXBwZXJDYXNlKCkgKyBuZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHByb3BOYW1lVG9UYWcocHJvcCkge1xuICAgIHZhciByZXMgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcC5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAocHJvcFtpXSA9PT0gcHJvcFtpXS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICByZXMgKz0gXCItXCIgKyBwcm9wW2ldLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXMgKz0gcHJvcFtpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVUYWdBcmcoaW5kZXgsIHN0YXJ0QXR0cmlidXRlKSB7XG4gICAgaWYgKHN0YXJ0QXR0cmlidXRlKSByZXR1cm4gXCJfX0FSR19fXCIgKyBpbmRleDtcbiAgICByZXR1cm4gXCI8IS0tX19BUkdfX1wiICsgaW5kZXggKyBcIi0tPlwiO1xufVxuXG5mdW5jdGlvbiBtYXRjaFRhZ0FyZyhzdHIpIHtcbiAgICByZXR1cm4gc3RyLm1hdGNoKC8oPzo8IS0tKT9fX0FSR19fKFxcZCspKD86LS0+KT8vKTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZVRhZ0FyZyhzdHIsIGZuKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC8oPzo8IS0tKT9fX0FSR19fKFxcZCspKD86LS0+KT8vZywgZm4pO1xufVxuXG5mdW5jdGlvbiBhdHRyaWJ1dGVTdGFydHMoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci50cmltKCkuc2xpY2UoLTIpID09PSBcIj1cXFwiXCI7XG59XG5cbi8qKiovIH0pLFxuLyogNCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfd2ViQ29tcG9uZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNoYW5nZVdlYkNvbXBvbmVudHNJbXBsZW1lbmF0aW9uXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3dlYkNvbXBvbmVudHMuc2V0SW1wbGVtZW50YXRpb247XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjb21wb25lbnRzUmVhZHlcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfd2ViQ29tcG9uZW50cy5jb21wb25lbnRzUmVhZHk7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjaGFuZ2VXZWJDb21wb25lbnRzUmVhZHlDaGVja1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF93ZWJDb21wb25lbnRzLnNldFJlYWR5Q2hlY2s7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZWdpc3RlckNvbXBvbmVudFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3dlYkNvbXBvbmVudHMpLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5cbnZhciBfc3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjaGFuZ2VTdG9yZUltcGxlbWVudGF0aW9uXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3N0b3JlLnNldEltcGxlbWVudGF0aW9uO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVnaXN0ZXJSZWR1Y2VyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3N0b3JlLnJlZ2lzdGVyUmVkdWNlcjtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbW92ZVJlZHVjZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfc3RvcmUucmVtb3ZlUmVkdWNlcjtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInN1YnNjcmliZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdG9yZS5zdWJzY3JpYmU7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRTdGF0ZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdG9yZS5nZXRTdGF0ZTtcbiAgICB9XG59KTtcblxudmFyIF90YWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjc3NcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfdGFnLmNzcztcbiAgICB9XG59KTtcblxudmFyIF9zdG9yYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0U3RvcmFnZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdG9yYWdlLmdldFN0b3JhZ2U7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRTdG9yYWdlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3N0b3JhZ2UuYWRkU3RvcmFnZTtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlbW92ZVN0b3JhZ2VcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfc3RvcmFnZS5yZW1vdmVTdG9yYWdlO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2V0U3RvcmFnZURyaXZlclwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdG9yYWdlLnNldFN0b3JhZ2VEcml2ZXI7XG4gICAgfVxufSk7XG5cbnZhciBfYmluZCA9IF9fd2VicGFja19yZXF1aXJlX18oNik7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImJpbmRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfYmluZC5iaW5kO1xuICAgIH1cbn0pO1xuXG52YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwibWF0Y2hUYWdBcmdcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfdXRpbHMubWF0Y2hUYWdBcmc7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZXBsYWNlVGFnQXJnXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3V0aWxzLnJlcGxhY2VUYWdBcmc7XG4gICAgfVxufSk7XG5cbnZhciBfQ29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29tcG9uZW50XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29tcG9uZW50KS5kZWZhdWx0O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29ubmVjdFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9Db21wb25lbnQuY29ubmVjdDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImRlZmluZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9Db21wb25lbnQuZGVmaW5lO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicHJvcHNcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfQ29tcG9uZW50LnByb3BzO1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jc3MgPSBjc3M7XG5mdW5jdGlvbiBjc3MoY3R4KSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmdzKSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgcmVzdWx0ICs9IHN0cmluZ3NbaV07XG4gICAgICAgICAgICBpZiAoaSA8IHN0cmluZ3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1tpXSA9PT0gXCJmdW5jdGlvblwiKSByZXN1bHQgKz0gYXJnc1tpXSgpO2Vsc2UgcmVzdWx0ICs9IGFyZ3NbaV07XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9O1xufVxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5iaW5kID0gYmluZDtcblxudmFyIF9zdG9yYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbnZhciBLRVkgPSBcIkJPVU5EU1wiO1xudmFyIE1BWF9TVE9SQUdFX1NJWkUgPSAxMDA7XG5cbigwLCBfc3RvcmFnZS5hZGRTdG9yYWdlKShLRVksIG5ldyBNYXAoKSk7XG5cbmZ1bmN0aW9uIGFwcGVuZFRvU3RvcmFnZShmbiwgdmFsdWUpIHtcbiAgICB2YXIgc3RvcmFnZSA9ICgwLCBfc3RvcmFnZS5nZXRTdG9yYWdlKShLRVkpO1xuICAgIGlmIChzdG9yYWdlLnNpemUgPT09IE1BWF9TVE9SQUdFX1NJWkUpIHtcbiAgICAgICAgdmFyIGtleXMgPSBzdG9yYWdlLmtleXMoKTtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICBzdG9yYWdlLmRlbGV0ZShrZXlzLm5leHQoKS52YWx1ZSk7XG4gICAgfVxuICAgIHN0b3JhZ2Uuc2V0KGZuLCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGJpbmQoZm4pIHtcbiAgICB2YXIgc3RvcmFnZSA9ICgwLCBfc3RvcmFnZS5nZXRTdG9yYWdlKShLRVkpO1xuICAgIHZhciBib3VuZCA9IHN0b3JhZ2UuZ2V0KGZuKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RBcmcgPSBhcmdzWzBdO1xuICAgIHZhciBib3VuZEZuID0gZm4uYmluZC5hcHBseShmbiwgW251bGxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpKTtcbiAgICBpZiAoYm91bmQpIHtcbiAgICAgICAgaWYgKCFib3VuZC5nZXQoZmlyc3RBcmcpKSB7XG4gICAgICAgICAgICBib3VuZC5zZXQoZmlyc3RBcmcsIGJvdW5kRm4pO1xuICAgICAgICAgICAgcmV0dXJuIGJvdW5kRm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICByZXR1cm4gYm91bmQuZ2V0KGZpcnN0QXJnKTtcbiAgICB9XG5cbiAgICB2YXIgZm5NYXAgPSBuZXcgTWFwKCk7XG4gICAgZm5NYXAuc2V0KGZpcnN0QXJnLCBib3VuZEZuKTtcbiAgICBhcHBlbmRUb1N0b3JhZ2UoZm4sIGZuTWFwKTtcbiAgICByZXR1cm4gYm91bmRGbjtcbn1cblxuLyoqKi8gfSksXG4vKiA3ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHVuZGVmaW5lZDtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG5leHBvcnRzLmNvbm5lY3QgPSBjb25uZWN0O1xuZXhwb3J0cy5kZWZpbmUgPSBkZWZpbmU7XG5leHBvcnRzLnByb3BzID0gcHJvcHM7XG5cbnZhciBfd2ViQ29tcG9uZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfd2ViQ29tcG9uZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93ZWJDb21wb25lbnRzKTtcblxudmFyIF9zdG9yZSA9IF9fd2VicGFja19yZXF1aXJlX18oMik7XG5cbnZhciBfcmVuZGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxudmFyIF9zdG9yYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHsgaWYgKCFzZWxmKSB7IHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTsgfSByZXR1cm4gY2FsbCAmJiAodHlwZW9mIGNhbGwgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikgPyBjYWxsIDogc2VsZjsgfVxuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHsgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb24sIG5vdCBcIiArIHR5cGVvZiBzdXBlckNsYXNzKTsgfSBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHsgY29uc3RydWN0b3I6IHsgdmFsdWU6IHN1YkNsYXNzLCBlbnVtZXJhYmxlOiBmYWxzZSwgd3JpdGFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSB9IH0pOyBpZiAoc3VwZXJDbGFzcykgT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LnNldFByb3RvdHlwZU9mKHN1YkNsYXNzLCBzdXBlckNsYXNzKSA6IHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7IH1cblxudmFyIF9maXhCYWJlbEV4dGVuZCA9IGZ1bmN0aW9uIChPKSB7XG4gICAgdmFyIGdQTyA9IE8uZ2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKG8pIHtcbiAgICAgICAgcmV0dXJuIG8uX19wcm90b19fO1xuICAgIH0sXG4gICAgICAgIHNQTyA9IE8uc2V0UHJvdG90eXBlT2YgfHwgZnVuY3Rpb24gKG8sIHApIHtcbiAgICAgICAgby5fX3Byb3RvX18gPSBwO1xuICAgICAgICByZXR1cm4gbztcbiAgICB9LFxuICAgICAgICBjb25zdHJ1Y3QgPSAodHlwZW9mIFJlZmxlY3QgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogX3R5cGVvZihSZWZsZWN0KSkgPT09ICdvYmplY3QnID8gUmVmbGVjdC5jb25zdHJ1Y3QgOiBmdW5jdGlvbiAoUGFyZW50LCBhcmdzLCBDbGFzcykge1xuICAgICAgICB2YXIgQ29uc3RydWN0b3IsXG4gICAgICAgICAgICBhID0gW251bGxdO1xuICAgICAgICBhLnB1c2guYXBwbHkoYSwgYXJncyk7XG4gICAgICAgIENvbnN0cnVjdG9yID0gUGFyZW50LmJpbmQuYXBwbHkoUGFyZW50LCBhKTtcbiAgICAgICAgcmV0dXJuIHNQTyhuZXcgQ29uc3RydWN0b3IoKSwgQ2xhc3MucHJvdG90eXBlKTtcbiAgICB9O1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIGZpeEJhYmVsRXh0ZW5kKENsYXNzKSB7XG4gICAgICAgIHZhciBQYXJlbnQgPSBnUE8oQ2xhc3MpO1xuICAgICAgICByZXR1cm4gc1BPKENsYXNzLCBzUE8oZnVuY3Rpb24gU3VwZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gY29uc3RydWN0KFBhcmVudCwgYXJndW1lbnRzLCBnUE8odGhpcykuY29uc3RydWN0b3IpO1xuICAgICAgICB9LCBQYXJlbnQpKTtcbiAgICB9O1xufShPYmplY3QpO1xuXG52YXIgcHJvcHNTdG9yYWdlID0gKDAsIF9zdG9yYWdlLmdldFN0b3JhZ2UpKF9zdG9yYWdlLnN0b3JhZ2VLZXlzLlBST1BTKTtcblxuZnVuY3Rpb24gcGFyc2VBdHRyaWJ1dGVzKGF0dHJpYnV0ZXMpIHtcbiAgICB2YXIgcmVzdWx0ID0ge307XG4gICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgIHRyeSB7XG4gICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IGF0dHJpYnV0ZXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgIHJlc3VsdFsoMCwgX3V0aWxzLnRhZ05hbWVUb1Byb3ApKGF0dHJpYnV0ZS5uYW1lKV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgICAgIH1cbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbnZhciBDb21wb25lbnQgPSBfZml4QmFiZWxFeHRlbmQoZnVuY3Rpb24gKF9IVE1MRWxlbWVudCkge1xuICAgIF9pbmhlcml0cyhDb21wb25lbnQsIF9IVE1MRWxlbWVudCk7XG5cbiAgICBmdW5jdGlvbiBDb21wb25lbnQoKSB7XG4gICAgICAgIHZhciBfcmVmO1xuXG4gICAgICAgIHZhciBfdGVtcCwgX3RoaXMsIF9yZXQ7XG5cbiAgICAgICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIENvbXBvbmVudCk7XG5cbiAgICAgICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gX3JldCA9IChfdGVtcCA9IChfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIChfcmVmID0gQ29tcG9uZW50Ll9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2YoQ29tcG9uZW50KSkuY2FsbC5hcHBseShfcmVmLCBbdGhpc10uY29uY2F0KGFyZ3MpKSksIF90aGlzKSwgX3RoaXMuX19kZWZhdWx0UHJvcHMgPSB7fSwgX3RoaXMuc3Vic2NyaXB0aW9ucyA9IFtdLCBfdGhpcy5zdGF0ZSA9IHt9LCBfdGhpcy5tb3VudGVkID0gZmFsc2UsIF90ZW1wKSwgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgIH1cblxuICAgIF9jcmVhdGVDbGFzcyhDb21wb25lbnQsIFt7XG4gICAgICAgIGtleTogXCJiZWZvcmVSZW5kZXJcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGJlZm9yZVJlbmRlcigpIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwicmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4gJyc7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJpbnNlcnRDb250ZW50XCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBpbnNlcnRDb250ZW50KHJvb3QsIGNvbnRlbnQpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgY29udGVudCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgICAgIHJvb3QuaW5uZXJIVE1MID0gY29udGVudDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiZGVmYXVsdCByZW5kZXJlciBjYW4gaGFuZGxlIG9ubHkgc3RyaW5nc1wiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImFmdGVyUmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZnRlclJlbmRlcigpIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic3Vic2NyaWJlVG9TdG9yZVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlVG9TdG9yZSgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gdGhpcy5rZXlzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goKDAsIF9zdG9yZS5zdWJzY3JpYmUpKGtleSwgZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfdGhpczIuc3RhdGUgPSBzdGF0ZTtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9yZW5kZXIucmVuZGVyLmNhbGwoX3RoaXMyKTtcbiAgICAgICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gKDAsIF9zdG9yZS5nZXRTdGF0ZSkoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMi5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNvbm5lY3RlZENhbGxiYWNrXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaWJlVG9TdG9yZSgpO1xuICAgICAgICAgICAgX3JlbmRlci5yZW5kZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICAgICAgdGhpcy5jb25uZWN0ZWQoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImNvbm5lY3RlZFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdGVkKCkge31cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJkaXNjb25uZWN0ZWRDYWxsYmFja1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gZGlzY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMyA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yMyA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IzID0gdGhpcy5zdWJzY3JpcHRpb25zW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXAzOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gKF9zdGVwMyA9IF9pdGVyYXRvcjMubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSB0cnVlKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBzdWJzY3JpcHRpb24gPSBfc3RlcDMudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgc3Vic2NyaXB0aW9uLnVuc3Vic2NyaWJlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IzID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjMgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgJiYgX2l0ZXJhdG9yMy5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjMucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjM7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdGVkKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJkaXNjb25uZWN0ZWRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3RlZCgpIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYWRvcHRlZENhbGxiYWNrXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZG9wdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZVRvU3RvcmUoKTtcbiAgICAgICAgICAgIF9yZW5kZXIucmVuZGVyLmNhbGwodGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRvcHRlZCgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYWRvcHRlZFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRvcHRlZCgpIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0cmlidXRlTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tb3VudGVkICYmIG9sZFZhbHVlICE9IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wc0NoYW5nZWQoX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgYXR0cmlidXRlTmFtZSwgbmV3VmFsdWUpKSk7XG4gICAgICAgICAgICAgICAgX3JlbmRlci5yZW5kZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInByb3BzQ2hhbmdlZFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJvcHNDaGFuZ2VkKG5ld1Byb3BzKSB7fVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcIm5hbWVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJpc1NoYWRvd1wiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwicHJvcHNcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICB2YXIgYXR0cmlidXRlcyA9IHBhcnNlQXR0cmlidXRlcyh0aGlzLmF0dHJpYnV0ZXMpO1xuICAgICAgICAgICAgdmFyIGlkID0gTnVtYmVyKGF0dHJpYnV0ZXMucHJvcHNJZCk7XG4gICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRoaXMuX19kZWZhdWx0UHJvcHMsIGF0dHJpYnV0ZXMsIHByb3BzU3RvcmFnZS5nZXQoaWQpIHx8IHt9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQocHJvcHMpIHtcbiAgICAgICAgICAgIHRoaXMuX19kZWZhdWx0UHJvcHMgPSBwcm9wcztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImtleXNcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzdHlsZXNcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAgICBrZXk6IFwib2JzZXJ2ZWRBdHRyaWJ1dGVzXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JzZXJ2YWJsZVByb3BzLm1hcChfdXRpbHMucHJvcE5hbWVUb1RhZykuY29uY2F0KFwicHJvcHMtaWRcIik7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJvYnNlcnZhYmxlUHJvcHNcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29tcG9uZW50O1xufShIVE1MRWxlbWVudCkpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG5mdW5jdGlvbiBjb25uZWN0KGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoV3JhcHBlZCkge1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKF9XcmFwcGVkKSB7XG4gICAgICAgICAgICBfaW5oZXJpdHMoX2NsYXNzMiwgX1dyYXBwZWQpO1xuXG4gICAgICAgICAgICBmdW5jdGlvbiBfY2xhc3MyKCkge1xuICAgICAgICAgICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBfY2xhc3MyKTtcblxuICAgICAgICAgICAgICAgIHJldHVybiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX2NsYXNzMi5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKF9jbGFzczIpKS5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgX2NyZWF0ZUNsYXNzKF9jbGFzczIsIFt7XG4gICAgICAgICAgICAgICAga2V5OiBcImtleXNcIixcbiAgICAgICAgICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtrZXldO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1dKTtcblxuICAgICAgICAgICAgcmV0dXJuIF9jbGFzczI7XG4gICAgICAgIH0oV3JhcHBlZCk7XG4gICAgfTtcbn1cblxuZnVuY3Rpb24gZGVmaW5lKG5hbWUpIHtcbiAgICByZXR1cm4gZnVuY3Rpb24gKFdyYXBwZWQpIHtcbiAgICAgICAgKDAsIF93ZWJDb21wb25lbnRzMi5kZWZhdWx0KShuYW1lLCBXcmFwcGVkKTtcbiAgICAgICAgcmV0dXJuIFdyYXBwZWQ7XG4gICAgfTtcbn1cblxudmFyIHByb3BzSWQgPSAwO1xuXG5mdW5jdGlvbiBwcm9wcyhwcm9wcykge1xuICAgIHZhciBpZCA9IHByb3BzSWQrKztcbiAgICBwcm9wc1N0b3JhZ2Uuc2V0KGlkLCBwcm9wcyk7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgJ3Byb3BzLWlkJzogaWQsXG4gICAgICAgIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICAgICAgICAgIHJldHVybiBcInByb3BzLWlkPVxcXCJcIiArIGlkICsgXCJcXFwiXCI7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yZW5kZXIgPSByZW5kZXI7XG5mdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgdGhpcy5iZWZvcmVSZW5kZXIoKTtcblxuICAgIGlmICh0aGlzLmlzU2hhZG93ICYmICF0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnJvb3QpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTaGFkb3cpIHtcbiAgICAgICAgICAgIHRoaXMuc2hhZG93Um9vdC5pbm5lckhUTUwgPSAnPHN0eWxlPicgKyB0aGlzLnN0eWxlcyArICc8L3N0eWxlPic7XG4gICAgICAgICAgICB0aGlzLnJvb3QgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgICAgICAgICAgdGhpcy5zaGFkb3dSb290LmFwcGVuZENoaWxkKHRoaXMucm9vdCk7XG4gICAgICAgICAgICB0aGlzLnJvb3Quc3R5bGUgPSAnZGlzcGxheTogY29udGVudHMnO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbm5lckhUTUwgPSAnPHN0eWxlPicgKyB0aGlzLnN0eWxlcyArICc8L3N0eWxlPic7XG4gICAgICAgICAgICB0aGlzLnJvb3QgPSB0aGlzO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgdmFyIHJlbmRlclJlcyA9IHRoaXMucmVuZGVyKCk7XG4gICAgaWYgKHJlbmRlclJlcykge1xuICAgICAgICB0aGlzLmluc2VydENvbnRlbnQodGhpcy5yb290LCByZW5kZXJSZXMpO1xuICAgIH1cblxuICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG5cbiAgICB0aGlzLmFmdGVyUmVuZGVyKCk7XG59XG5cbi8qKiovIH0pXG4vKioqKioqLyBdKTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gbWFpbi5qcyIsIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBMb2FkIGVudHJ5IG1vZHVsZSBhbmQgcmV0dXJuIGV4cG9ydHNcbiBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDQpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGU4YzI1ZjM1N2YyYzBlZWVkMDc2IiwiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUge1N0b3JhZ2VEcml2ZXJ9IGZyb20gXCIuL2ludGVyZmFjZXNcIjtcblxuY29uc3QgcHJvcHNNYXA6IE1hcDxhbnksIGFueT4gPSBuZXcgTWFwO1xuXG5jb25zdCBldmVudHNNYXA6IE1hcDxhbnksIGFueT4gPSBuZXcgTWFwO1xuXG5leHBvcnQgY29uc3Qgc3RvcmFnZUtleXMgPSB7XG4gICAgUFJPUFM6IFwicHJvcHNcIixcbiAgICBFVkVOVFM6IFwiZXZlbnRzXCJcbn07XG5cbmNvbnN0IGRyaXZlcjogU3RvcmFnZURyaXZlciA9IHtcbiAgICBpdGVtczogT2JqZWN0LmNyZWF0ZSh7XG4gICAgICAgIFtzdG9yYWdlS2V5cy5QUk9QU106IHByb3BzTWFwLFxuICAgICAgICBbc3RvcmFnZUtleXMuRVZFTlRTXTogZXZlbnRzTWFwLFxuICAgIH0pLFxuICAgIHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5pdGVtc1trZXldID0gdmFsdWVcbiAgICB9LFxuICAgIGdldEl0ZW0oa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXNba2V5XVxuICAgIH0sXG4gICAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZykge1xuICAgICAgICBkZWxldGUgdGhpcy5pdGVtc1trZXldXG4gICAgfSxcbiAgICBtaWdyYXRlKGRyaXZlcjogU3RvcmFnZURyaXZlcikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLml0ZW1zKSB7XG4gICAgICAgICAgICBkcml2ZXIuc2V0SXRlbShcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtc1trZXldXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRyaXZlclxuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzdG9yYWdlID0ge1xuICAgIGRyaXZlclxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFN0b3JhZ2VEcml2ZXIoZHJpdmVyOiBTdG9yYWdlRHJpdmVyKTogdm9pZCB7XG4gICAgc3RvcmFnZS5kcml2ZXIgPSBzdG9yYWdlLmRyaXZlci5taWdyYXRlKGRyaXZlcilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0b3JhZ2Uoa2V5OiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiBzdG9yYWdlLmRyaXZlci5nZXRJdGVtKGtleSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFN0b3JhZ2Uoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBzdG9yYWdlLmRyaXZlci5zZXRJdGVtKGtleSwgdmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVTdG9yYWdlKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgc3RvcmFnZS5kcml2ZXIucmVtb3ZlSXRlbShrZXkpXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N0b3JhZ2UuanMiLCIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7V2ViQ29tcG9uZW50cyBhcyBJbXBsZW1lbnRhdGlvbn0gZnJvbSBcIi4vaW50ZXJmYWNlc1wiXG5cbmNvbnN0IGRlZmF1bHRJbXBsZW1lbnRhdGlvbjogSW1wbGVtZW50YXRpb24gPSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQobmFtZTogc3RyaW5nLCBjb21wb25lbnQ6IENsYXNzPEVsZW1lbnQ+KSB7XG4gICAgICAgIGlmICgnY3VzdG9tRWxlbWVudHMnIGluIHdpbmRvdykge1xuICAgICAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKG5hbWUsIGNvbXBvbmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50UmVhZHlDaGVjaygpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyQ29tcG9uZW50KG5hbWUsIGNvbXBvbmVudClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGlzQ3VzdG9tQ29tcG9uZW50KG5vZGU6IE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubm9kZU5hbWUuaW5jbHVkZXMoXCItXCIpXG4gICAgfVxufTtcblxubGV0IGN1cnJlbnRJbXBsZW1lbnRhdGlvbiA9IGRlZmF1bHRJbXBsZW1lbnRhdGlvbjtcblxuY29uc3QgcmVnaXN0ZXJDb21wb25lbnQgPSAobmFtZTogc3RyaW5nLCBjb21wb25lbnQ6IENsYXNzPEVsZW1lbnQ+KSA9PiB7XG4gICAgcmV0dXJuIGN1cnJlbnRJbXBsZW1lbnRhdGlvbi5yZWdpc3RlckNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldEltcGxlbWVudGF0aW9uID0gKGltcGxlbWVudGF0aW9uOiBJbXBsZW1lbnRhdGlvbikgPT4ge1xuICAgIGN1cnJlbnRJbXBsZW1lbnRhdGlvbiA9IGltcGxlbWVudGF0aW9uO1xufTtcblxubGV0IGN1cnJlbnRSZWFkeUNoZWNrID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzUmVhZHkgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGN1cnJlbnRSZWFkeUNoZWNrKClcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRSZWFkeUNoZWNrID0gKHJlYWR5Q2hlY2s6IEZ1bmN0aW9uKSA9PiB7XG4gICAgY3VycmVudFJlYWR5Q2hlY2sgPSByZWFkeUNoZWNrO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVnaXN0ZXJDb21wb25lbnQ7XG5cbmV4cG9ydCBjb25zdCBpc0N1c3RvbUNvbXBvbmVudCA9IChub2RlOiBOb2RlKSA9PiB7XG4gICAgcmV0dXJuIGN1cnJlbnRJbXBsZW1lbnRhdGlvbi5pc0N1c3RvbUNvbXBvbmVudChub2RlKVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvd2ViLWNvbXBvbmVudHMuanMiLCIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7U3RvcmUsIFJlZHVjZXJ9IGZyb20gXCIuL2ludGVyZmFjZXNcIlxuXG5jb25zdCBzdHViSW1wbGVtZW50YXRpb246IFN0b3JlID0ge1xuICAgIHJlZHVjZXJzOiB7fSxcbiAgICBzdWJzY3JpcHRpb25zOiB7fSxcbiAgICBhZGRSZWR1Y2VyKGtleTogc3RyaW5nLCByZWR1Y2VyOiBSZWR1Y2VyKSB7XG4gICAgICAgIHRoaXMucmVkdWNlcnNba2V5XSA9IHJlZHVjZXI7XG4gICAgfSxcbiAgICByZW1vdmVSZWR1Y2VyKGtleTogc3RyaW5nKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJlZHVjZXJzW2tleV07XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIHN1YnNjcmliZShrZXk6IHN0cmluZywgY2I6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5zdWJzY3JpcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2tleV0ucHVzaChjYik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1trZXldID0gdGhpcy5zdWJzY3JpcHRpb25zW2tleV0uZmlsdGVyKGVsID0+IGVsICE9PSBjYilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0U3RhdGUoa2V5OiBzdHJpbmcpIHt9LFxuICAgIG1pZ3JhdGUobmV3U3RvcmU6IFN0b3JlKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMucmVkdWNlcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZHVjZXIgPSB0aGlzLnJlZHVjZXJzW2tleV07XG4gICAgICAgICAgICBuZXdTdG9yZS5hZGRSZWR1Y2VyKGtleSwgcmVkdWNlcik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5zdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN1YnNjcmlwdGlvbiBvZiB0aGlzLnN1YnNjcmlwdGlvbnNba2V5XSkge1xuICAgICAgICAgICAgICAgIG5ld1N0b3JlLnN1YnNjcmliZShrZXksIHN1YnNjcmlwdGlvbilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3U3RvcmU7XG4gICAgfVxufTtcblxuY29uc3Qgc3RvcmUgPSB7XG4gICAgY3VycmVudEltcGxlbWVudGF0aW9uOiBzdHViSW1wbGVtZW50YXRpb25cbn07XG5cbmV4cG9ydCBjb25zdCBzZXRJbXBsZW1lbnRhdGlvbiA9IChpbXBsZW1lbnRhdGlvbjogU3RvcmUpID0+IHtcbiAgICBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24gPSBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24ubWlncmF0ZShpbXBsZW1lbnRhdGlvbilcbn07XG5cbmV4cG9ydCBjb25zdCByZWdpc3RlclJlZHVjZXIgPSAoa2V5OiBzdHJpbmcsIHJlZHVjZXI6IFJlZHVjZXIpID0+IHtcbiAgICBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24uYWRkUmVkdWNlcihrZXksIHJlZHVjZXIpXG59O1xuZXhwb3J0IGNvbnN0IHJlbW92ZVJlZHVjZXIgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24ucmVtb3ZlUmVkdWNlcihrZXkpXG59O1xuZXhwb3J0IGNvbnN0IHN1YnNjcmliZSA9IChrZXk6IHN0cmluZywgY2I6IEZ1bmN0aW9uKSA9PiB7XG4gICAgcmV0dXJuIHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbi5zdWJzY3JpYmUoa2V5LCBjYilcbn07XG5leHBvcnQgY29uc3QgZ2V0U3RhdGUgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gc3RvcmUuY3VycmVudEltcGxlbWVudGF0aW9uLmdldFN0YXRlKGtleSlcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N0b3JlLmpzIiwiLy8gQGZsb3dcblxuZXhwb3J0IGZ1bmN0aW9uIHRhZ05hbWVUb1Byb3Aobm9kZU5hbWU6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIG5vZGVOYW1lLnNwbGl0KFwiLVwiKS5yZWR1Y2UoXG4gICAgICAgIChhY2MsIG5leHQpID0+IHtcbiAgICAgICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGFjYyArIG5leHRbMF0udG9VcHBlckNhc2UoKSArIG5leHQuc2xpY2UoMSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBhY2NcbiAgICAgICAgfVxuICAgICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9wTmFtZVRvVGFnKHByb3A6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgbGV0IHJlcyA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwcm9wLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmIChwcm9wW2ldID09PSBwcm9wW2ldLnRvVXBwZXJDYXNlKCkpIHtcbiAgICAgICAgICAgIHJlcyArPSBcIi1cIitwcm9wW2ldLnRvTG93ZXJDYXNlKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcyArPSBwcm9wW2ldXG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGFnQXJnKGluZGV4OiBudW1iZXIsIHN0YXJ0QXR0cmlidXRlOiBib29sZWFuKTogc3RyaW5nIHtcbiAgICBpZiAoc3RhcnRBdHRyaWJ1dGUpXG4gICAgICAgIHJldHVybiBgX19BUkdfXyR7aW5kZXh9YDtcbiAgICByZXR1cm4gYDwhLS1fX0FSR19fJHtpbmRleH0tLT5gXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaFRhZ0FyZyhzdHI6IHN0cmluZykge1xuICAgIHJldHVybiBzdHIubWF0Y2goLyg/OjwhLS0pP19fQVJHX18oXFxkKykoPzotLT4pPy8pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlVGFnQXJnKHN0cjogc3RyaW5nLCBmbjogRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLyg/OjwhLS0pP19fQVJHX18oXFxkKykoPzotLT4pPy9nLCBmbilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGF0dHJpYnV0ZVN0YXJ0cyhzdHI6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiBzdHIudHJpbSgpLnNsaWNlKC0yKSA9PT0gYD1cImBcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMuanMiLCIvLyBAZmxvd1xuXG5leHBvcnQge1xuICAgIHNldEltcGxlbWVudGF0aW9uIGFzIGNoYW5nZVdlYkNvbXBvbmVudHNJbXBsZW1lbmF0aW9uLFxuICAgIGNvbXBvbmVudHNSZWFkeSxcbiAgICBzZXRSZWFkeUNoZWNrIGFzIGNoYW5nZVdlYkNvbXBvbmVudHNSZWFkeUNoZWNrLFxuICAgIGRlZmF1bHQgYXMgcmVnaXN0ZXJDb21wb25lbnRcbn0gZnJvbSBcIi4vd2ViLWNvbXBvbmVudHNcIlxuXG5leHBvcnQge1xuICAgIHNldEltcGxlbWVudGF0aW9uIGFzIGNoYW5nZVN0b3JlSW1wbGVtZW50YXRpb24sXG4gICAgcmVnaXN0ZXJSZWR1Y2VyLFxuICAgIHJlbW92ZVJlZHVjZXIsXG4gICAgc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlXG59IGZyb20gXCIuL3N0b3JlXCJcblxuZXhwb3J0IHtcbiAgICBjc3Ncbn0gZnJvbSBcIi4vdGFnXCJcblxuZXhwb3J0IHtcbiAgICBnZXRTdG9yYWdlLFxuICAgIGFkZFN0b3JhZ2UsXG4gICAgcmVtb3ZlU3RvcmFnZSxcbiAgICBzZXRTdG9yYWdlRHJpdmVyXG59IGZyb20gXCIuL3N0b3JhZ2VcIlxuXG5leHBvcnQge2JpbmR9IGZyb20gXCIuL2JpbmRcIlxuXG5leHBvcnQge1xuICAgIG1hdGNoVGFnQXJnLFxuICAgIHJlcGxhY2VUYWdBcmdcbn0gZnJvbSBcIi4vdXRpbHNcIlxuXG5leHBvcnQge1xuICAgIGRlZmF1bHQgYXMgQ29tcG9uZW50LFxuICAgIGNvbm5lY3QsXG4gICAgZGVmaW5lLFxuICAgIHByb3BzLFxufSBmcm9tIFwiLi9Db21wb25lbnRcIlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIiwiLy8gQGZsb3dcblxuZXhwb3J0IGZ1bmN0aW9uIGNzcyhjdHg6IE9iamVjdCkge1xuICAgIHJldHVybiAoc3RyaW5nczogc3RyaW5nW10sIC4uLmFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQgPSAnJztcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICByZXN1bHQgKz0gc3RyaW5nc1tpXTtcbiAgICAgICAgICAgIGlmIChpIDwgc3RyaW5ncy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2ldID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdCArPSBhcmdzW2ldKCk7XG4gICAgICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgICAgICByZXN1bHQgKz0gYXJnc1tpXVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3RhZy5qcyIsIi8vIEBmbG93XG5cbmltcG9ydCB7YWRkU3RvcmFnZSwgZ2V0U3RvcmFnZX0gZnJvbSBcIi4vc3RvcmFnZVwiXG5cbmNvbnN0IEtFWSA9IFwiQk9VTkRTXCI7XG5jb25zdCBNQVhfU1RPUkFHRV9TSVpFID0gMTAwO1xuXG5hZGRTdG9yYWdlKFxuICAgIEtFWSxcbiAgICBuZXcgTWFwKClcbik7XG5cbmZ1bmN0aW9uIGFwcGVuZFRvU3RvcmFnZShmbjogRnVuY3Rpb24sIHZhbHVlOiBNYXA8YW55LCBGdW5jdGlvbj4pOiB2b2lkIHtcbiAgICBjb25zdCBzdG9yYWdlOiBNYXA8RnVuY3Rpb24sIE1hcDxhbnksIEZ1bmN0aW9uPj4gPSBnZXRTdG9yYWdlKEtFWSk7XG4gICAgaWYgKHN0b3JhZ2Uuc2l6ZSA9PT0gTUFYX1NUT1JBR0VfU0laRSkge1xuICAgICAgICBjb25zdCBrZXlzID0gc3RvcmFnZS5rZXlzKCk7XG4gICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgc3RvcmFnZS5kZWxldGUoa2V5cy5uZXh0KCkudmFsdWUpO1xuICAgIH1cbiAgICBzdG9yYWdlLnNldChmbiwgdmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBiaW5kKGZuOiBGdW5jdGlvbiwgLi4uYXJnczogYW55W10pOiBGdW5jdGlvbiB7XG4gICAgY29uc3Qgc3RvcmFnZTogTWFwPEZ1bmN0aW9uLCBNYXA8YW55LCBGdW5jdGlvbj4+ID0gZ2V0U3RvcmFnZShLRVkpO1xuICAgIGNvbnN0IGJvdW5kID0gc3RvcmFnZS5nZXQoZm4pO1xuICAgIGNvbnN0IGZpcnN0QXJnID0gYXJnc1swXTtcbiAgICBjb25zdCBib3VuZEZuID0gZm4uYmluZChudWxsLCAuLi5hcmdzKTtcbiAgICBpZiAoYm91bmQpIHtcbiAgICAgICAgaWYgKCFib3VuZC5nZXQoZmlyc3RBcmcpKSB7XG4gICAgICAgICAgICBib3VuZC5zZXQoXG4gICAgICAgICAgICAgICAgZmlyc3RBcmcsXG4gICAgICAgICAgICAgICAgYm91bmRGblxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJldHVybiBib3VuZEZuXG4gICAgICAgIH1cbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICByZXR1cm4gYm91bmQuZ2V0KGZpcnN0QXJnKVxuICAgIH1cblxuICAgIGNvbnN0IGZuTWFwID0gbmV3IE1hcCgpO1xuICAgIGZuTWFwLnNldChcbiAgICAgICAgZmlyc3RBcmcsXG4gICAgICAgIGJvdW5kRm5cbiAgICApO1xuICAgIGFwcGVuZFRvU3RvcmFnZShcbiAgICAgICAgZm4sXG4gICAgICAgIGZuTWFwXG4gICAgKTtcbiAgICByZXR1cm4gYm91bmRGblxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9iaW5kLmpzIiwiLy8gQGZsb3dcblxuaW1wb3J0IHJlZ2lzdGVyQ29tcG9uZW50IGZyb20gXCIuL3dlYi1jb21wb25lbnRzXCJcbmltcG9ydCB7c3Vic2NyaWJlLCBnZXRTdGF0ZX0gZnJvbSBcIi4vc3RvcmVcIlxuaW1wb3J0IHtyZW5kZXJ9IGZyb20gXCIuL3JlbmRlclwiXG5pbXBvcnQge2dldFN0b3JhZ2UsIHN0b3JhZ2VLZXlzfSBmcm9tIFwiLi9zdG9yYWdlXCJcbmltcG9ydCB7cHJvcE5hbWVUb1RhZywgdGFnTmFtZVRvUHJvcH0gZnJvbSBcIi4vdXRpbHNcIjtcblxuY29uc3QgcHJvcHNTdG9yYWdlID0gZ2V0U3RvcmFnZShzdG9yYWdlS2V5cy5QUk9QUyk7XG5cbmZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlcyhhdHRyaWJ1dGVzOiBOYW1lZE5vZGVNYXApOiBPYmplY3Qge1xuICAgIGNvbnN0IHJlc3VsdCA9IHt9O1xuICAgIGZvciAoY29uc3QgYXR0cmlidXRlIG9mIGF0dHJpYnV0ZXMpIHtcbiAgICAgICAgcmVzdWx0W3RhZ05hbWVUb1Byb3AoYXR0cmlidXRlLm5hbWUpXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50IGV4dGVuZHMgSFRNTEVsZW1lbnQge1xuICAgIGdldCBuYW1lKCkge1xuICAgICAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yLm5hbWVcbiAgICB9XG5cbiAgICBnZXQgaXNTaGFkb3coKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgZ2V0IHByb3BzKCkge1xuICAgICAgICBjb25zdCBhdHRyaWJ1dGVzOiBPYmplY3QgPSBwYXJzZUF0dHJpYnV0ZXModGhpcy5hdHRyaWJ1dGVzKTtcbiAgICAgICAgY29uc3QgaWQgPSBOdW1iZXIoYXR0cmlidXRlcy5wcm9wc0lkKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnRoaXMuX19kZWZhdWx0UHJvcHMsXG4gICAgICAgICAgICAuLi5hdHRyaWJ1dGVzLFxuICAgICAgICAgICAgLi4uKHByb3BzU3RvcmFnZS5nZXQoaWQpIHx8IHt9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0IHByb3BzKHByb3BzOiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5fX2RlZmF1bHRQcm9wcyA9IHByb3BzO1xuICAgIH1cblxuICAgIGdldCBrZXlzKCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICB9XG5cbiAgICBnZXQgc3R5bGVzKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlwiXG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZhYmxlUHJvcHMubWFwKHByb3BOYW1lVG9UYWcpLmNvbmNhdChcInByb3BzLWlkXCIpXG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBvYnNlcnZhYmxlUHJvcHMoKSB7XG4gICAgICAgIHJldHVybiBbXVxuICAgIH1cblxuICAgIF9fZGVmYXVsdFByb3BzID0ge307XG5cbiAgICBzdWJzY3JpcHRpb25zID0gW107XG5cbiAgICBzdGF0ZSA9IHt9O1xuXG4gICAgbW91bnRlZCA9IGZhbHNlO1xuXG4gICAgcm9vdDogSFRNTEVsZW1lbnQ7XG5cbiAgICBiZWZvcmVSZW5kZXIoKSB7fVxuXG4gICAgcmVuZGVyKCk6IHN0cmluZyB8IHZvaWQge1xuICAgICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICBpbnNlcnRDb250ZW50KHJvb3Q6IEhUTUxFbGVtZW50LCBjb250ZW50OiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgaWYgKHR5cGVvZiBjb250ZW50ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICByb290LmlubmVySFRNTCA9IGNvbnRlbnRcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcImRlZmF1bHQgcmVuZGVyZXIgY2FuIGhhbmRsZSBvbmx5IHN0cmluZ3NcIilcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGFmdGVyUmVuZGVyKCkge31cblxuICAgIHN1YnNjcmliZVRvU3RvcmUoKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHRoaXMua2V5cykge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zLnB1c2goXG4gICAgICAgICAgICAgICAgc3Vic2NyaWJlKGtleSwgc3RhdGUgPT4ge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLnN0YXRlID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlci5jYWxsKHRoaXMpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlID0gZ2V0U3RhdGUoa2V5KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICB0aGlzLnN1YnNjcmliZVRvU3RvcmUoKTtcbiAgICAgICAgcmVuZGVyLmNhbGwodGhpcyk7XG5cbiAgICAgICAgdGhpcy5jb25uZWN0ZWQoKVxuICAgIH1cblxuICAgIGNvbm5lY3RlZCgpIHt9XG5cbiAgICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgZm9yIChjb25zdCBzdWJzY3JpcHRpb24gb2YgdGhpcy5zdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKVxuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQoKVxuICAgIH1cblxuICAgIGRpc2Nvbm5lY3RlZCgpIHt9XG5cbiAgICBhZG9wdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9TdG9yZSgpO1xuICAgICAgICByZW5kZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLmFkb3B0ZWQoKVxuICAgIH1cblxuICAgIGFkb3B0ZWQoKSB7fVxuXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgb2xkVmFsdWU6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5tb3VudGVkICYmIG9sZFZhbHVlICE9IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzQ2hhbmdlZChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgICAgIFthdHRyaWJ1dGVOYW1lXTogbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlbmRlci5jYWxsKHRoaXMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm9wc0NoYW5nZWQobmV3UHJvcHM6IE9iamVjdCkge31cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3Qoa2V5OiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKFdyYXBwZWQ6IENsYXNzPENvbXBvbmVudD4pID0+IHtcbiAgICAgICAgcmV0dXJuIGNsYXNzIGV4dGVuZHMgV3JhcHBlZCB7XG4gICAgICAgICAgICBnZXQga2V5cygpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2tleV1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZShuYW1lOiBzdHJpbmcpIHtcbiAgICByZXR1cm4gKFdyYXBwZWQ6IENsYXNzPENvbXBvbmVudD4pID0+IHtcbiAgICAgICAgcmVnaXN0ZXJDb21wb25lbnQobmFtZSwgV3JhcHBlZCk7XG4gICAgICAgIHJldHVybiBXcmFwcGVkXG4gICAgfVxufVxuXG5sZXQgcHJvcHNJZCA9IDA7XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9wcyhwcm9wczogT2JqZWN0KSB7XG4gICAgY29uc3QgaWQgPSBwcm9wc0lkKys7XG4gICAgcHJvcHNTdG9yYWdlLnNldChcbiAgICAgICAgaWQsXG4gICAgICAgIHByb3BzXG4gICAgKTtcbiAgICByZXR1cm4ge1xuICAgICAgICAncHJvcHMtaWQnOiBpZCxcbiAgICAgICAgdG9TdHJpbmcoKSB7XG4gICAgICAgICAgICByZXR1cm4gYHByb3BzLWlkPVwiJHtpZH1cImBcbiAgICAgICAgfVxuICAgIH1cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQ29tcG9uZW50LmpzIiwiLy8gQGZsb3dcblxuZXhwb3J0IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICB0aGlzLmJlZm9yZVJlbmRlcigpO1xuXG4gICAgaWYgKHRoaXMuaXNTaGFkb3cgJiYgIXRoaXMuc2hhZG93Um9vdCkge1xuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTogJ29wZW4nfSk7XG4gICAgfVxuXG4gICAgaWYgKCF0aGlzLnJvb3QpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNTaGFkb3cpIHtcbiAgICAgICAgICAgIHRoaXMuc2hhZG93Um9vdC5pbm5lckhUTUwgPSBgPHN0eWxlPiR7dGhpcy5zdHlsZXN9PC9zdHlsZT5gO1xuICAgICAgICAgICAgdGhpcy5yb290ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgICAgICAgICAgIHRoaXMuc2hhZG93Um9vdC5hcHBlbmRDaGlsZCh0aGlzLnJvb3QpO1xuICAgICAgICAgICAgdGhpcy5yb290LnN0eWxlID0gJ2Rpc3BsYXk6IGNvbnRlbnRzJ1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5pbm5lckhUTUwgPSBgPHN0eWxlPiR7dGhpcy5zdHlsZXN9PC9zdHlsZT5gO1xuICAgICAgICAgICAgdGhpcy5yb290ID0gdGhpc1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgcmVuZGVyUmVzID0gdGhpcy5yZW5kZXIoKTtcbiAgICBpZiAocmVuZGVyUmVzKSB7XG4gICAgICAgIHRoaXMuaW5zZXJ0Q29udGVudCh0aGlzLnJvb3QsIHJlbmRlclJlcylcbiAgICB9XG5cbiAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuXG4gICAgdGhpcy5hZnRlclJlbmRlcigpO1xufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9yZW5kZXIuanMiXSwic291cmNlUm9vdCI6IiJ9