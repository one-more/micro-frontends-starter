module.exports=function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var r={};return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=4)}([function(e,t,r){"use strict";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e){d.driver=d.driver.migrate(e)}function i(e){return d.driver.getItem(e)}function u(e,t){d.driver.setItem(e,t)}function c(e){d.driver.removeItem(e)}Object.defineProperty(t,"__esModule",{value:!0});var a;t.setStorageDriver=o,t.getStorage=i,t.addStorage=u,t.removeStorage=c;var s=new Map,f=new Map,l=t.storageKeys={PROPS:"props",EVENTS:"events"},p={items:Object.create((a={},n(a,l.PROPS,s),n(a,l.EVENTS,f),a)),setItem:function(e,t){this.items[e]=t},getItem:function(e){return this.items[e]},removeItem:function(e){delete this.items[e]},migrate:function(e){for(var t in this.items)e.setItem(t,this.items[t]);return e}},d=t.storage={driver:p}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={registerComponent:function(e,t){"customElements"in window?customElements.define(e,t):u().then(function(){i(e,t)})},isCustomComponent:function(e){return e.nodeName.includes("-")}},o=n,i=function(e,t){return o.registerComponent(e,t)},u=(t.setImplementation=function(e){o=e},function(){return Promise.resolve()});t.componentsReady=function(){return u()},t.setReadyCheck=function(e){u=e};t.default=i;t.isCustomComponent=function(e){return o.isCustomComponent(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={reducers:{},subscriptions:{},addReducer:function(e,t){this.reducers[e]=t},removeReducer:function(e){return delete this.reducers[e],!1},subscribe:function(e,t){var r=this;return this.subscriptions[e]||(this.subscriptions[e]=[]),this.subscriptions[e].push(t),{unsubscribe:function(){r.subscriptions[e]=r.subscriptions[e].filter(function(e){return e!==t})}}},getState:function(e){},migrate:function(e){for(var t in this.reducers){var r=this.reducers[t];e.addReducer(t,r)}for(var n in this.subscriptions){var o=!0,i=!1,u=void 0;try{for(var c,a=this.subscriptions[n][Symbol.iterator]();!(o=(c=a.next()).done);o=!0){var s=c.value;e.subscribe(n,s)}}catch(e){i=!0,u=e}finally{try{!o&&a.return&&a.return()}finally{if(i)throw u}}}return e}},o={currentImplementation:n};t.setImplementation=function(e){o.currentImplementation=o.currentImplementation.migrate(e)},t.registerReducer=function(e,t){o.currentImplementation.addReducer(e,t)},t.removeReducer=function(e){o.currentImplementation.removeReducer(e)},t.subscribe=function(e,t){return o.currentImplementation.subscribe(e,t)},t.getState=function(e){return o.currentImplementation.getState(e)}},function(e,t,r){"use strict";function n(e){return e.split("-").reduce(function(e,t){return t?e+t[0].toUpperCase()+t.slice(1):e})}function o(e){for(var t="",r=0;r<e.length;r++)e[r]===e[r].toUpperCase()?t+="-"+e[r].toLowerCase():t+=e[r];return t}function i(e,t){return t?"__ARG__"+e:"\x3c!--__ARG__"+e+"--\x3e"}function u(e){return e.match(/(?:<!--)?__ARG__(\d+)(?:-->)?/)}function c(e,t){return e.replace(/(?:<!--)?__ARG__(\d+)(?:-->)?/g,t)}function a(e){return'="'===e.trim().slice(-2)}Object.defineProperty(t,"__esModule",{value:!0}),t.tagNameToProp=n,t.propNameToTag=o,t.createTagArg=i,t.matchTagArg=u,t.replaceTagArg=c,t.attributeStarts=a},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(1);Object.defineProperty(t,"changeWebComponentsImplemenation",{enumerable:!0,get:function(){return o.setImplementation}}),Object.defineProperty(t,"componentsReady",{enumerable:!0,get:function(){return o.componentsReady}}),Object.defineProperty(t,"changeWebComponentsReadyCheck",{enumerable:!0,get:function(){return o.setReadyCheck}}),Object.defineProperty(t,"registerComponent",{enumerable:!0,get:function(){return n(o).default}});var i=r(2);Object.defineProperty(t,"changeStoreImplementation",{enumerable:!0,get:function(){return i.setImplementation}}),Object.defineProperty(t,"registerReducer",{enumerable:!0,get:function(){return i.registerReducer}}),Object.defineProperty(t,"removeReducer",{enumerable:!0,get:function(){return i.removeReducer}}),Object.defineProperty(t,"subscribe",{enumerable:!0,get:function(){return i.subscribe}}),Object.defineProperty(t,"getState",{enumerable:!0,get:function(){return i.getState}});var u=r(5);Object.defineProperty(t,"css",{enumerable:!0,get:function(){return u.css}});var c=r(0);Object.defineProperty(t,"getStorage",{enumerable:!0,get:function(){return c.getStorage}}),Object.defineProperty(t,"addStorage",{enumerable:!0,get:function(){return c.addStorage}}),Object.defineProperty(t,"removeStorage",{enumerable:!0,get:function(){return c.removeStorage}}),Object.defineProperty(t,"setStorageDriver",{enumerable:!0,get:function(){return c.setStorageDriver}});var a=r(6);Object.defineProperty(t,"bind",{enumerable:!0,get:function(){return a.bind}});var s=r(3);Object.defineProperty(t,"matchTagArg",{enumerable:!0,get:function(){return s.matchTagArg}}),Object.defineProperty(t,"replaceTagArg",{enumerable:!0,get:function(){return s.replaceTagArg}});var f=r(7);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return n(f).default}}),Object.defineProperty(t,"connect",{enumerable:!0,get:function(){return f.connect}}),Object.defineProperty(t,"define",{enumerable:!0,get:function(){return f.define}}),Object.defineProperty(t,"props",{enumerable:!0,get:function(){return f.props}})},function(e,t,r){"use strict";function n(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];if(!r.length)return e[0];for(var o="",i=0;i<e.length;i++)o+=e[i],i<e.length-1&&(Array.isArray(r[i])?o+=r[i].join(""):o+=r[i]);return o}function o(e){for(var t="",r=arguments.length,n=Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];for(var i=0;i<e.length;i++)t+=e[i],i<e.length-1&&("function"==typeof n[i]?t+=n[i]():t+=n[i]);return t}Object.defineProperty(t,"__esModule",{value:!0}),t.html=n,t.css=o},function(e,t,r){"use strict";function n(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}function o(e,t){var r=(0,u.getStorage)(c);if(r.size===a){var n=r.keys();r.delete(n.next().value)}r.set(e,t)}function i(e){for(var t=(0,u.getStorage)(c),r=t.get(e),i=arguments.length,a=Array(i>1?i-1:0),s=1;s<i;s++)a[s-1]=arguments[s];var f=a[0],l=e.bind.apply(e,[null].concat(n(a)));if(r)return r.get(f)?r.get(f):(r.set(f,l),l);var p=new Map;return p.set(f,l),o(e,p),l}Object.defineProperty(t,"__esModule",{value:!0}),t.bind=i;var u=r(0),c="BOUNDS",a=100;(0,u.addStorage)(c,new Map)},function(e,t,r){"use strict";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function c(e){var t={},r=!0,n=!1,o=void 0;try{for(var i,u=e[Symbol.iterator]();!(r=(i=u.next()).done);r=!0){var c=i.value;t[(0,v.tagNameToProp)(c.name)]=c.value}}catch(e){n=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(n)throw o}}return t}function a(e){return function(t){return function(t){function r(){return o(this,r),i(this,(r.__proto__||Object.getPrototypeOf(r)).apply(this,arguments))}return u(r,t),d(r,[{key:"keys",get:function(){return[e]}}]),r}(t)}}function s(e){return function(t){return(0,y.default)(e,t),t}}function f(e){var t=S++;return P.set(t,e),{"props-id":t,toString:function(){return'props-id="'+t+'"'}}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var l="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},d=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}();t.connect=a,t.define=s,t.props=f;var b=r(1),y=function(e){return e&&e.__esModule?e:{default:e}}(b),m=r(2),g=r(8),h=r(0),v=r(3),_=r(5),O=function(e){var t=e.getPrototypeOf||function(e){return e.__proto__},r=e.setPrototypeOf||function(e,t){return e.__proto__=t,e},n="object"===("undefined"==typeof Reflect?"undefined":l(Reflect))?Reflect.construct:function(e,t,n){var o,i=[null];return i.push.apply(i,t),o=e.bind.apply(e,i),r(new o,n.prototype)};return function(e){var o=t(e);return r(e,r(function(){return n(o,arguments,t(this).constructor)},o))}}(Object),P=(0,h.getStorage)(h.storageKeys.PROPS),j=O(function(e){function t(){var e,r,n,u;o(this,t);for(var c=arguments.length,a=Array(c),s=0;s<c;s++)a[s]=arguments[s];return r=n=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(a))),n.__defaultProps={},n.subscriptions=[],n.state={},n.mounted=!1,n.css=_.css,u=r,i(n,u)}return u(t,e),d(t,[{key:"beforeRender",value:function(){}},{key:"render",value:function(){return""}},{key:"insertContent",value:function(e,t){if("string"!=typeof t)throw new Error("default renderer can handle only strings");e.innerHTML=t}},{key:"afterRender",value:function(){}},{key:"subscribeToStore",value:function(){var e=this,t=!0,r=!1,n=void 0;try{for(var o,i=this.keys[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var u=o.value;this.subscriptions.push((0,m.subscribe)(u,function(t){e.state=t,g.render.call(e)})),this.state=(0,m.getState)(u)}}catch(e){r=!0,n=e}finally{try{!t&&i.return&&i.return()}finally{if(r)throw n}}}},{key:"connectedCallback",value:function(){this.subscribeToStore(),g.render.call(this),this.connected()}},{key:"connected",value:function(){}},{key:"disconnectedCallback",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.subscriptions[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){n.value.unsubscribe()}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}this.disconnected()}},{key:"disconnected",value:function(){}},{key:"adoptedCallback",value:function(){this.subscribeToStore(),g.render.call(this),this.adopted()}},{key:"adopted",value:function(){}},{key:"attributeChangedCallback",value:function(e,t,r){this.mounted&&t!=r&&(this.propsChanged(p({},this.props,n({},e,r))),g.render.call(this))}},{key:"propsChanged",value:function(e){}},{key:"name",get:function(){return Object.getPrototypeOf(this).constructor.name}},{key:"isShadow",get:function(){return!0}},{key:"props",get:function(){var e=c(this.attributes),t=Number(e.propsId);return p({},this.__defaultProps,e,P.get(t)||{})},set:function(e){this.__defaultProps=e}},{key:"keys",get:function(){return[]}},{key:"styles",get:function(){return""}},{key:"html",get:function(){return _.html}}],[{key:"observedAttributes",get:function(){return this.observableProps.map(v.propNameToTag).concat("props-id")}},{key:"observableProps",get:function(){return[]}}]),t}(HTMLElement));t.default=j;var S=0},function(e,t,r){"use strict";function n(){this.beforeRender(),this.isShadow&&!this.shadowRoot&&this.attachShadow({mode:"open"}),this.root||(this.root=document.createElement("div"),this.root.style.display="contents",this.isShadow?(this.shadowRoot.innerHTML="<style>"+this.styles+"</style>",this.shadowRoot.appendChild(this.root)):(this.styles&&(this.innerHTML="<style>"+this.styles+"</style>"),this.appendChild(this.root)));var e=this.render();e&&this.insertContent(this.root,e),this.mounted=!0,this.afterRender()}Object.defineProperty(t,"__esModule",{value:!0}),t.render=n}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,