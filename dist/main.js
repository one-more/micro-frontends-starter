module.exports=function(e){function t(n){if(r[n])return r[n].exports;var o=r[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var r={};return t.m=e,t.c=r,t.d=function(e,r,n){t.o(e,r)||Object.defineProperty(e,r,{configurable:!1,enumerable:!0,get:n})},t.n=function(e){var r=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(r,"a",r),r},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=5)}([function(e,t,r){"use strict";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e){m.driver=m.driver.migrate(e)}function a(e){return m.driver.getItem(e)}function u(e,t){m.driver.setItem(e,t)}function i(e){m.driver.removeItem(e)}Object.defineProperty(t,"__esModule",{value:!0});var c;t.setStorageDriver=o,t.getStorage=a,t.addStorage=u,t.removeStorage=i;var s=new Map,f=new Map,l=t.storageKeys={PROPS:"props",EVENTS:"events"},d={items:Object.create((c={},n(c,l.PROPS,s),n(c,l.EVENTS,f),c)),setItem:function(e,t){this.items[e]=t},getItem:function(e){return this.items[e]},removeItem:function(e){delete this.items[e]},migrate:function(e){for(var t in this.items)e.setItem(t,this.items[t]);return e}},m=t.storage={driver:d}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={registerComponent:function(e,t){"customElements"in window?customElements.define(e,t):u().then(function(){a(e,t)})},isCustomComponent:function(e){return e.nodeName.includes("-")}},o=n,a=function(e,t){return o.registerComponent(e,t)},u=(t.setImplementation=function(e){o=e},function(){return Promise.resolve()});t.componentsReady=function(){return u()},t.setReadyCheck=function(e){u=e};t.default=a;t.isCustomComponent=function(e){return o.isCustomComponent(e)}},function(e,t,r){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var n={reducers:{},subscriptions:{},addReducer:function(e,t){this.reducers[e]=t},removeReducer:function(e){return delete this.reducers[e],!1},subscribe:function(e,t){var r=this;return this.subscriptions[e]||(this.subscriptions[e]=[]),this.subscriptions[e].push(t),{unsubscribe:function(){r.subscriptions[e]=r.subscriptions[e].filter(function(e){return e!==t})}}},getState:function(e){},migrate:function(e){for(var t in this.reducers){var r=this.reducers[t];e.addReducer(t,r)}for(var n in this.subscriptions){var o=!0,a=!1,u=void 0;try{for(var i,c=this.subscriptions[n][Symbol.iterator]();!(o=(i=c.next()).done);o=!0){var s=i.value;e.subscribe(n,s)}}catch(e){a=!0,u=e}finally{try{!o&&c.return&&c.return()}finally{if(a)throw u}}}return e}},o={currentImplementation:n};t.setImplementation=function(e){o.currentImplementation=o.currentImplementation.migrate(e)},t.registerReducer=function(e,t){o.currentImplementation.addReducer(e,t)},t.removeReducer=function(e){o.currentImplementation.removeReducer(e)},t.subscribe=function(e,t){return o.currentImplementation.subscribe(e,t)},t.getState=function(e){return o.currentImplementation.getState(e)}},function(e,t,r){"use strict";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){return"function"==typeof e||"object"===(void 0===e?"undefined":d(e))||(0,b.isCustomComponent)(t)}function a(e,t,r){var n=e.nodeValue.match(/__ARG__(\d+)/);if(n&&n[1]){var o=Number(n[1]),a=e.nodeName;return[(0,y.tagNameToProp)(a),r[o]]}return[e.nodeName,e.nodeValue]}function u(e,t){(e.attributes||[]).length&&P.forEach(function(r){r(e,t)});for(var r=0;r<e.childNodes.length;r++)u(e.childNodes[r],t)}function i(e,t){_[e]=t,P.unshift(t.call)}function c(e){return _[e]}function s(e){var t=_[e];P=P.filter(function(e){return e!==t.call})}function f(e,t){O[e]=t}Object.defineProperty(t,"__esModule",{value:!0});var l=function(){function e(e,t){var r=[],n=!0,o=!1,a=void 0;try{for(var u,i=e[Symbol.iterator]();!(n=(u=i.next()).done)&&(r.push(u.value),!t||r.length!==t);n=!0);}catch(e){o=!0,a=e}finally{try{!n&&i.return&&i.return()}finally{if(o)throw a}}return r}return function(t,r){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,r);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e};t.callHandlers=u,t.addTemplateHandler=i,t.accessHandler=c,t.unloadHandler=s,t.setCoreHandler=f;var p=r(0),y=r(4),b=r(1),v=(0,p.getStorage)(p.storageKeys.PROPS),h=(0,p.getStorage)(p.storageKeys.EVENTS),g={call:function(e,t){for(var r=e.attributes||[],o=0;o<r.length;o++){var a=r[o];if(a.nodeName.startsWith("on")){var u=a.nodeValue.match(/__ARG__(\d+)/);if(u&&u[1]){var i=Number(u[1]),c=t[i];if("function"==typeof c){e.removeAttribute(a.nodeName);var s=a.nodeName.toLowerCase().slice(2);e.addEventListener(s,c);var f=h.get(e)||{};h.set(e,m({},f,n({},s,c)))}}}}}},k={call:function(e,t){if(e instanceof HTMLTemplateElement&&e.hasAttribute("map")){var r=String(e.getAttribute("map")).match(/__ARG__(\d+)/);if(r&&r[1]){var n=Number(r[1]),o=t[n],a=e.innerHTML,u=document.createDocumentFragment();o.forEach(function(e){return a.replace(/__ARG__(\d+)/g,function(r,n){var o=t[n];if("function"==typeof o){var a=o(e);if(a instanceof HTMLTemplateElement)u.appendChild(a.content);else{var i=document.createElement("template");i.innerHTML=a,u.appendChild(i.content)}}return o})}),e.parentNode.replaceChild(u,e)}}}},S={call:function(e,t){for(var r=e.attributes||[],u=0;u<r.length;u++){var i=r[u],c=a(i,e,t),s=l(c,2),f=s[0],d=s[1];if(o(d,e)){var p=v.get(e)||{};e.removeAttribute(i.nodeName),v.set(e,m({},p,n({},f,d)))}}}},O={events:g,map:k,props:S},_={},P=[O.map.call,O.events.call,O.props.call]},function(e,t,r){"use strict";function n(){setTimeout(function(){var e=!0,t=!1,r=void 0;try{for(var n,o=i.keys()[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){var a=n.value;a.isConnected||i.delete(a)}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}})}function o(){setTimeout(function(){var e=!0,t=!1,r=void 0;try{for(var n,o=c.keys()[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){var a=n.value;a.isConnected||c.delete(a)}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}})}function a(e){return e.split("-").reduce(function(e,t){return t?e+t[0].toUpperCase()+t.slice(1):e})}Object.defineProperty(t,"__esModule",{value:!0}),t.clearPropsStorage=n,t.clearEventsStorage=o,t.tagNameToProp=a;var u=r(0),i=(0,u.getStorage)(u.storageKeys.PROPS),c=(0,u.getStorage)(u.storageKeys.EVENTS)},function(e,t,r){"use strict";function n(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=r(1);Object.defineProperty(t,"changeWebComponentsImplemenation",{enumerable:!0,get:function(){return o.setImplementation}}),Object.defineProperty(t,"componentsReady",{enumerable:!0,get:function(){return o.componentsReady}}),Object.defineProperty(t,"changeWebComponentsReadyCheck",{enumerable:!0,get:function(){return o.setReadyCheck}}),Object.defineProperty(t,"registerComponent",{enumerable:!0,get:function(){return n(o).default}});var a=r(2);Object.defineProperty(t,"changeStoreImplementation",{enumerable:!0,get:function(){return a.setImplementation}}),Object.defineProperty(t,"registerReducer",{enumerable:!0,get:function(){return a.registerReducer}}),Object.defineProperty(t,"removeReducer",{enumerable:!0,get:function(){return a.removeReducer}}),Object.defineProperty(t,"subscribe",{enumerable:!0,get:function(){return a.subscribe}}),Object.defineProperty(t,"getState",{enumerable:!0,get:function(){return a.getState}});var u=r(3);Object.defineProperty(t,"addTemplateHandler",{enumerable:!0,get:function(){return u.addTemplateHandler}}),Object.defineProperty(t,"setCoreHandler",{enumerable:!0,get:function(){return u.setCoreHandler}}),Object.defineProperty(t,"unloadHandler",{enumerable:!0,get:function(){return u.unloadHandler}}),Object.defineProperty(t,"accessHandler",{enumerable:!0,get:function(){return u.accessHandler}});var i=r(6);Object.defineProperty(t,"html",{enumerable:!0,get:function(){return i.html}}),Object.defineProperty(t,"css",{enumerable:!0,get:function(){return i.css}});var c=r(0);Object.defineProperty(t,"getStorage",{enumerable:!0,get:function(){return c.getStorage}}),Object.defineProperty(t,"addStorage",{enumerable:!0,get:function(){return c.addStorage}}),Object.defineProperty(t,"removeStorage",{enumerable:!0,get:function(){return c.removeStorage}}),Object.defineProperty(t,"setStorageDriver",{enumerable:!0,get:function(){return c.setStorageDriver}});var s=r(7);Object.defineProperty(t,"bind",{enumerable:!0,get:function(){return s.bind}});var f=r(8);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return n(f).default}})},function(e,t,r){"use strict";function n(e){for(var t=arguments.length,r=Array(t>1?t-1:0),n=1;n<t;n++)r[n-1]=arguments[n];if(!r.length)return e[0];for(var o="",i=0;i<e.length;i++)o+=e[i],i<e.length-1&&("function"==typeof r[i]||"object"===a(r[i])?o+="__ARG__"+i:o+=r[i]);var c=document.createElement("template");return c.innerHTML=o,(0,u.callHandlers)(c.content,r),c}function o(e){for(var t="",r=arguments.length,n=Array(r>1?r-1:0),o=1;o<r;o++)n[o-1]=arguments[o];for(var a=0;a<e.length;a++)t+=e[a],a<e.length-1&&("function"==typeof n[a]?t+=n[a]():t+=n[a]);return t}Object.defineProperty(t,"__esModule",{value:!0});var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.html=n,t.css=o;var u=r(3)},function(e,t,r){"use strict";function n(e){if(Array.isArray(e)){for(var t=0,r=Array(e.length);t<e.length;t++)r[t]=e[t];return r}return Array.from(e)}function o(e,t){var r=(0,u.getStorage)(i);if(r.size===c){var n=r.keys();r.delete(n.next().value)}r.set(e,t)}function a(e){for(var t=(0,u.getStorage)(i),r=t.get(e),a=arguments.length,c=Array(a>1?a-1:0),s=1;s<a;s++)c[s-1]=arguments[s];var f=c[0],l=e.bind.apply(e,[null].concat(n(c)));if(r)return r.get(f)?r.get(f):(r.set(f,l),l);var d=new Map;return d.set(f,l),o(e,d),l}Object.defineProperty(t,"__esModule",{value:!0}),t.bind=a;var u=r(0),i="BOUNDS",c=100;(0,u.addStorage)(i,new Map)},function(e,t,r){"use strict";function n(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function a(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function u(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function i(e){var t={},r=!0,n=!1,o=void 0;try{for(var a,u=e[Symbol.iterator]();!(r=(a=u.next()).done);r=!0){var i=a.value;t[i.name]=i.value}}catch(e){n=!0,o=e}finally{try{!r&&u.return&&u.return()}finally{if(n)throw o}}return t}Object.defineProperty(t,"__esModule",{value:!0});var c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},s=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var r=arguments[t];for(var n in r)Object.prototype.hasOwnProperty.call(r,n)&&(e[n]=r[n])}return e},f=function(){function e(e,t){for(var r=0;r<t.length;r++){var n=t[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(e,n.key,n)}}return function(t,r,n){return r&&e(t.prototype,r),n&&e(t,n),t}}(),l=r(2),d=r(9),m=r(0),p=r(4),y=function(e){var t=e.getPrototypeOf||function(e){return e.__proto__},r=e.setPrototypeOf||function(e,t){return e.__proto__=t,e},n="object"===("undefined"==typeof Reflect?"undefined":c(Reflect))?Reflect.construct:function(e,t,n){var o,a=[null];return a.push.apply(a,t),o=e.bind.apply(e,a),r(new o,n.prototype)};return function(e){var o=t(e);return r(e,r(function(){return n(o,arguments,t(this).constructor)},o))}}(Object),b=(0,m.getStorage)(m.storageKeys.PROPS),v=y(function(e){function t(){var e,r,n,u;o(this,t);for(var i=arguments.length,c=Array(i),s=0;s<i;s++)c[s]=arguments[s];return r=n=a(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(c))),n.__defaultProps={},n.subscriptions=[],n.state={},n.mounted=!1,u=r,a(n,u)}return u(t,e),f(t,[{key:"beforeRender",value:function(){}},{key:"render",value:function(){return""}},{key:"afterRender",value:function(){}},{key:"subscribeToStore",value:function(){var e=this,t=!0,r=!1,n=void 0;try{for(var o,a=this.keys[Symbol.iterator]();!(t=(o=a.next()).done);t=!0){var u=o.value;!function(t){e.subscriptions.push((0,l.subscribe)(t,function(r){e.state[t]=r,d.render.call(e)})),e.state[t]=(0,l.getState)(t)}(u)}}catch(e){r=!0,n=e}finally{try{!t&&a.return&&a.return()}finally{if(r)throw n}}}},{key:"connectedCallback",value:function(){this.subscribeToStore(),d.render.call(this),this.connected()}},{key:"connected",value:function(){}},{key:"disconnectedCallback",value:function(){var e=!0,t=!1,r=void 0;try{for(var n,o=this.subscriptions[Symbol.iterator]();!(e=(n=o.next()).done);e=!0){n.value.unsubscribe()}}catch(e){t=!0,r=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw r}}(0,p.clearPropsStorage)(),(0,p.clearEventsStorage)(),this.disconnected()}},{key:"disconnected",value:function(){}},{key:"adoptedCallback",value:function(){this.subscribeToStore(),d.render.call(this),this.adopted()}},{key:"adopted",value:function(){}},{key:"attributeChangedCallback",value:function(e,t,r){this.mounted&&t!=r&&(this.propsChanged(s({},this.props,n({},e,r))),d.render.call(this))}},{key:"propsChanged",value:function(e){}},{key:"name",get:function(){return Object.getPrototypeOf(this).constructor.name}},{key:"isShadow",get:function(){return!0}},{key:"props",get:function(){return s({},this.__defaultProps,i(this.attributes),b.get(this)||{})},set:function(e){this.__defaultProps=e}},{key:"keys",get:function(){return[]}},{key:"styles",get:function(){return""}}],[{key:"observedAttributes",get:function(){return this.observableProps.map(function(e){for(var t="",r=0;r<e.length;r++)e[r]===e[r].toUpperCase()?t+="-"+e[r].toLowerCase():t+=e[r];return t})}},{key:"observableProps",get:function(){return[]}}]),t}(HTMLElement));t.default=v},function(e,t,r){"use strict";function n(e,t){var r=e.cloneNode(!1),n=t.cloneNode(!1);return k.get(t)?(0,g.default)(k.get(e),k.get(t))&&r.isEqualNode(n):r.isEqualNode(n)}function o(e,t){return!1===e.isEqualNode(t)}function a(e,t){if(e.length>t.length)for(var r=0;r<e.length;r++){if(e[r]&&!t[r])return[e[r]].concat(a(Array.from(e).slice(r+1),Array.from(t).slice(r)));if(!n(e[r],t[r])){var o=a(Array.from(e).slice(r+1),Array.from(t).slice(r));if(0===o.length)return[e[r]]}}return[]}function u(e,t){if(e.length>t.length)return t.length;for(var r=0,o=0;o<e.length;o++){var a=e[o].cloneNode(!1),u=t[o].cloneNode(!1);n(e[o],t[o])||f(a)||f(u)||r++}return r}function i(e,t,r){for(var n=document.createDocumentFragment(),o=t.length;o<r.length;o++)n.appendChild(r[o]);e.appendChild(n)}function c(e,t){var r=t.attributes||[],n=e.attributes||[];if(n.length>r.length)for(var o=0;o<n.length;o++){var a=n[o];t.hasAttribute(a.nodeName)||e.removeAttribute(a.nodeName)}for(var u=0;u<r.length;u++){var i=r[u];e.setAttribute(i.nodeName,i.nodeValue)}if(k.get(t)){var c=k.get(e),s=k.get(t);k.set(e,s),(0,g.default)(c,s)||(0,b.isCustomComponent)(e)&&y.call(e)}}function s(e,t){if((0,b.isCustomComponent)(e))return c(e,t);n(e,t)||c(e,t),m(e,t)}function f(e){return e.nodeType===Node.TEXT_NODE&&(!e.childNodes.length&&(e.innerText?!1===Boolean(e.innerText.trim()):e.innerHTML?!1===Boolean(e.innerHTML.trim()):!e.textContent||!1===Boolean(e.textContent.trim())))}function l(e){return!!e&&((e.nodeType===Node.ELEMENT_NODE||e.nodeType===Node.TEXT_NODE)&&"STYLE"!==e.nodeName&&!f(e))}function d(e,t,r,n){var o=a(r,n);return 0===n.length?e.parentNode.replaceChild(t,e):1===o.length?(o[0].parentNode.removeChild(o[0]),m(e,t)):u(r,n)>0?e.parentNode.replaceChild(t,e):i(e,r,n)}function m(e,t){var r=Array.from(e.childNodes).filter(l),n=Array.from(t.childNodes).filter(l);if(r.length!==n.length)return d(e,t,r,n);if(0===r.length&&0===n.length&&o(e,t))return e.parentNode.replaceChild(t,e);for(var a=0;a<r.length;a++)s(r[a],n[a])}function p(e){var t=document.createElement("template");return t.innerHTML=e,t}function y(){performance.mark("muskot start rendering"),this.beforeRender(),this.isShadow&&!this.shadowRoot&&(performance.mark("muskot attaching root"),this.attachShadow({mode:"open"}),performance.mark("muskot root attached"),performance.measure("muskot attach root","muskot attaching root","muskot root attached")),performance.mark("muskot create render DOM");var e=this.render();performance.mark("muskot render DOM created"),performance.measure("muskot component render result","muskot create render DOM","muskot render DOM created");var t=this.isShadow?this.shadowRoot:this;performance.mark("muskot create fragment");var r="string"==typeof e?p(e):e;if(performance.mark("muskot fragment created"),performance.measure("muskot fragment creation","muskot create fragment","muskot fragment created"),this.mounted){performance.mark("muskot insert styles before content on update");var n=document.createElement("style");n.innerHTML=this.styles,r.content.insertBefore(n,r.content.firstChild),performance.mark("muskot styles inserted on update"),performance.measure("muskot add styles by insertBefore","muskot insert styles before content on update","muskot styles inserted on update"),performance.mark("muskot update children"),m(t,r.content),performance.mark("muskot children updated"),performance.measure("muskot update component's children","muskot update children","muskot children updated")}else performance.mark("muskot insert style into component"),t.innerHTML="<style>"+this.styles+"</style>",performance.mark("muskot style inserted"),performance.measure("muskot style creation & insert by innerHTML","muskot insert style into component","muskot style inserted"),performance.mark("muskot append child with content"),t.appendChild(r.content),performance.mark("muskot content appended"),performance.measure("muskot append content on initial render","muskot append child with content","muskot content appended"),this.mounted=!0;performance.mark("muskot finish rendering"),performance.measure("muskot full render","muskot start rendering","muskot finish rendering"),this.afterRender()}Object.defineProperty(t,"__esModule",{value:!0}),t.render=y;var b=r(1),v=r(0),h=r(10),g=function(e){return e&&e.__esModule?e:{default:e}}(h),k=(0,v.getStorage)(v.storageKeys.PROPS)},function(e,t,r){"use strict";function n(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!==e&&t!==t}function o(e,t){if(n(e,t))return!0;if("object"!==(void 0===e?"undefined":a(e))||null===e||"object"!==(void 0===t?"undefined":a(t))||null===t)return!1;var r=Object.keys(e),o=Object.keys(t);if(r.length!==o.length)return!1;for(var i=0;i<r.length;i++)if(!u.call(t,r[i])||!n(e[r[i]],t[r[i]]))return!1;return!0}Object.defineProperty(t,"__esModule",{value:!0});var a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},u=Object.prototype.hasOwnProperty;t.default=o}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,