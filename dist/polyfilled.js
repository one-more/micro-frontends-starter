module.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=11)}([function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e){p.driver=p.driver.migrate(e)}function i(e){return p.driver.getItem(e)}function a(e,t){p.driver.setItem(e,t)}function c(e){p.driver.removeItem(e)}Object.defineProperty(t,"__esModule",{value:!0});var u;t.setStorageDriver=o,t.getStorage=i,t.addStorage=a,t.removeStorage=c;var l=new Map,s=new Map,f=t.storageKeys={PROPS:"props",EVENTS:"events"},d={items:Object.create((u={},r(u,f.PROPS,l),r(u,f.EVENTS,s),u)),setItem:function(e,t){this.items[e]=t},getItem:function(e){return this.items[e]},removeItem:function(e){delete this.items[e]},migrate:function(e){for(var t in this.items)e.setItem(t,this.items[t]);return e}},p=t.storage={driver:d}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={registerComponent:function(e,t){"customElements"in window?customElements.define(e,t):a().then(function(){i(e,t)})},isCustomComponent:function(e){return e.nodeName.includes("-")}},o=r,i=function(e,t){return o.registerComponent(e,t)},a=(t.setImplementation=function(e){o=e},function(){return Promise.resolve()});t.componentsReady=function(){return a()},t.setReadyCheck=function(e){a=e};t.default=i;t.isCustomComponent=function(e){return o.isCustomComponent(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={reducers:{},subscriptions:{},addReducer:function(e,t){this.reducers[e]=t},removeReducer:function(e){return delete this.reducers[e],!1},subscribe:function(e,t){var n=this;return this.subscriptions[e]||(this.subscriptions[e]=[]),this.subscriptions[e].push(t),{unsubscribe:function(){n.subscriptions[e]=n.subscriptions[e].filter(function(e){return e!==t})}}},getState:function(e){},migrate:function(e){for(var t in this.reducers){var n=this.reducers[t];e.addReducer(t,n)}for(var r in this.subscriptions){var o=!0,i=!1,a=void 0;try{for(var c,u=this.subscriptions[r][Symbol.iterator]();!(o=(c=u.next()).done);o=!0){var l=c.value;e.subscribe(r,l)}}catch(e){i=!0,a=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw a}}}return e}},o={currentImplementation:r};t.setImplementation=function(e){o.currentImplementation=o.currentImplementation.migrate(e)},t.registerReducer=function(e,t){o.currentImplementation.addReducer(e,t)},t.removeReducer=function(e){o.currentImplementation.removeReducer(e)},t.subscribe=function(e,t){return o.currentImplementation.subscribe(e,t)},t.getState=function(e){return o.currentImplementation.getState(e)}},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return"function"==typeof e||"object"===(void 0===e?"undefined":d(e))||(0,y.isCustomComponent)(t)}function i(e,t,n){var r=(0,h.matchTagArg)(e.nodeValue);if(r&&r[1]){var o=Number(r[1]),i=e.nodeName;return[(0,h.tagNameToProp)(i),n[o]]}return[e.nodeName,e.nodeValue]}function a(e,t){(e.attributes||[]).length&&k.forEach(function(n){n(e,t)});for(var n=0;n<e.childNodes.length;n++)a(e.childNodes[n],t)}function c(e,t){E[e]=t,k.unshift(t.call)}function u(e){return E[e]}function l(e){var t=E[e];k=k.filter(function(e){return e!==t.call})}function s(e,t){C[e]=t}Object.defineProperty(t,"__esModule",{value:!0});var f=function(){function e(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&c.return&&c.return()}finally{if(o)throw i}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.callHandlers=a,t.addTemplateHandler=c,t.accessHandler=u,t.unloadHandler=l,t.setCoreHandler=s;var m=n(0),h=n(4),y=n(1),b=(0,m.getStorage)(m.storageKeys.PROPS),g=(0,m.getStorage)(m.storageKeys.EVENTS),v={call:function(e,t){for(var n=e.attributes||[],o=0;o<n.length;o++){var i=n[o];if(i.nodeName.startsWith("on")){var a=(0,h.matchTagArg)(i.nodeValue);if(a&&a[1]){var c=Number(a[1]),u=t[c];if("function"==typeof u){e.removeAttribute(i.nodeName);var l=i.nodeName.toLowerCase().slice(2);e.addEventListener(l,u);var s=g.get(e)||{};g.set(e,p({},s,r({},l,u)))}}}}}},w={call:function(e,t){if(e instanceof HTMLTemplateElement&&e.hasAttribute("map")){var n=(0,h.matchTagArg)(String(e.getAttribute("map")));if(n&&n[1]){var r=Number(n[1]),o=t[r],i=e.innerHTML,a=document.createElement("template"),c=o.map(function(e){return(0,h.replaceTagArg)(i,function(n,r){var o=t[r];if("function"==typeof o){var i=o(e);return i instanceof HTMLTemplateElement?i.innerHTML:Array.isArray(i)?i.join(""):i}return o})});a.innerHTML=c.join(""),e.parentNode.replaceChild(a.content,e)}}}},_={call:function(e,t){for(var n=e.attributes||[],a=0;a<n.length;a++){var c=n[a],u=i(c,e,t),l=f(u,2),s=l[0],d=l[1];if(o(d,e)){var m=b.get(e)||{};e.removeAttribute(c.nodeName),b.set(e,p({},m,r({},s,d)))}}}},C={events:v,map:w,props:_},E={},k=[C.map.call,C.events.call,C.props.call]},function(e,t,n){"use strict";function r(){setTimeout(function(){var e=!0,t=!1,n=void 0;try{for(var r,o=f.keys()[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){var i=r.value;i.isConnected||f.delete(i)}}catch(e){t=!0,n=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw n}}})}function o(){setTimeout(function(){var e=!0,t=!1,n=void 0;try{for(var r,o=d.keys()[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){var i=r.value;i.isConnected||d.delete(i)}}catch(e){t=!0,n=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw n}}})}function i(e){return e.split("-").reduce(function(e,t){return t?e+t[0].toUpperCase()+t.slice(1):e})}function a(e){return"\x3c!--__ARG__"+e+"--\x3e"}function c(e){return e.match(/__ARG__(\d+)/)}function u(e,t){return e.replace(/<!--__ARG__(\d+)-->/,t)}function l(e){return'="'===e.trim().slice(-2)}Object.defineProperty(t,"__esModule",{value:!0}),t.clearPropsStorage=r,t.clearEventsStorage=o,t.tagNameToProp=i,t.createTagArg=a,t.matchTagArg=c,t.replaceTagArg=u,t.attributeStarts=l;var s=n(0),f=(0,s.getStorage)(s.storageKeys.PROPS),d=(0,s.getStorage)(s.storageKeys.EVENTS)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(1);Object.defineProperty(t,"changeWebComponentsImplemenation",{enumerable:!0,get:function(){return o.setImplementation}}),Object.defineProperty(t,"componentsReady",{enumerable:!0,get:function(){return o.componentsReady}}),Object.defineProperty(t,"changeWebComponentsReadyCheck",{enumerable:!0,get:function(){return o.setReadyCheck}}),Object.defineProperty(t,"registerComponent",{enumerable:!0,get:function(){return r(o).default}});var i=n(2);Object.defineProperty(t,"changeStoreImplementation",{enumerable:!0,get:function(){return i.setImplementation}}),Object.defineProperty(t,"registerReducer",{enumerable:!0,get:function(){return i.registerReducer}}),Object.defineProperty(t,"removeReducer",{enumerable:!0,get:function(){return i.removeReducer}}),Object.defineProperty(t,"subscribe",{enumerable:!0,get:function(){return i.subscribe}}),Object.defineProperty(t,"getState",{enumerable:!0,get:function(){return i.getState}});var a=n(3);Object.defineProperty(t,"addTemplateHandler",{enumerable:!0,get:function(){return a.addTemplateHandler}}),Object.defineProperty(t,"setCoreHandler",{enumerable:!0,get:function(){return a.setCoreHandler}}),Object.defineProperty(t,"unloadHandler",{enumerable:!0,get:function(){return a.unloadHandler}}),Object.defineProperty(t,"accessHandler",{enumerable:!0,get:function(){return a.accessHandler}});var c=n(6);Object.defineProperty(t,"html",{enumerable:!0,get:function(){return c.html}}),Object.defineProperty(t,"css",{enumerable:!0,get:function(){return c.css}});var u=n(0);Object.defineProperty(t,"getStorage",{enumerable:!0,get:function(){return u.getStorage}}),Object.defineProperty(t,"addStorage",{enumerable:!0,get:function(){return u.addStorage}}),Object.defineProperty(t,"removeStorage",{enumerable:!0,get:function(){return u.removeStorage}}),Object.defineProperty(t,"setStorageDriver",{enumerable:!0,get:function(){return u.setStorageDriver}});var l=n(7);Object.defineProperty(t,"bind",{enumerable:!0,get:function(){return l.bind}});var s=n(4);Object.defineProperty(t,"matchTagArg",{enumerable:!0,get:function(){return s.matchTagArg}}),Object.defineProperty(t,"replaceTagArg",{enumerable:!0,get:function(){return s.replaceTagArg}});var f=n(8);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return r(f).default}})},function(e,t,n){"use strict";function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if(!n.length)return e[0];for(var o="",u=0;u<e.length;u++)o+=e[u],u<e.length-1&&(Array.isArray(n[u])&&!1===(0,c.attributeStarts)(o)?o+=n[u].join(""):"function"==typeof n[u]||"object"===i(n[u])?o+=(0,c.createTagArg)(u):o+=n[u]);var l=document.createElement("template");return l.innerHTML=o,(0,a.callHandlers)(l.content,n),l}function o(e){for(var t="",n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];for(var i=0;i<e.length;i++)t+=e[i],i<e.length-1&&("function"==typeof r[i]?t+=r[i]():t+=r[i]);return t}Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.html=r,t.css=o;var a=n(3),c=n(4)},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t){var n=(0,a.getStorage)(c);if(n.size===u){var r=n.keys();n.delete(r.next().value)}n.set(e,t)}function i(e){for(var t=(0,a.getStorage)(c),n=t.get(e),i=arguments.length,u=Array(i>1?i-1:0),l=1;l<i;l++)u[l-1]=arguments[l];var s=u[0],f=e.bind.apply(e,[null].concat(r(u)));if(n)return n.get(s)?n.get(s):(n.set(s,f),f);var d=new Map;return d.set(s,f),o(e,d),f}Object.defineProperty(t,"__esModule",{value:!0}),t.bind=i;var a=n(0),c="BOUNDS",u=100;(0,a.addStorage)(c,new Map)},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function c(e){var t={},n=!0,r=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var c=i.value;t[c.name]=c.value}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}return t}Object.defineProperty(t,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(2),d=n(9),p=n(0),m=n(4),h=function(e){var t=e.getPrototypeOf||function(e){return e.__proto__},n=e.setPrototypeOf||function(e,t){return e.__proto__=t,e},r="object"===("undefined"==typeof Reflect?"undefined":u(Reflect))?Reflect.construct:function(e,t,r){var o,i=[null];return i.push.apply(i,t),o=e.bind.apply(e,i),n(new o,r.prototype)};return function(e){var o=t(e);return n(e,n(function(){return r(o,arguments,t(this).constructor)},o))}}(Object),y=(0,p.getStorage)(p.storageKeys.PROPS),b=h(function(e){function t(){var e,n,r,a;o(this,t);for(var c=arguments.length,u=Array(c),l=0;l<c;l++)u[l]=arguments[l];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),r.__defaultProps={},r.subscriptions=[],r.state={},r.mounted=!1,a=n,i(r,a)}return a(t,e),s(t,[{key:"beforeRender",value:function(){}},{key:"render",value:function(){return""}},{key:"afterRender",value:function(){}},{key:"subscribeToStore",value:function(){var e=this,t=!0,n=!1,r=void 0;try{for(var o,i=this.keys[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;!function(t){e.subscriptions.push((0,f.subscribe)(t,function(n){e.state[t]=n,d.render.call(e)})),e.state[t]=(0,f.getState)(t)}(a)}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}}},{key:"connectedCallback",value:function(){this.subscribeToStore(),d.render.call(this),this.connected()}},{key:"connected",value:function(){}},{key:"disconnectedCallback",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,o=this.subscriptions[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){r.value.unsubscribe()}}catch(e){t=!0,n=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw n}}(0,m.clearPropsStorage)(),(0,m.clearEventsStorage)(),this.disconnected()}},{key:"disconnected",value:function(){}},{key:"adoptedCallback",value:function(){this.subscribeToStore(),d.render.call(this),this.adopted()}},{key:"adopted",value:function(){}},{key:"attributeChangedCallback",value:function(e,t,n){this.mounted&&t!=n&&(this.propsChanged(l({},this.props,r({},e,n))),d.render.call(this))}},{key:"propsChanged",value:function(e){}},{key:"name",get:function(){return Object.getPrototypeOf(this).constructor.name}},{key:"isShadow",get:function(){return!0}},{key:"props",get:function(){return l({},this.__defaultProps,c(this.attributes),y.get(this)||{})},set:function(e){this.__defaultProps=e}},{key:"keys",get:function(){return[]}},{key:"styles",get:function(){return""}}],[{key:"observedAttributes",get:function(){return this.observableProps.map(function(e){for(var t="",n=0;n<e.length;n++)e[n]===e[n].toUpperCase()?t+="-"+e[n].toLowerCase():t+=e[n];return t})}},{key:"observableProps",get:function(){return[]}}]),t}(HTMLElement));t.default=b},function(e,t,n){"use strict";function r(e,t){var n=e.cloneNode(!1),r=t.cloneNode(!1);return w.get(t)?(0,v.default)(w.get(e),w.get(t))&&n.isEqualNode(r):n.isEqualNode(r)}function o(e,t){return!1===e.isEqualNode(t)}function i(e,t){if(e.length>t.length)for(var n=0;n<e.length;n++){if(e[n]&&!t[n])return[e[n]].concat(i(Array.from(e).slice(n+1),Array.from(t).slice(n)));if(!r(e[n],t[n])){var o=i(Array.from(e).slice(n+1),Array.from(t).slice(n));if(0===o.length)return[e[n]]}}return[]}function a(e,t){if(e.length>t.length)return t.length;for(var n=0,o=0;o<e.length;o++){var i=e[o].cloneNode(!1),a=t[o].cloneNode(!1);r(e[o],t[o])||s(i)||s(a)||n++}return n}function c(e,t,n){for(var r=document.createDocumentFragment(),o=t.length;o<n.length;o++)r.appendChild(n[o]);e.appendChild(r)}function u(e,t){var n=t.attributes||[],r=e.attributes||[];if(r.length>n.length)for(var o=0;o<r.length;o++){var i=r[o];t.hasAttribute(i.nodeName)||e.removeAttribute(i.nodeName)}for(var a=0;a<n.length;a++){var c=n[a];e.setAttribute(c.nodeName,c.nodeValue)}if(w.get(t)){var u=w.get(e),l=w.get(t);w.set(e,l),(0,v.default)(u,l)||(0,y.isCustomComponent)(e)&&h.call(e)}}function l(e,t){if((0,y.isCustomComponent)(e))return u(e,t);r(e,t)||u(e,t),p(e,t)}function s(e){return e.nodeType===Node.TEXT_NODE&&(!e.childNodes.length&&(e.innerText?!1===Boolean(e.innerText.trim()):e.innerHTML?!1===Boolean(e.innerHTML.trim()):!e.textContent||!1===Boolean(e.textContent.trim())))}function f(e){return!!e&&((e.nodeType===Node.ELEMENT_NODE||e.nodeType===Node.TEXT_NODE)&&"STYLE"!==e.nodeName&&!s(e))}function d(e,t,n,r){var o=i(n,r);return 0===r.length?e.parentNode.replaceChild(t,e):1===o.length?(o[0].parentNode.removeChild(o[0]),p(e,t)):a(n,r)>0?e.parentNode.replaceChild(t,e):c(e,n,r)}function p(e,t){var n=Array.from(e.childNodes).filter(f),r=Array.from(t.childNodes).filter(f);if(n.length!==r.length)return d(e,t,n,r);if(0===n.length&&0===r.length&&o(e,t))return e.parentNode.replaceChild(t,e);for(var i=0;i<n.length;i++)l(n[i],r[i])}function m(e){var t=document.createElement("template");return t.innerHTML=e,t}function h(){performance.mark("muskot start rendering"),this.beforeRender(),this.isShadow&&!this.shadowRoot&&(performance.mark("muskot attaching root"),this.attachShadow({mode:"open"}),performance.mark("muskot root attached"),performance.measure("muskot attach root","muskot attaching root","muskot root attached")),performance.mark("muskot create render DOM");var e=this.render();performance.mark("muskot render DOM created"),performance.measure("muskot component render result","muskot create render DOM","muskot render DOM created");var t=this.isShadow?this.shadowRoot:this;performance.mark("muskot create fragment");var n="string"==typeof e?m(e):e;if(performance.mark("muskot fragment created"),performance.measure("muskot fragment creation","muskot create fragment","muskot fragment created"),this.mounted){performance.mark("muskot insert styles before content on update");var r=document.createElement("style");r.innerHTML=this.styles,n.content.insertBefore(r,n.content.firstChild),performance.mark("muskot styles inserted on update"),performance.measure("muskot add styles by insertBefore","muskot insert styles before content on update","muskot styles inserted on update"),performance.mark("muskot update children"),p(t,n.content),performance.mark("muskot children updated"),performance.measure("muskot update component's children","muskot update children","muskot children updated")}else performance.mark("muskot insert style into component"),t.innerHTML="<style>"+this.styles+"</style>",performance.mark("muskot style inserted"),performance.measure("muskot style creation & insert by innerHTML","muskot insert style into component","muskot style inserted"),performance.mark("muskot append child with content"),t.appendChild(n.content),performance.mark("muskot content appended"),performance.measure("muskot append content on initial render","muskot append child with content","muskot content appended"),this.mounted=!0;performance.mark("muskot finish rendering"),performance.measure("muskot full render","muskot start rendering","muskot finish rendering"),this.afterRender()}Object.defineProperty(t,"__esModule",{value:!0}),t.render=h;var y=n(1),b=n(0),g=n(10),v=function(e){return e&&e.__esModule?e:{default:e}}(g),w=(0,b.getStorage)(b.storageKeys.PROPS)},function(e,t,n){"use strict";function r(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!==e&&t!==t}function o(e,t){if(r(e,t))return!0;if("object"!==(void 0===e?"undefined":i(e))||null===e||"object"!==(void 0===t?"undefined":i(t))||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(var c=0;c<n.length;c++)if(!a.call(t,n[c])||!r(e[n[c]],t[n[c]]))return!1;return!0}Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.prototype.hasOwnProperty;t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})}),(0,r.changeWebComponentsReadyCheck)(function(){return"customElements"in window?Promise.resolve():new Promise<null>function(e){n(12).then(function(){window.addEventListener("WebComponentsReady",e)})}})},function(e,t){(function(){"use strict";function e(e){var t=E.has(e);return e=/^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(e),!t&&e}function t(e){var t=e.isConnected;if(void 0!==t)return t;for(;e&&!(e.__CE_isImportDocument||e instanceof Document);)e=e.parentNode||(window.ShadowRoot&&e instanceof ShadowRoot?e.host:void 0);return!(!e||!(e.__CE_isImportDocument||e instanceof Document))}function n(e,t){for(;t&&t!==e&&!t.nextSibling;)t=t.parentNode;return t&&t!==e?t.nextSibling:null}function r(e,t,o){o=o||new Set;for(var i=e;i;){if(i.nodeType===Node.ELEMENT_NODE){var a=i;t(a);var c=a.localName;if("link"===c&&"import"===a.getAttribute("rel")){if((i=a.import)instanceof Node&&!o.has(i))for(o.add(i),i=i.firstChild;i;i=i.nextSibling)r(i,t,o);i=n(e,a);continue}if("template"===c){i=n(e,a);continue}if(a=a.__CE_shadowRoot)for(a=a.firstChild;a;a=a.nextSibling)r(a,t,o)}i=i.firstChild?i.firstChild:n(e,i)}}function o(e,t,n){e[t]=n}function i(){this.a=new Map,this.s=new Map,this.f=[],this.b=!1}function a(e,t,n){e.a.set(t,n),e.s.set(n.constructor,n)}function c(e,t){e.b=!0,e.f.push(t)}function u(e,t){e.b&&r(t,function(t){return l(e,t)})}function l(e,t){if(e.b&&!t.__CE_patched){t.__CE_patched=!0;for(var n=0;n<e.f.length;n++)e.f[n](t)}}function s(e,t){var n=[];for(r(t,function(e){return n.push(e)}),t=0;t<n.length;t++){var o=n[t];1===o.__CE_state?e.connectedCallback(o):p(e,o)}}function f(e,t){var n=[];for(r(t,function(e){return n.push(e)}),t=0;t<n.length;t++){var o=n[t];1===o.__CE_state&&e.disconnectedCallback(o)}}function d(e,t,n){n=n||{};var o=n.w||new Set,i=n.i||function(t){return p(e,t)},a=[];if(r(t,function(t){if("link"===t.localName&&"import"===t.getAttribute("rel")){var n=t.import;n instanceof Node&&(n.__CE_isImportDocument=!0,n.__CE_hasRegistry=!0),n&&"complete"===n.readyState?n.__CE_documentLoadHandled=!0:t.addEventListener("load",function(){var n=t.import;if(!n.__CE_documentLoadHandled){n.__CE_documentLoadHandled=!0;var r=new Set(o);r.delete(n),d(e,n,{w:r,i:i})}})}else a.push(t)},o),e.b)for(t=0;t<a.length;t++)l(e,a[t]);for(t=0;t<a.length;t++)i(a[t])}function p(e,n){if(void 0===n.__CE_state){var r=n.ownerDocument;if((r.defaultView||r.__CE_isImportDocument&&r.__CE_hasRegistry)&&(r=e.a.get(n.localName))){r.constructionStack.push(n);var o=r.constructor;try{try{if(new o!==n)throw Error("The custom element constructor did not produce the element being upgraded.")}finally{r.constructionStack.pop()}}catch(e){throw n.__CE_state=2,e}if(n.__CE_state=1,n.__CE_definition=r,r.attributeChangedCallback)for(r=r.observedAttributes,o=0;o<r.length;o++){var i=r[o],a=n.getAttribute(i);null!==a&&e.attributeChangedCallback(n,i,null,a,null)}t(n)&&e.connectedCallback(n)}}}function m(e,t){this.c=e,this.a=t,this.b=void 0,d(this.c,this.a),"loading"===this.a.readyState&&(this.b=new MutationObserver(this.f.bind(this)),this.b.observe(this.a,{childList:!0,subtree:!0}))}function h(e){e.b&&e.b.disconnect()}function y(){var e=this;this.b=this.a=void 0,this.f=new Promise(function(t){e.b=t,e.a&&t(e.a)})}function b(e){if(e.a)throw Error("Already resolved.");e.a=void 0,e.b&&e.b(void 0)}function g(e){this.j=!1,this.c=e,this.o=new Map,this.l=function(e){return e()},this.g=!1,this.m=[],this.u=new m(e,document)}function v(e){if(!1!==e.g){e.g=!1;for(var t=e.m,n=[],r=new Map,o=0;o<t.length;o++)r.set(t[o].localName,[]);for(d(e.c,document,{i:function(t){if(void 0===t.__CE_state){var o=t.localName,i=r.get(o);i?i.push(t):e.c.a.get(o)&&n.push(t)}}}),o=0;o<n.length;o++)p(e.c,n[o]);for(;0<t.length;){for(var i=t.shift(),o=i.localName,i=r.get(i.localName),a=0;a<i.length;a++)p(e.c,i[a]);(o=e.o.get(o))&&b(o)}}}function w(e,n,r){function o(n){return function(r){for(var o=[],i=0;i<arguments.length;++i)o[i-0]=arguments[i];for(var i=[],a=[],c=0;c<o.length;c++){var u=o[c];if(u instanceof Element&&t(u)&&a.push(u),u instanceof DocumentFragment)for(u=u.firstChild;u;u=u.nextSibling)i.push(u);else i.push(u)}for(n.apply(this,o),o=0;o<a.length;o++)f(e,a[o]);if(t(this))for(o=0;o<i.length;o++)(a=i[o])instanceof Element&&s(e,a)}}r.h&&(n.prepend=o(r.h)),r.append&&(n.append=o(r.append))}function _(e){function n(n){return function(r){for(var o=[],i=0;i<arguments.length;++i)o[i-0]=arguments[i];for(var i=[],a=[],c=0;c<o.length;c++){var u=o[c];if(u instanceof Element&&t(u)&&a.push(u),u instanceof DocumentFragment)for(u=u.firstChild;u;u=u.nextSibling)i.push(u);else i.push(u)}for(n.apply(this,o),o=0;o<a.length;o++)f(e,a[o]);if(t(this))for(o=0;o<i.length;o++)(a=i[o])instanceof Element&&s(e,a)}}var r=Element.prototype;Y&&(r.before=n(Y)),Y&&(r.after=n($)),J&&o(r,"replaceWith",function(n){for(var r=[],o=0;o<arguments.length;++o)r[o-0]=arguments[o];for(var o=[],i=[],a=0;a<r.length;a++){var c=r[a];if(c instanceof Element&&t(c)&&i.push(c),c instanceof DocumentFragment)for(c=c.firstChild;c;c=c.nextSibling)o.push(c);else o.push(c)}for(a=t(this),J.apply(this,r),r=0;r<i.length;r++)f(e,i[r]);if(a)for(f(e,this),r=0;r<o.length;r++)(i=o[r])instanceof Element&&s(e,i)}),Q&&o(r,"remove",function(){var n=t(this);Q.call(this),n&&f(e,this)})}var C=new function(){},E=new Set("annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" "));i.prototype.connectedCallback=function(e){var t=e.__CE_definition;t.connectedCallback&&t.connectedCallback.call(e)},i.prototype.disconnectedCallback=function(e){var t=e.__CE_definition;t.disconnectedCallback&&t.disconnectedCallback.call(e)},i.prototype.attributeChangedCallback=function(e,t,n,r,o){var i=e.__CE_definition;i.attributeChangedCallback&&-1<i.observedAttributes.indexOf(t)&&i.attributeChangedCallback.call(e,t,n,r,o)},m.prototype.f=function(e){var t=this.a.readyState;for("interactive"!==t&&"complete"!==t||h(this),t=0;t<e.length;t++)for(var n=e[t].addedNodes,r=0;r<n.length;r++)d(this.c,n[r])},g.prototype.define=function(t,n){var r=this;if(!(n instanceof Function))throw new TypeError("Custom element constructors must be functions.");if(!e(t))throw new SyntaxError("The element name '"+t+"' is not valid.");if(this.c.a.get(t))throw Error("A custom element with name '"+t+"' has already been defined.");if(this.j)throw Error("A custom element is already being defined.");this.j=!0;var o,i,c,u,l;try{var s=function(e){var t=f[e];if(void 0!==t&&!(t instanceof Function))throw Error("The '"+e+"' callback must be a function.");return t},f=n.prototype;if(!(f instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");o=s("connectedCallback"),i=s("disconnectedCallback"),c=s("adoptedCallback"),u=s("attributeChangedCallback"),l=n.observedAttributes||[]}catch(e){return}finally{this.j=!1}n={localName:t,constructor:n,connectedCallback:o,disconnectedCallback:i,adoptedCallback:c,attributeChangedCallback:u,observedAttributes:l,constructionStack:[]},a(this.c,t,n),this.m.push(n),this.g||(this.g=!0,this.l(function(){return v(r)}))},g.prototype.i=function(e){d(this.c,e)},g.prototype.get=function(e){if(e=this.c.a.get(e))return e.constructor},g.prototype.whenDefined=function(t){if(!e(t))return Promise.reject(new SyntaxError("'"+t+"' is not a valid custom element name."));var n=this.o.get(t);return n?n.f:(n=new y,this.o.set(t,n),this.c.a.get(t)&&!this.m.some(function(e){return e.localName===t})&&b(n),n.f)},g.prototype.v=function(e){h(this.u);var t=this.l;this.l=function(n){return e(function(){return t(n)})}},window.CustomElementRegistry=g,g.prototype.define=g.prototype.define,g.prototype.upgrade=g.prototype.i,g.prototype.get=g.prototype.get,g.prototype.whenDefined=g.prototype.whenDefined,g.prototype.polyfillWrapFlushCallback=g.prototype.v;var k=window.Document.prototype.createElement,S=window.Document.prototype.createElementNS,N=window.Document.prototype.importNode,O=window.Document.prototype.prepend,j=window.Document.prototype.append,T=window.DocumentFragment.prototype.prepend,P=window.DocumentFragment.prototype.append,A=window.Node.prototype.cloneNode,M=window.Node.prototype.appendChild,R=window.Node.prototype.insertBefore,H=window.Node.prototype.removeChild,D=window.Node.prototype.replaceChild,L=Object.getOwnPropertyDescriptor(window.Node.prototype,"textContent"),x=window.Element.prototype.attachShadow,I=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),F=window.Element.prototype.getAttribute,V=window.Element.prototype.setAttribute,B=window.Element.prototype.removeAttribute,W=window.Element.prototype.getAttributeNS,K=window.Element.prototype.setAttributeNS,z=window.Element.prototype.removeAttributeNS,U=window.Element.prototype.insertAdjacentElement,q=window.Element.prototype.insertAdjacentHTML,G=window.Element.prototype.prepend,X=window.Element.prototype.append,Y=window.Element.prototype.before,$=window.Element.prototype.after,J=window.Element.prototype.replaceWith,Q=window.Element.prototype.remove,Z=window.HTMLElement,ee=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),te=window.HTMLElement.prototype.insertAdjacentElement,ne=window.HTMLElement.prototype.insertAdjacentHTML,re=window.customElements;if(!re||re.forcePolyfill||"function"!=typeof re.define||"function"!=typeof re.get){var oe=new i;!function(){var e=oe;window.HTMLElement=function(){function t(){var t=this.constructor,n=e.s.get(t);if(!n)throw Error("The custom element being constructed was not registered with `customElements`.");var r=n.constructionStack;if(!r.length)return r=k.call(document,n.localName),Object.setPrototypeOf(r,t.prototype),r.__CE_state=1,r.__CE_definition=n,l(e,r),r;var n=r.length-1,o=r[n];if(o===C)throw Error("The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.");return r[n]=C,Object.setPrototypeOf(o,t.prototype),l(e,o),o}return t.prototype=Z.prototype,Object.defineProperty(t.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:t}),t}()}(),function(){var e=oe;o(Document.prototype,"createElement",function(t){if(this.__CE_hasRegistry){var n=e.a.get(t);if(n)return new n.constructor}return t=k.call(this,t),l(e,t),t}),o(Document.prototype,"importNode",function(t,n){return t=N.call(this,t,n),this.__CE_hasRegistry?d(e,t):u(e,t),t}),o(Document.prototype,"createElementNS",function(t,n){if(this.__CE_hasRegistry&&(null===t||"http://www.w3.org/1999/xhtml"===t)){var r=e.a.get(n);if(r)return new r.constructor}return t=S.call(this,t,n),l(e,t),t}),w(e,Document.prototype,{h:O,append:j})}(),w(oe,DocumentFragment.prototype,{h:T,append:P}),function(){function e(e,r){Object.defineProperty(e,"textContent",{enumerable:r.enumerable,configurable:!0,get:r.get,set:function(e){if(this.nodeType===Node.TEXT_NODE)r.set.call(this,e);else{var o=void 0;if(this.firstChild){var i=this.childNodes,a=i.length;if(0<a&&t(this))for(var o=Array(a),c=0;c<a;c++)o[c]=i[c]}if(r.set.call(this,e),o)for(e=0;e<o.length;e++)f(n,o[e])}}})}var n=oe;o(Node.prototype,"insertBefore",function(e,r){if(e instanceof DocumentFragment){var o=Array.prototype.slice.apply(e.childNodes);if(e=R.call(this,e,r),t(this))for(r=0;r<o.length;r++)s(n,o[r]);return e}return o=t(e),r=R.call(this,e,r),o&&f(n,e),t(this)&&s(n,e),r}),o(Node.prototype,"appendChild",function(e){if(e instanceof DocumentFragment){var r=Array.prototype.slice.apply(e.childNodes);if(e=M.call(this,e),t(this))for(var o=0;o<r.length;o++)s(n,r[o]);return e}return r=t(e),o=M.call(this,e),r&&f(n,e),t(this)&&s(n,e),o}),o(Node.prototype,"cloneNode",function(e){return e=A.call(this,e),this.ownerDocument.__CE_hasRegistry?d(n,e):u(n,e),e}),o(Node.prototype,"removeChild",function(e){var r=t(e),o=H.call(this,e);return r&&f(n,e),o}),o(Node.prototype,"replaceChild",function(e,r){if(e instanceof DocumentFragment){var o=Array.prototype.slice.apply(e.childNodes);if(e=D.call(this,e,r),t(this))for(f(n,r),r=0;r<o.length;r++)s(n,o[r]);return e}var o=t(e),i=D.call(this,e,r),a=t(this);return a&&f(n,r),o&&f(n,e),a&&s(n,e),i}),L&&L.get?e(Node.prototype,L):c(n,function(t){e(t,{enumerable:!0,configurable:!0,get:function(){for(var e=[],t=0;t<this.childNodes.length;t++)e.push(this.childNodes[t].textContent);return e.join("")},set:function(e){for(;this.firstChild;)H.call(this,this.firstChild);M.call(this,document.createTextNode(e))}})})}(),function(){function e(e,n){Object.defineProperty(e,"innerHTML",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(e){var o=this,i=void 0;if(t(this)&&(i=[],r(this,function(e){e!==o&&i.push(e)})),n.set.call(this,e),i)for(var c=0;c<i.length;c++){var l=i[c];1===l.__CE_state&&a.disconnectedCallback(l)}return this.ownerDocument.__CE_hasRegistry?d(a,this):u(a,this),e}})}function n(e,n){o(e,"insertAdjacentElement",function(e,r){var o=t(r);return e=n.call(this,e,r),o&&f(a,r),t(e)&&s(a,r),e})}function i(e,t){function n(e,t){for(var n=[];e!==t;e=e.nextSibling)n.push(e);for(t=0;t<n.length;t++)d(a,n[t])}o(e,"insertAdjacentHTML",function(e,r){if("beforebegin"===(e=e.toLowerCase())){var o=this.previousSibling;t.call(this,e,r),n(o||this.parentNode.firstChild,this)}else if("afterbegin"===e)o=this.firstChild,t.call(this,e,r),n(this.firstChild,o);else if("beforeend"===e)o=this.lastChild,t.call(this,e,r),n(o||this.firstChild,null);else{if("afterend"!==e)throw new SyntaxError("The value provided ("+String(e)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");o=this.nextSibling,t.call(this,e,r),n(this.nextSibling,o)}})}var a=oe;x&&o(Element.prototype,"attachShadow",function(e){return this.__CE_shadowRoot=e=x.call(this,e)}),I&&I.get?e(Element.prototype,I):ee&&ee.get?e(HTMLElement.prototype,ee):c(a,function(t){e(t,{enumerable:!0,configurable:!0,get:function(){return A.call(this,!0).innerHTML},set:function(e){var t="template"===this.localName,n=t?this.content:this,r=S.call(document,this.namespaceURI,this.localName);for(r.innerHTML=e;0<n.childNodes.length;)H.call(n,n.childNodes[0]);for(e=t?r.content:r;0<e.childNodes.length;)M.call(n,e.childNodes[0])}})}),o(Element.prototype,"setAttribute",function(e,t){if(1!==this.__CE_state)return V.call(this,e,t);var n=F.call(this,e);V.call(this,e,t),t=F.call(this,e),a.attributeChangedCallback(this,e,n,t,null)}),o(Element.prototype,"setAttributeNS",function(e,t,n){if(1!==this.__CE_state)return K.call(this,e,t,n);var r=W.call(this,e,t);K.call(this,e,t,n),n=W.call(this,e,t),a.attributeChangedCallback(this,t,r,n,e)}),o(Element.prototype,"removeAttribute",function(e){if(1!==this.__CE_state)return B.call(this,e);var t=F.call(this,e);B.call(this,e),null!==t&&a.attributeChangedCallback(this,e,t,null,null)}),o(Element.prototype,"removeAttributeNS",function(e,t){if(1!==this.__CE_state)return z.call(this,e,t);var n=W.call(this,e,t);z.call(this,e,t);var r=W.call(this,e,t);n!==r&&a.attributeChangedCallback(this,t,n,r,e)}),te?n(HTMLElement.prototype,te):U?n(Element.prototype,U):console.warn("Custom Elements: `Element#insertAdjacentElement` was not patched."),ne?i(HTMLElement.prototype,ne):q?i(Element.prototype,q):console.warn("Custom Elements: `Element#insertAdjacentHTML` was not patched."),w(a,Element.prototype,{h:G,append:X}),_(a)}(),document.__CE_hasRegistry=!0;var ie=new g(oe);Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:ie})}}).call(self)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcG9seWZpbGxlZC5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYThkYTQ1ZDNlMDk3MDk5M2RkYzMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlYi1jb21wb25lbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9iaW5kLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhbGxvdy1lcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvd2l0aC1wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL2N1c3RvbS1lbGVtZW50cy5taW4uanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwid3JpdGFibGUiLCJzZXRTdG9yYWdlRHJpdmVyIiwiZHJpdmVyIiwic3RvcmFnZSIsIm1pZ3JhdGUiLCJnZXRTdG9yYWdlIiwiZ2V0SXRlbSIsImFkZFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlU3RvcmFnZSIsInJlbW92ZUl0ZW0iLCJfT2JqZWN0JGNyZWF0ZSIsInByb3BzTWFwIiwiTWFwIiwiZXZlbnRzTWFwIiwic3RvcmFnZUtleXMiLCJQUk9QUyIsIkVWRU5UUyIsIml0ZW1zIiwiY3JlYXRlIiwidGhpcyIsImRlZmF1bHRJbXBsZW1lbnRhdGlvbiIsInJlZ2lzdGVyQ29tcG9uZW50IiwiY29tcG9uZW50Iiwid2luZG93IiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJjdXJyZW50UmVhZHlDaGVjayIsInRoZW4iLCJpc0N1c3RvbUNvbXBvbmVudCIsIm5vZGUiLCJub2RlTmFtZSIsImluY2x1ZGVzIiwiY3VycmVudEltcGxlbWVudGF0aW9uIiwic2V0SW1wbGVtZW50YXRpb24iLCJpbXBsZW1lbnRhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiY29tcG9uZW50c1JlYWR5Iiwic2V0UmVhZHlDaGVjayIsInJlYWR5Q2hlY2siLCJkZWZhdWx0Iiwic3R1YkltcGxlbWVudGF0aW9uIiwicmVkdWNlcnMiLCJzdWJzY3JpcHRpb25zIiwiYWRkUmVkdWNlciIsInJlZHVjZXIiLCJyZW1vdmVSZWR1Y2VyIiwic3Vic2NyaWJlIiwiY2IiLCJfdGhpcyIsInB1c2giLCJ1bnN1YnNjcmliZSIsImZpbHRlciIsImVsIiwiZ2V0U3RhdGUiLCJuZXdTdG9yZSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwidW5kZWZpbmVkIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwic3Vic2NyaXB0aW9uIiwiZXJyIiwicmV0dXJuIiwic3RvcmUiLCJyZWdpc3RlclJlZHVjZXIiLCJzaG91bGRTZXRQcm9wVG9TdG9yYWdlIiwiX3R5cGVvZiIsIl93ZWJDb21wb25lbnRzIiwicGFyc2VBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJhcmdzIiwibWF0Y2giLCJfdXRpbHMiLCJtYXRjaFRhZ0FyZyIsIm5vZGVWYWx1ZSIsImluZGV4IiwiTnVtYmVyIiwidGFnTmFtZVRvUHJvcCIsImNhbGxIYW5kbGVycyIsImVsZW1lbnQiLCJhdHRyaWJ1dGVzIiwibGVuZ3RoIiwiaGFuZGxlcnMiLCJmb3JFYWNoIiwiaGFuZGxlciIsImNoaWxkTm9kZXMiLCJhZGRUZW1wbGF0ZUhhbmRsZXIiLCJjdXN0b21IYW5kbGVycyIsInVuc2hpZnQiLCJhY2Nlc3NIYW5kbGVyIiwidW5sb2FkSGFuZGxlciIsInNldENvcmVIYW5kbGVyIiwiY29yZUhhbmRsZXJzIiwiX3NsaWNlZFRvQXJyYXkiLCJzbGljZUl0ZXJhdG9yIiwiYXJyIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsIl9zIiwiX2kiLCJBcnJheSIsImlzQXJyYXkiLCJUeXBlRXJyb3IiLCJjb25zdHJ1Y3RvciIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiYXJndW1lbnRzIiwic291cmNlIiwiX3N0b3JhZ2UiLCJwcm9wc1N0b3JhZ2UiLCJldmVudHNTdG9yYWdlIiwiRXZlbnRzVGFnSGFuZGxlciIsInN0YXJ0c1dpdGgiLCJsaXN0ZW5lciIsInJlbW92ZUF0dHJpYnV0ZSIsImV2ZW50TmFtZSIsInRvTG93ZXJDYXNlIiwic2xpY2UiLCJhZGRFdmVudExpc3RlbmVyIiwibGlzdGVuZXJzIiwic2V0IiwiTWFwSGFuZGxlciIsIkhUTUxUZW1wbGF0ZUVsZW1lbnQiLCJoYXNBdHRyaWJ1dGUiLCJTdHJpbmciLCJnZXRBdHRyaWJ1dGUiLCJ0cGwiLCJpbm5lckhUTUwiLCJmcmFnbWVudCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsIm5vZGVzIiwibWFwIiwicmVwbGFjZVRhZ0FyZyIsImFyZyIsInRwbENhbGwiLCJqb2luIiwicGFyZW50Tm9kZSIsInJlcGxhY2VDaGlsZCIsImNvbnRlbnQiLCJQcm9wc0hhbmRsZXIiLCJfcGFyc2VBdHRyaWJ1dGUiLCJfcGFyc2VBdHRyaWJ1dGUyIiwicHJvcE5hbWUiLCJwcm9wcyIsImV2ZW50cyIsImNsZWFyUHJvcHNTdG9yYWdlIiwic2V0VGltZW91dCIsImtleXMiLCJpc0Nvbm5lY3RlZCIsImRlbGV0ZSIsImNsZWFyRXZlbnRzU3RvcmFnZSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yIiwiX2RpZEl0ZXJhdG9yRXJyb3IyIiwiX2l0ZXJhdG9yRXJyb3IyIiwiX3N0ZXAyIiwiX2l0ZXJhdG9yMiIsInNwbGl0IiwicmVkdWNlIiwiYWNjIiwidG9VcHBlckNhc2UiLCJjcmVhdGVUYWdBcmciLCJzdHIiLCJmbiIsInJlcGxhY2UiLCJhdHRyaWJ1dGVTdGFydHMiLCJ0cmltIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9zdG9yZSIsIl9oYW5kbGVycyIsIl90YWciLCJodG1sIiwiY3NzIiwiX2JpbmQiLCJiaW5kIiwiX0NvbXBvbmVudCIsInN0cmluZ3MiLCJfbGVuIiwiX2tleSIsInRlbXBsYXRlIiwicmVzdWx0IiwiX2xlbjIiLCJfa2V5MiIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJmcm9tIiwiYXBwZW5kVG9TdG9yYWdlIiwiS0VZIiwic2l6ZSIsIk1BWF9TVE9SQUdFX1NJWkUiLCJib3VuZCIsImZpcnN0QXJnIiwiYm91bmRGbiIsImFwcGx5IiwiY29uY2F0IiwiZm5NYXAiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfaW5oZXJpdHMiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJzZXRQcm90b3R5cGVPZiIsIl9fcHJvdG9fXyIsInBhcnNlQXR0cmlidXRlcyIsIl9jcmVhdGVDbGFzcyIsImRlZmluZVByb3BlcnRpZXMiLCJkZXNjcmlwdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiX3JlbmRlciIsIl9maXhCYWJlbEV4dGVuZCIsIk8iLCJnUE8iLCJnZXRQcm90b3R5cGVPZiIsInNQTyIsImNvbnN0cnVjdCIsIlJlZmxlY3QiLCJQYXJlbnQiLCJDbGFzcyIsImEiLCJDb21wb25lbnQiLCJfSFRNTEVsZW1lbnQiLCJfcmVmIiwiX3RlbXAiLCJfcmV0IiwiX19kZWZhdWx0UHJvcHMiLCJzdGF0ZSIsIm1vdW50ZWQiLCJfdGhpczIiLCJyZW5kZXIiLCJzdWJzY3JpYmVUb1N0b3JlIiwiY29ubmVjdGVkIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMiLCJfZGlkSXRlcmF0b3JFcnJvcjMiLCJfaXRlcmF0b3JFcnJvcjMiLCJfc3RlcDMiLCJfaXRlcmF0b3IzIiwiZGlzY29ubmVjdGVkIiwiYWRvcHRlZCIsImF0dHJpYnV0ZU5hbWUiLCJvbGRWYWx1ZSIsIm5ld1ZhbHVlIiwicHJvcHNDaGFuZ2VkIiwibmV3UHJvcHMiLCJvYnNlcnZhYmxlUHJvcHMiLCJwcm9wIiwicmVzIiwiSFRNTEVsZW1lbnQiLCJub2RlRXF1YWxzIiwiZWxlbWVudE5vZGUiLCJmcmFnbWVudE5vZGUiLCJlbENsb25lIiwiY2xvbmVOb2RlIiwiZnJDbG9uZSIsIl9zaGFsbG93RXF1YWwyIiwiaXNFcXVhbE5vZGUiLCJjb250ZW50RGlmZmVyIiwiZWxlbWVudHNEZWxldGVkIiwiZWxlbWVudE5vZGVzIiwiZnJhZ21lbnROb2RlcyIsImRlbGV0ZWQiLCJjaGlsZHJlbkNoYW5nZWRDb3VudCIsImNoYW5nZWQiLCJpc0VtcHR5Tm9kZSIsImFwcGVuZENoaWxkcmVuIiwiZWxlbWVudENoaWxkcmVuIiwiZnJhZ21lbnRDaGlsZHJlbiIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJhcHBlbmRDaGlsZCIsInVwZGF0ZUF0dHJpYnV0ZXMiLCJlbGVtZW50QXR0cmlidXRlcyIsInNldEF0dHJpYnV0ZSIsImVsUHJvcHMiLCJmclByb3BzIiwidXBkYXRlRWxlbWVudCIsInVwZGF0ZUNoaWxkcmVuIiwibm9kZVR5cGUiLCJOb2RlIiwiVEVYVF9OT0RFIiwiaW5uZXJUZXh0IiwiQm9vbGVhbiIsInRleHRDb250ZW50Iiwibm9kZUZpbHRlciIsIkVMRU1FTlRfTk9ERSIsImhhbmRsZUNoaWxkcmVuQ291bnRDaGFuZ2VkIiwicmVtb3ZlQ2hpbGQiLCJjcmVhdGVGcmFnbWVudEZyb21TdHIiLCJwZXJmb3JtYW5jZSIsIm1hcmsiLCJiZWZvcmVSZW5kZXIiLCJpc1NoYWRvdyIsInNoYWRvd1Jvb3QiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwibWVhc3VyZSIsInJlbmRlclJlcyIsInJvb3QiLCJzdHlsZSIsInN0eWxlcyIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJhZnRlclJlbmRlciIsIl9zaGFsbG93RXF1YWwiLCJpcyIsIngiLCJ5Iiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiX2luZGV4IiwiY2hhbmdlV2ViQ29tcG9uZW50c1JlYWR5Q2hlY2siLCJyZXF1aXJlIiwiYiIsImFhIiwiaGFzIiwidGVzdCIsIl9fQ0VfaXNJbXBvcnREb2N1bWVudCIsIkRvY3VtZW50IiwiU2hhZG93Um9vdCIsImhvc3QiLCJuZXh0U2libGluZyIsInQiLCJTZXQiLCJlIiwiZiIsImxvY2FsTmFtZSIsImltcG9ydCIsImFkZCIsIl9fQ0Vfc2hhZG93Um9vdCIsInUiLCJ2IiwiYmEiLCJ3IiwiX19DRV9wYXRjaGVkIiwieiIsIl9fQ0Vfc3RhdGUiLCJjb25uZWN0ZWRDYWxsYmFjayIsIkEiLCJCIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJDIiwiX19DRV9oYXNSZWdpc3RyeSIsInJlYWR5U3RhdGUiLCJfX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJjb25zdHJ1Y3Rpb25TdGFjayIsIkVycm9yIiwicG9wIiwiciIsIl9fQ0VfZGVmaW5pdGlvbiIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIm9ic2VydmVkQXR0cmlidXRlcyIsIkQiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJFIiwiZGlzY29ubmVjdCIsImNhIiwiRiIsIkciLCJqIiwiZyIsImRhIiwic2hpZnQiLCJZIiwicSIsIkVsZW1lbnQiLCJEb2N1bWVudEZyYWdtZW50IiwiaCIsInByZXBlbmQiLCJhcHBlbmQiLCJ5YSIsImsiLCJWIiwiYmVmb3JlIiwiYWZ0ZXIiLCJwYSIsInFhIiwicmEiLCJpbmRleE9mIiwiYWRkZWROb2RlcyIsIkZ1bmN0aW9uIiwiU3ludGF4RXJyb3IiLCJhZG9wdGVkQ2FsbGJhY2siLCJ3aGVuRGVmaW5lZCIsInJlamVjdCIsInNvbWUiLCJDdXN0b21FbGVtZW50UmVnaXN0cnkiLCJ1cGdyYWRlIiwicG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayIsIkgiLCJJIiwiY3JlYXRlRWxlbWVudE5TIiwiZWEiLCJpbXBvcnROb2RlIiwiZmEiLCJnYSIsImhhIiwiaWEiLCJKIiwiSyIsIkwiLCJNIiwiTiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsImdldEF0dHJpYnV0ZU5TIiwiamEiLCJzZXRBdHRyaWJ1dGVOUyIsImthIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJsYSIsImluc2VydEFkamFjZW50RWxlbWVudCIsIm1hIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwibmEiLCJvYSIsInJlcGxhY2VXaXRoIiwicmVtb3ZlIiwic2EiLCJXIiwidGEiLCJ1YSIsIloiLCJmb3JjZVBvbHlmaWxsIiwiWCIsImNyZWF0ZVRleHROb2RlIiwicHJldmlvdXNTaWJsaW5nIiwibGFzdENoaWxkIiwibmFtZXNwYWNlVVJJIiwiY29uc29sZSIsIndhcm4iXSwibWFwcGluZ3MiOiJBQUFBQSxPQUFPQyxRQUNFLFNBQVVDLEdDR25CLFFBQUFDLEdBQUFDLEdBR0EsR0FBQUMsRUFBQUQsR0FDQSxNQUFBQyxHQUFBRCxHQUFBSCxPQUdBLElBQUFELEdBQUFLLEVBQUFELElBQ0FFLEVBQUFGLEVBQ0FHLEdBQUEsRUFDQU4sV0FVQSxPQU5BQyxHQUFBRSxHQUFBSSxLQUFBUixFQUFBQyxRQUFBRCxJQUFBQyxRQUFBRSxHQUdBSCxFQUFBTyxHQUFBLEVBR0FQLEVBQUFDLFFBdkJBLEdBQUFJLEtBNERBLE9BaENBRixHQUFBTSxFQUFBUCxFQUdBQyxFQUFBTyxFQUFBTCxFQUdBRixFQUFBUSxFQUFBLFNBQUFWLEVBQUFXLEVBQUFDLEdBQ0FWLEVBQUFXLEVBQUFiLEVBQUFXLElBQ0FHLE9BQUFDLGVBQUFmLEVBQUFXLEdBQ0FLLGNBQUEsRUFDQUMsWUFBQSxFQUNBQyxJQUFBTixLQU1BVixFQUFBaUIsRUFBQSxTQUFBcEIsR0FDQSxHQUFBYSxHQUFBYixLQUFBcUIsV0FDQSxXQUEyQixNQUFBckIsR0FBQSxTQUMzQixXQUFpQyxNQUFBQSxHQUVqQyxPQURBRyxHQUFBUSxFQUFBRSxFQUFBLElBQUFBLEdBQ0FBLEdBSUFWLEVBQUFXLEVBQUEsU0FBQVEsRUFBQUMsR0FBc0QsTUFBQVIsUUFBQVMsVUFBQUMsZUFBQWpCLEtBQUFjLEVBQUFDLElBR3REcEIsRUFBQXVCLEVBQUEsR0FHQXZCLElBQUF3QixFQUFBLE1ET00sU0FBVTNCLEVBQVFDLEVBQVNFLEdBRWpDLFlBY0EsU0FBU3lCLEdBQWdCQyxFQUFLQyxFQUFLQyxHQUFpSyxNQUFwSkQsS0FBT0QsR0FBT2QsT0FBT0MsZUFBZWEsRUFBS0MsR0FBT0MsTUFBT0EsRUFBT2IsWUFBWSxFQUFNRCxjQUFjLEVBQU1lLFVBQVUsSUFBa0JILEVBQUlDLEdBQU9DLEVBQWdCRixFRTFDcE0sUUFBU0ksR0FBaUJDLEdBQzdCQyxFQUFRRCxPQUFTQyxFQUFRRCxPQUFPRSxRQUFRRixHQUdyQyxRQUFTRyxHQUFXUCxHQUN2QixNQUFPSyxHQUFRRCxPQUFPSSxRQUFRUixHQUczQixRQUFTUyxHQUFXVCxFQUFhQyxHQUNwQ0ksRUFBUUQsT0FBT00sUUFBUVYsRUFBS0MsR0FHekIsUUFBU1UsR0FBY1gsR0FDMUJLLEVBQVFELE9BQU9RLFdBQVdaLEdGa0I5QmYsT0FBT0MsZUFBZWYsRUFBUyxjQUMzQjhCLE9BQU8sR0FHWCxJQUFJWSxFQUVKMUMsR0VyQ2dCZ0MsbUJGc0NoQmhDLEVFbENnQm9DLGFGbUNoQnBDLEVFL0JnQnNDLGFGZ0NoQnRDLEVFNUJnQndDLGVBbERoQixJQUFNRyxHQUEwQixHQUFJQyxLQUU5QkMsRUFBMkIsR0FBSUQsS0FFeEJFLGlCQUNUQyxNQUFPLFFBQ1BDLE9BQVEsVUFHTmYsR0FDRmdCLE1BQU9uQyxPQUFPb0MsUUFBUFIsS0FBQWYsRUFBQWUsRUFDRkksRUFBWUMsTUFBUUosR0FEbEJoQixFQUFBZSxFQUVGSSxFQUFZRSxPQUFTSCxHQUZuQkgsSUFJUEgsUUFMMEIsU0FLbEJWLEVBQWFDLEdBQ2pCcUIsS0FBS0YsTUFBTXBCLEdBQU9DLEdBRXRCTyxRQVIwQixTQVFsQlIsR0FDSixNQUFPc0IsTUFBS0YsTUFBTXBCLElBRXRCWSxXQVgwQixTQVdmWixTQUNBc0IsTUFBS0YsTUFBTXBCLElBRXRCTSxRQWQwQixTQWNsQkYsR0FDSixJQUFLLEdBQU1KLEtBQU9zQixNQUFLRixNQUNuQmhCLEVBQU9NLFFBQ0hWLEVBQ0FzQixLQUFLRixNQUFNcEIsR0FHbkIsT0FBT0ksS0FJRkMsYUFDVEQsV0ZpR0UsU0FBVWxDLEVBQVFDLEVBQVNFLEdBRWpDLFlBR0FZLFFBQU9DLGVBQWVmLEVBQVMsY0FDM0I4QixPQUFPLEdHMUlYLElBQU1zQixJQUNGQyxrQkFEMEMsU0FDeEIxQyxFQUFjMkMsR0FDeEIsa0JBQW9CQyxRQUNwQkMsZUFBZUMsT0FBTzlDLEVBQU0yQyxHQUU1QkksSUFBb0JDLEtBQUssV0FDckJOLEVBQWtCMUMsRUFBTTJDLE1BSXBDTSxrQkFWMEMsU0FVeEJDLEdBQ2QsTUFBT0EsR0FBS0MsU0FBU0MsU0FBUyxPQUlsQ0MsRUFBd0JaLEVBRXRCQyxFQUFvQixTQUFDMUMsRUFBYzJDLEdBQ3JDLE1BQU9VLEdBQXNCWCxrQkFBa0IxQyxFQUFNMkMsSUFPckRJLEdBSlNPLG9CQUFvQixTQUFDQyxHQUM5QkYsRUFBd0JFLEdBR0osaUJBQU1DLFNBQVFDLFdBRXpCQyxtQkFBa0IsV0FDM0IsTUFBT1gsTUFHRVksZ0JBQWdCLFNBQUNDLEdBQzFCYixFQUFvQmEsRUhtSnhCdkUsR0FBUXdFLFFHaEpPbkIsQ0FFRk8scUJBQW9CLFNBQUNDLEdBQzlCLE1BQU9HLEdBQXNCSixrQkFBa0JDLEtIb0o3QyxTQUFVOUQsRUFBUUMsRUFBU0UsR0FFakMsWUFHQVksUUFBT0MsZUFBZWYsRUFBUyxjQUMzQjhCLE9BQU8sR0loTVgsSUFBTTJDLElBQ0ZDLFlBQ0FDLGlCQUNBQyxXQUg4QixTQUduQi9DLEVBQWFnRCxHQUNwQjFCLEtBQUt1QixTQUFTN0MsR0FBT2dELEdBRXpCQyxjQU44QixTQU1oQmpELEdBRVYsYUFET3NCLE1BQUt1QixTQUFTN0MsSUFDZCxHQUVYa0QsVUFWOEIsU0FVcEJsRCxFQUFhbUQsR0FBYyxHQUFBQyxHQUFBOUIsSUFLakMsT0FKS0EsTUFBS3dCLGNBQWM5QyxLQUNwQnNCLEtBQUt3QixjQUFjOUMsT0FFdkJzQixLQUFLd0IsY0FBYzlDLEdBQUtxRCxLQUFLRixJQUV6QkcsWUFBYSxXQUNURixFQUFLTixjQUFjOUMsR0FBT29ELEVBQUtOLGNBQWM5QyxHQUFLdUQsT0FBTyxTQUFBQyxHQUFBLE1BQU1BLEtBQU9MLE9BSWxGTSxTQXJCOEIsU0FxQnJCekQsS0FDVE0sUUF0QjhCLFNBc0J0Qm9ELEdBQ0osSUFBSyxHQUFNMUQsS0FBT3NCLE1BQUt1QixTQUFVLENBQzdCLEdBQU1HLEdBQVUxQixLQUFLdUIsU0FBUzdDLEVBQzlCMEQsR0FBU1gsV0FBVy9DLEVBQUtnRCxHQUU3QixJQUFLLEdBQU1oRCxLQUFPc0IsTUFBS3dCLGNBQWUsSUFBQWEsSUFBQSxFQUFBQyxHQUFBLEVBQUFDLE1BQUFDLEVBQUEsS0FDbEMsT0FBQUMsR0FBQUMsRUFBMkIxQyxLQUFLd0IsY0FBYzlDLEdBQTlDaUUsT0FBQUMsY0FBQVAsR0FBQUksRUFBQUMsRUFBQUcsUUFBQUMsTUFBQVQsR0FBQSxFQUFvRCxJQUF6Q1UsR0FBeUNOLEVBQUE5RCxLQUNoRHlELEdBQVNSLFVBQVVsRCxFQUFLcUUsSUFGTSxNQUFBQyxHQUFBVixHQUFBLEVBQUFDLEVBQUFTLEVBQUEsYUFBQVgsR0FBQUssRUFBQU8sUUFBQVAsRUFBQU8sU0FBQSxXQUFBWCxFQUFBLEtBQUFDLEtBS3RDLE1BQU9ILEtBSVRjLEdBQ0ZyQyxzQkFBdUJTLEVBR2RSLHFCQUFvQixTQUFDQyxHQUM5Qm1DLEVBQU1yQyxzQkFBd0JxQyxFQUFNckMsc0JBQXNCN0IsUUFBUStCLElBR3pEb0Msa0JBQWtCLFNBQUN6RSxFQUFhZ0QsR0FDekN3QixFQUFNckMsc0JBQXNCWSxXQUFXL0MsRUFBS2dELElBRW5DQyxnQkFBZ0IsU0FBQ2pELEdBQzFCd0UsRUFBTXJDLHNCQUFzQmMsY0FBY2pELElBRWpDa0QsWUFBWSxTQUFDbEQsRUFBYW1ELEdBQ25DLE1BQU9xQixHQUFNckMsc0JBQXNCZSxVQUFVbEQsRUFBS21ELElBRXpDTSxXQUFXLFNBQUN6RCxHQUNyQixNQUFPd0UsR0FBTXJDLHNCQUFzQnNCLFNBQVN6RCxLSmtPMUMsU0FBVTlCLEVBQVFDLEVBQVNFLEdBRWpDLFlBeUJBLFNBQVN5QixHQUFnQkMsRUFBS0MsRUFBS0MsR0FBaUssTUFBcEpELEtBQU9ELEdBQU9kLE9BQU9DLGVBQWVhLEVBQUtDLEdBQU9DLE1BQU9BLEVBQU9iLFlBQVksRUFBTUQsY0FBYyxFQUFNZSxVQUFVLElBQWtCSCxFQUFJQyxHQUFPQyxFQUFnQkYsRUtsTzNNLFFBQVMyRSxHQUF1QnpFLEVBQVkrQixHQUN4QyxNQUF3QixrQkFBVi9CLElBQXlDLGdCQUFqQixLQUFPQSxFQUFQLFlBQUEwRSxFQUFPMUUsTUFBc0IsRUFBQTJFLEVBQUE3QyxtQkFBa0JDLEdBR3pGLFFBQVM2QyxHQUFlQyxFQUFpQjlDLEVBQVkrQyxHQUNqRCxHQUFNQyxJQUFRLEVBQUFDLEVBQUFDLGFBQVlKLEVBQVVLLFVBQ3BDLElBQUlILEdBQVNBLEVBQU0sR0FBSSxDQUNuQixHQUFNSSxHQUFRQyxPQUFPTCxFQUFNLElBQ3JCL0MsRUFBVzZDLEVBQVU3QyxRQUczQixTQUZpQixFQUFBZ0QsRUFBQUssZUFBY3JELEdBQ2pCOEMsRUFBS0ssSUFHdkIsT0FBUU4sRUFBVTdDLFNBQVU2QyxFQUFVSyxXQTRDbkMsUUFBU0ksR0FBYUMsRUFBa0NULElBQ3JEUyxFQUFjQyxnQkFBa0JDLFFBQ2xDQyxFQUFTQyxRQUFRLFNBQUFDLEdBQ2JBLEVBQVFMLEVBQVNULElBR3pCLEtBQUssR0FBSXZHLEdBQUksRUFBR0EsRUFBSWdILEVBQVFNLFdBQVdKLE9BQVFsSCxJQUMzQytHLEVBQ0lDLEVBQVFNLFdBQVd0SCxHQUNuQnVHLEdBS0wsUUFBU2dCLEdBQW1CL0YsRUFBWTZGLEdBQzNDRyxFQUFlaEcsR0FBTzZGLEVBRXRCRixFQUFTTSxRQUFRSixFQUFRbkgsTUFHdEIsUUFBU3dILEdBQWNsRyxHQUMxQixNQUFPZ0csR0FBZWhHLEdBR25CLFFBQVNtRyxHQUFjbkcsR0FDMUIsR0FBTTZGLEdBQVVHLEVBQWVoRyxFQUMvQjJGLEdBQVdBLEVBQVNwQyxPQUFPLFNBQUFDLEdBQUEsTUFBTUEsS0FBT3FDLEVBQVFuSCxPQUc3QyxRQUFTMEgsR0FBZXBHLEVBQWE2RixHQUN4Q1EsRUFBYXJHLEdBQU82RixFTHFIeEI1RyxPQUFPQyxlQUFlZixFQUFTLGNBQzNCOEIsT0FBTyxHQUdYLElBQUlxRyxHQUFpQixXQUFjLFFBQVNDLEdBQWNDLEVBQUtoSSxHQUFLLEdBQUlpSSxNQUFlQyxHQUFLLEVBQVVDLEdBQUssRUFBV0MsTUFBSzlDLEVBQVcsS0FBTSxJQUFLLEdBQWlDK0MsR0FBN0JDLEVBQUtOLEVBQUl2QyxPQUFPQyxjQUFtQndDLEdBQU1HLEVBQUtDLEVBQUczQyxRQUFRQyxRQUFvQnFDLEVBQUtwRCxLQUFLd0QsRUFBRzVHLFFBQVl6QixHQUFLaUksRUFBS2YsU0FBV2xILEdBQTNEa0ksR0FBSyxJQUFvRSxNQUFPcEMsR0FBT3FDLEdBQUssRUFBTUMsRUFBS3RDLEVBQU8sUUFBVSxLQUFXb0MsR0FBTUksRUFBVyxRQUFHQSxFQUFXLFNBQU8sUUFBVSxHQUFJSCxFQUFJLEtBQU1DLElBQVEsTUFBT0gsR0FBUSxNQUFPLFVBQVVELEVBQUtoSSxHQUFLLEdBQUl1SSxNQUFNQyxRQUFRUixHQUFRLE1BQU9BLEVBQVksSUFBSXZDLE9BQU9DLFdBQVlqRixRQUFPdUgsR0FBUSxNQUFPRCxHQUFjQyxFQUFLaEksRUFBYSxNQUFNLElBQUl5SSxXQUFVLDREQUVsbEJ0QyxFQUE0QixrQkFBWFYsU0FBb0QsZ0JBQXBCQSxRQUFPQyxTQUF3QixTQUFVbkUsR0FBTyxhQUFjQSxJQUFTLFNBQVVBLEdBQU8sTUFBT0EsSUFBeUIsa0JBQVhrRSxTQUF5QmxFLEVBQUltSCxjQUFnQmpELFFBQVVsRSxJQUFRa0UsT0FBT3ZFLFVBQVksZUFBa0JLLElBRWxRb0gsRUFBV2xJLE9BQU9tSSxRQUFVLFNBQVVDLEdBQVUsSUFBSyxHQUFJN0ksR0FBSSxFQUFHQSxFQUFJOEksVUFBVTVCLE9BQVFsSCxJQUFLLENBQUUsR0FBSStJLEdBQVNELFVBQVU5SSxFQUFJLEtBQUssR0FBSXdCLEtBQU91SCxHQUFjdEksT0FBT1MsVUFBVUMsZUFBZWpCLEtBQUs2SSxFQUFRdkgsS0FBUXFILEVBQU9ySCxHQUFPdUgsRUFBT3ZILElBQVksTUFBT3FILEdBRXZQbEosR0s3SmdCb0gsZUw4SmhCcEgsRUtoSmdCNEgscUJMaUpoQjVILEVLM0lnQitILGdCTDRJaEIvSCxFS3hJZ0JnSSxnQkx5SWhCaEksRUtwSWdCaUksZ0JBeEtoQixJQUFBb0IsR0FBQW5KLEVBQUEsR0FDQTRHLEVBQUE1RyxFQUFBLEdBQ0F1RyxFQUFBdkcsRUFBQSxHQUVNb0osR0FBZSxFQUFBRCxFQUFBakgsWUFBV1UsY0FBWUMsT0FDdEN3RyxHQUFnQixFQUFBRixFQUFBakgsWUFBV1UsY0FBWUUsUUFFdkN3RyxHQUNGakosS0FBTSxTQUFDc0QsRUFBVytDLEdBRWQsSUFBSyxHQURDVSxHQUFhekQsRUFBS3lELGVBQ2ZqSCxFQUFJLEVBQUdBLEVBQUlpSCxFQUFXQyxPQUFRbEgsSUFBSyxDQUN4QyxHQUFNc0csR0FBWVcsRUFBV2pILEVBQzdCLElBQUlzRyxFQUFVN0MsU0FBUzJGLFdBQVcsTUFBTyxDQUNyQyxHQUFNNUMsSUFBUSxFQUFBQyxFQUFBQyxhQUFZSixFQUFVSyxVQUNwQyxJQUFJSCxHQUFTQSxFQUFNLEdBQUksQ0FDbkIsR0FBTUksR0FBUUMsT0FBT0wsRUFBTSxJQUNyQjZDLEVBQVc5QyxFQUFLSyxFQUN0QixJQUF3QixrQkFBYnlDLEdBQXlCLENBQ2hDN0YsRUFBSzhGLGdCQUNEaEQsRUFBVTdDLFNBRWQsSUFBTThGLEdBQVlqRCxFQUFVN0MsU0FBUytGLGNBQWNDLE1BQU0sRUFDekRqRyxHQUFLa0csaUJBQ0RILEVBQ0FGLEVBR0osSUFBTU0sR0FBWVQsRUFBY3JJLElBQUkyQyxNQUNwQzBGLEdBQWNVLElBQ1ZwRyxFQURKbUYsS0FHV2dCLEVBSFhySSxLQUlTaUksRUFBWUYsV0FVdkNRLEdBQ0YzSixLQUFNLFNBQUNzRCxFQUFZK0MsR0FDZixHQUFJL0MsWUFBZ0JzRyxzQkFDWnRHLEVBQUt1RyxhQUFhLE9BQVEsQ0FDMUIsR0FBTXZELElBQVEsRUFBQUMsRUFBQUMsYUFBWXNELE9BQU94RyxFQUFLeUcsYUFBYSxRQUNuRCxJQUFJekQsR0FBU0EsRUFBTSxHQUFJLENBQ25CLEdBQU1JLEdBQVFDLE9BQU9MLEVBQU0sSUFDckJ3QixFQUFNekIsRUFBS0ssR0FDWHNELEVBQU0xRyxFQUFLMkcsVUFDWEMsRUFBV0MsU0FBU0MsY0FBYyxZQUNsQ0MsRUFBUXZDLEVBQUl3QyxJQUFJLFNBQUF4RixHQUNsQixPQUFPLEVBQUF5QixFQUFBZ0UsZUFBY1AsRUFBSyxTQUFDMUQsRUFBT0ksR0FDOUIsR0FBTThELEdBQU1uRSxFQUFLSyxFQUNqQixJQUFtQixrQkFBUjhELEdBQW9CLENBQzNCLEdBQU1DLEdBQVVELEVBQUkxRixFQUNwQixPQUFJMkYsYUFBbUJiLHFCQUNaYSxFQUFRUixVQUVYNUIsTUFBTUMsUUFBUW1DLEdBQ1BBLEVBQVFDLEtBQUssSUFFYkQsRUFJbkIsTUFBT0QsTUFHZk4sR0FBU0QsVUFBWUksRUFBTUssS0FBSyxJQUVoQ3BILEVBQUtxSCxXQUFXQyxhQUNaVixFQUFTVyxRQUNUdkgsT0F3QmxCd0gsR0FDRjlLLEtBQU0sU0FBQ3NELEVBQVcrQyxHQUVkLElBQUssR0FEQ1UsR0FBYXpELEVBQUt5RCxlQUNmakgsRUFBSSxFQUFHQSxFQUFJaUgsRUFBV0MsT0FBUWxILElBQUssQ0FDeEMsR0FBTXNHLEdBQVlXLEVBQVdqSCxHQURXaUwsRUFFZDVFLEVBQ3RCQyxFQUNBOUMsRUFDQStDLEdBTG9DMkUsRUFBQXBELEVBQUFtRCxFQUFBLEdBRWpDRSxFQUZpQ0QsRUFBQSxHQUV2QnpKLEVBRnVCeUosRUFBQSxFQU94QyxJQUFJaEYsRUFBdUJ6RSxFQUFPK0IsR0FBTyxDQUNyQyxHQUFNNEgsR0FBUW5DLEVBQWFwSSxJQUFJMkMsTUFDL0JBLEdBQUs4RixnQkFDRGhELEVBQVU3QyxVQUVkd0YsRUFBYVcsSUFDVHBHLEVBREptRixLQUdXeUMsRUFIWDlKLEtBSVM2SixFQUFXMUosU0FROUJvRyxHQUNGd0QsT0FBUWxDLEVBQ1JxQixJQUFLWCxFQUNMdUIsTUFBT0osR0FHTHhELEtBRUZMLEdBQ0FVLEVBQWEyQyxJQUFJdEssS0FDakIySCxFQUFhd0QsT0FBT25MLEtBQ3BCMkgsRUFBYXVELE1BQU1sTCxPTDhUakIsU0FBVVIsRUFBUUMsRUFBU0UsR0FFakMsWU1wY08sU0FBU3lMLEtBQ1pDLFdBQVcsV0FBTSxHQUFBcEcsSUFBQSxFQUFBQyxHQUFBLEVBQUFDLE1BQUFDLEVBQUEsS0FDYixPQUFBQyxHQUFBQyxFQUFrQnlELEVBQWF1QyxPQUEvQi9GLE9BQUFDLGNBQUFQLEdBQUFJLEVBQUFDLEVBQUFHLFFBQUFDLE1BQUFULEdBQUEsRUFBdUMsSUFBNUIzRCxHQUE0QitELEVBQUE5RCxLQUM5QkQsR0FBSWlLLGFBQ0x4QyxFQUFheUMsT0FBT2xLLElBSGYsTUFBQXNFLEdBQUFWLEdBQUEsRUFBQUMsRUFBQVMsRUFBQSxhQUFBWCxHQUFBSyxFQUFBTyxRQUFBUCxFQUFBTyxTQUFBLFdBQUFYLEVBQUEsS0FBQUMsT0FTZCxRQUFTc0csS0FDWkosV0FBVyxXQUFNLEdBQUFLLElBQUEsRUFBQUMsR0FBQSxFQUFBQyxNQUFBeEcsRUFBQSxLQUNiLE9BQUF5RyxHQUFBQyxFQUFrQjlDLEVBQWNzQyxPQUFoQy9GLE9BQUFDLGNBQUFrRyxHQUFBRyxFQUFBQyxFQUFBckcsUUFBQUMsTUFBQWdHLEdBQUEsRUFBd0MsSUFBN0JwSyxHQUE2QnVLLEVBQUF0SyxLQUMvQkQsR0FBSWlLLGFBQ0x2QyxFQUFjd0MsT0FBT2xLLElBSGhCLE1BQUFzRSxHQUFBK0YsR0FBQSxFQUFBQyxFQUFBaEcsRUFBQSxhQUFBOEYsR0FBQUksRUFBQWpHLFFBQUFpRyxFQUFBakcsU0FBQSxXQUFBOEYsRUFBQSxLQUFBQyxPQVNkLFFBQVNoRixHQUFjckQsR0FDMUIsTUFBT0EsR0FBU3dJLE1BQU0sS0FBS0MsT0FDdkIsU0FBQ0MsRUFBS3hHLEdBQ0YsTUFBSUEsR0FDT3dHLEVBQU14RyxFQUFLLEdBQUd5RyxjQUFnQnpHLEVBQUs4RCxNQUFNLEdBRTdDMEMsSUFLWixRQUFTRSxHQUFhekYsR0FDekIsdUJBQXFCQSxFQUFyQixTQUdHLFFBQVNGLEdBQVk0RixHQUN4QixNQUFPQSxHQUFJOUYsTUFBTSxnQkFHZCxRQUFTaUUsR0FBYzZCLEVBQWFDLEdBQ3ZDLE1BQU9ELEdBQUlFLFFBQVEsc0JBQXVCRCxHQUd2QyxRQUFTRSxHQUFnQkgsR0FDNUIsTUFBTyxPQUFBQSxFQUFJSSxPQUFPakQsT0FBTyxHTjJaN0JoSixPQUFPQyxlQUFlZixFQUFTLGNBQzNCOEIsT0FBTyxJQUVYOUIsRU0xY2dCMkwsb0JOMmNoQjNMLEVNamNnQmdNLHFCTmtjaEJoTSxFTXhiZ0JtSCxnQk55YmhCbkgsRU05YWdCME0sZU4rYWhCMU0sRU0zYWdCK0csY040YWhCL0csRU14YWdCOEssZ0JOeWFoQjlLLEVNcmFnQjhNLGlCQWhEaEIsSUFBQXpELEdBQUFuSixFQUFBLEdBRU1vSixHQUFlLEVBQUFELEVBQUFqSCxZQUFXVSxjQUFZQyxPQUN0Q3dHLEdBQWdCLEVBQUFGLEVBQUFqSCxZQUFXVSxjQUFZRSxTTm1qQnZDLFNBQVVqRCxFQUFRQyxFQUFTRSxHQUVqQyxZQXlLQSxTQUFTOE0sR0FBdUJwTCxHQUFPLE1BQU9BLElBQU9BLEVBQUlSLFdBQWFRLEdBQVE0QyxRQUFTNUMsR0F0S3ZGZCxPQUFPQyxlQUFlZixFQUFTLGNBQzNCOEIsT0FBTyxHQUdYLElBQUkyRSxHQUFpQnZHLEVBQW9CLEVBRXpDWSxRQUFPQyxlQUFlZixFQUFTLG9DQUMzQmlCLFlBQVksRUFDWkMsSUFBSyxXQUNELE1BQU91RixHT25rQlh4QyxxQlBza0JKbkQsT0FBT0MsZUFBZWYsRUFBUyxtQkFDM0JpQixZQUFZLEVBQ1pDLElBQUssV0FDRCxNQUFPdUYsR094a0JYcEMsbUJQMmtCSnZELE9BQU9DLGVBQWVmLEVBQVMsaUNBQzNCaUIsWUFBWSxFQUNaQyxJQUFLLFdBQ0QsTUFBT3VGLEdPN2tCWG5DLGlCUGdsQkp4RCxPQUFPQyxlQUFlZixFQUFTLHFCQUMzQmlCLFlBQVksRUFDWkMsSUFBSyxXQUNELE1BQU84TCxHQUF1QnZHLEdPbGxCbENqQyxVUHNsQkosSUFBSXlJLEdBQVMvTSxFQUFvQixFQUVqQ1ksUUFBT0MsZUFBZWYsRUFBUyw2QkFDM0JpQixZQUFZLEVBQ1pDLElBQUssV0FDRCxNQUFPK0wsR092bEJYaEoscUJQMGxCSm5ELE9BQU9DLGVBQWVmLEVBQVMsbUJBQzNCaUIsWUFBWSxFQUNaQyxJQUFLLFdBQ0QsTUFBTytMLEdPNWxCWDNHLG1CUCtsQkp4RixPQUFPQyxlQUFlZixFQUFTLGlCQUMzQmlCLFlBQVksRUFDWkMsSUFBSyxXQUNELE1BQU8rTCxHT2ptQlhuSSxpQlBvbUJKaEUsT0FBT0MsZUFBZWYsRUFBUyxhQUMzQmlCLFlBQVksRUFDWkMsSUFBSyxXQUNELE1BQU8rTCxHT3RtQlhsSSxhUHltQkpqRSxPQUFPQyxlQUFlZixFQUFTLFlBQzNCaUIsWUFBWSxFQUNaQyxJQUFLLFdBQ0QsTUFBTytMLEdPM21CWDNILFdQK21CSixJQUFJNEgsR0FBWWhOLEVBQW9CLEVBRXBDWSxRQUFPQyxlQUFlZixFQUFTLHNCQUMzQmlCLFlBQVksRUFDWkMsSUFBSyxXQUNELE1BQU9nTSxHT2huQlh0RixzQlBtbkJKOUcsT0FBT0MsZUFBZWYsRUFBUyxrQkFDM0JpQixZQUFZLEVBQ1pDLElBQUssV0FDRCxNQUFPZ00sR09ybkJYakYsa0JQd25CSm5ILE9BQU9DLGVBQWVmLEVBQVMsaUJBQzNCaUIsWUFBWSxFQUNaQyxJQUFLLFdBQ0QsTUFBT2dNLEdPMW5CWGxGLGlCUDZuQkpsSCxPQUFPQyxlQUFlZixFQUFTLGlCQUMzQmlCLFlBQVksRUFDWkMsSUFBSyxXQUNELE1BQU9nTSxHTy9uQlhuRixnQlBtb0JKLElBQUlvRixHQUFPak4sRUFBb0IsRUFFL0JZLFFBQU9DLGVBQWVmLEVBQVMsUUFDM0JpQixZQUFZLEVBQ1pDLElBQUssV0FDRCxNQUFPaU0sR09wb0JYQyxRUHVvQkp0TSxPQUFPQyxlQUFlZixFQUFTLE9BQzNCaUIsWUFBWSxFQUNaQyxJQUFLLFdBQ0QsTUFBT2lNLEdPem9CWEUsTVA2b0JKLElBQUloRSxHQUFXbkosRUFBb0IsRUFFbkNZLFFBQU9DLGVBQWVmLEVBQVMsY0FDM0JpQixZQUFZLEVBQ1pDLElBQUssV0FDRCxNQUFPbUksR085b0JYakgsY1BpcEJKdEIsT0FBT0MsZUFBZWYsRUFBUyxjQUMzQmlCLFlBQVksRUFDWkMsSUFBSyxXQUNELE1BQU9tSSxHT25wQlgvRyxjUHNwQkp4QixPQUFPQyxlQUFlZixFQUFTLGlCQUMzQmlCLFlBQVksRUFDWkMsSUFBSyxXQUNELE1BQU9tSSxHT3hwQlg3RyxpQlAycEJKMUIsT0FBT0MsZUFBZWYsRUFBUyxvQkFDM0JpQixZQUFZLEVBQ1pDLElBQUssV0FDRCxNQUFPbUksR083cEJYckgsbUJQaXFCSixJQUFJc0wsR0FBUXBOLEVBQW9CLEVBRWhDWSxRQUFPQyxlQUFlZixFQUFTLFFBQzNCaUIsWUFBWSxFQUNaQyxJQUFLLFdBQ0QsTUFBT29NLEdPbnFCUEMsT1B1cUJSLElBQUl6RyxHQUFTNUcsRUFBb0IsRUFFakNZLFFBQU9DLGVBQWVmLEVBQVMsZUFDM0JpQixZQUFZLEVBQ1pDLElBQUssV0FDRCxNQUFPNEYsR096cUJYQyxlUDRxQkpqRyxPQUFPQyxlQUFlZixFQUFTLGlCQUMzQmlCLFlBQVksRUFDWkMsSUFBSyxXQUNELE1BQU80RixHTzlxQlhnRSxnQlBrckJKLElBQUkwQyxHQUFhdE4sRUFBb0IsRUFFckNZLFFBQU9DLGVBQWVmLEVBQVMsYUFDM0JpQixZQUFZLEVBQ1pDLElBQUssV0FDRCxNQUFPOEwsR0FBdUJRLEdPcHJCOUJoSixZUDRyQkYsU0FBVXpFLEVBQVFDLEVBQVNFLEdBRWpDLFlRcHVCTyxTQUFTa04sR0FBS0ssR0FBbUMsT0FBQUMsR0FBQXZFLFVBQUE1QixPQUFiWCxFQUFhZ0MsTUFBQThFLEVBQUEsRUFBQUEsRUFBQSxLQUFBQyxFQUFBLEVBQUFBLEVBQUFELEVBQUFDLElBQWIvRyxFQUFhK0csRUFBQSxHQUFBeEUsVUFBQXdFLEVBQ3BELEtBQUsvRyxFQUFLVyxPQUNOLE1BQU9rRyxHQUFRLEVBSW5CLEtBQUssR0FERGxELEdBQWMsR0FDVGxLLEVBQUksRUFBR0EsRUFBSW9OLEVBQVFsRyxPQUFRbEgsSUFDaENrSyxHQUFPa0QsRUFBUXBOLEdBQ1hBLEVBQUlvTixFQUFRbEcsT0FBUyxJQUNqQnFCLE1BQU1DLFFBQVFqQyxFQUFLdkcsTUFBZ0MsS0FBekIsRUFBQXlHLEVBQUFnRyxpQkFBZ0J2QyxHQUMxQ0EsR0FBTzNELEVBQUt2RyxHQUFHNEssS0FBSyxJQUNJLGtCQUFackUsR0FBS3ZHLElBQXdDLFdBQW5CbUcsRUFBT0ksRUFBS3ZHLElBQ2xEa0ssSUFBTyxFQUFBekQsRUFBQTRGLGNBQWFyTSxHQUVwQmtLLEdBQU8zRCxFQUFLdkcsR0FHeEIsSUFBTXVOLEdBQVdsRCxTQUFTQyxjQUFjLFdBR3hDLE9BRkFpRCxHQUFTcEQsVUFBWUQsR0FDckIsRUFBQTJDLEVBQUE5RixjQUFhd0csRUFBU3hDLFFBQVN4RSxHQUN4QmdILEVBR0osUUFBU1AsR0FBSUksR0FBbUMsT0FDL0NJLEdBQVMsR0FEc0NDLEVBQUEzRSxVQUFBNUIsT0FBYlgsRUFBYWdDLE1BQUFrRixFQUFBLEVBQUFBLEVBQUEsS0FBQUMsRUFBQSxFQUFBQSxFQUFBRCxFQUFBQyxJQUFibkgsRUFBYW1ILEVBQUEsR0FBQTVFLFVBQUE0RSxFQUVuRCxLQUFLLEdBQUkxTixHQUFJLEVBQUdBLEVBQUlvTixFQUFRbEcsT0FBUWxILElBQ2hDd04sR0FBVUosRUFBUXBOLEdBQ2RBLEVBQUlvTixFQUFRbEcsT0FBUyxJQUNFLGtCQUFaWCxHQUFLdkcsR0FDWndOLEdBQVVqSCxFQUFLdkcsS0FFZndOLEdBQVVqSCxFQUFLdkcsR0FHM0IsT0FBT3dOLEdScXNCWC9NLE9BQU9DLGVBQWVmLEVBQVMsY0FDM0I4QixPQUFPLEdBR1gsSUFBSTBFLEdBQTRCLGtCQUFYVixTQUFvRCxnQkFBcEJBLFFBQU9DLFNBQXdCLFNBQVVuRSxHQUFPLGFBQWNBLElBQVMsU0FBVUEsR0FBTyxNQUFPQSxJQUF5QixrQkFBWGtFLFNBQXlCbEUsRUFBSW1ILGNBQWdCakQsUUFBVWxFLElBQVFrRSxPQUFPdkUsVUFBWSxlQUFrQkssR0FFdFE1QixHUTd1QmdCb04sT1I4dUJoQnBOLEVRdnRCZ0JxTixLQTFCaEIsSUFBQUgsR0FBQWhOLEVBQUEsR0FDQTRHLEVBQUE1RyxFQUFBLElSOHhCTSxTQUFVSCxFQUFRQyxFQUFTRSxHQUVqQyxZQVVBLFNBQVM4TixHQUFtQjNGLEdBQU8sR0FBSU8sTUFBTUMsUUFBUVIsR0FBTSxDQUFFLElBQUssR0FBSWhJLEdBQUksRUFBRzROLEVBQU9yRixNQUFNUCxFQUFJZCxRQUFTbEgsRUFBSWdJLEVBQUlkLE9BQVFsSCxJQUFPNE4sRUFBSzVOLEdBQUtnSSxFQUFJaEksRUFBTSxPQUFPNE4sR0FBZSxNQUFPckYsT0FBTXNGLEtBQUs3RixHU2p5QjFMLFFBQVM4RixHQUFnQnZCLEVBQWM5SyxHQUNuQyxHQUFNSSxJQUE2QyxFQUFBbUgsRUFBQWpILFlBQVdnTSxFQUM5RCxJQUFJbE0sRUFBUW1NLE9BQVNDLEVBQWtCLENBQ25DLEdBQU16QyxHQUFPM0osRUFBUTJKLE1BRXJCM0osR0FBUTZKLE9BQU9GLEVBQUs3RixPQUFPbEUsT0FFL0JJLEVBQVErSCxJQUFJMkMsRUFBSTlLLEdBR2IsUUFBU3lMLEdBQUtYLEdBQXdDLE9BQ25EMUssSUFBNkMsRUFBQW1ILEVBQUFqSCxZQUFXZ00sR0FDeERHLEVBQVFyTSxFQUFRaEIsSUFBSTBMLEdBRitCYyxFQUFBdkUsVUFBQTVCLE9BQXZCWCxFQUF1QmdDLE1BQUE4RSxFQUFBLEVBQUFBLEVBQUEsS0FBQUMsRUFBQSxFQUFBQSxFQUFBRCxFQUFBQyxJQUF2Qi9HLEVBQXVCK0csRUFBQSxHQUFBeEUsVUFBQXdFLEVBR3pELElBQU1hLEdBQVc1SCxFQUFLLEdBQ2hCNkgsRUFBVTdCLEVBQUdXLEtBQUhtQixNQUFBOUIsR0FBUSxNQUFSK0IsT0FBQVgsRUFBaUJwSCxJQUNqQyxJQUFJMkgsRUFDQSxNQUFLQSxHQUFNck4sSUFBSXNOLEdBUVJELEVBQU1yTixJQUFJc04sSUFQYkQsRUFBTXRFLElBQ0Z1RSxFQUNBQyxHQUVHQSxFQU1mLElBQU1HLEdBQVEsR0FBSWhNLElBU2xCLE9BUkFnTSxHQUFNM0UsSUFDRnVFLEVBQ0FDLEdBRUpOLEVBQ0l2QixFQUNBZ0MsR0FFR0gsRVRzdkJYM04sT0FBT0MsZUFBZWYsRUFBUyxjQUMzQjhCLE9BQU8sSUFFWDlCLEVTbnhCZ0J1TixNQXBCaEIsSUFBQWxFLEdBQUFuSixFQUFBLEdBRU1rTyxFQUFNLFNBQ05FLEVBQW1CLEtBRXpCLEVBQUFqRixFQUFBL0csWUFDSThMLEVBQ0EsR0FBSXhMLE9UZzFCRixTQUFVN0MsRUFBUUMsRUFBU0UsR0FFakMsWUFxQkEsU0FBU3lCLEdBQWdCQyxFQUFLQyxFQUFLQyxHQUFpSyxNQUFwSkQsS0FBT0QsR0FBT2QsT0FBT0MsZUFBZWEsRUFBS0MsR0FBT0MsTUFBT0EsRUFBT2IsWUFBWSxFQUFNRCxjQUFjLEVBQU1lLFVBQVUsSUFBa0JILEVBQUlDLEdBQU9DLEVBQWdCRixFQUUzTSxRQUFTaU4sR0FBZ0JDLEVBQVVDLEdBQWUsS0FBTUQsWUFBb0JDLElBQWdCLEtBQU0sSUFBSWpHLFdBQVUscUNBRWhILFFBQVNrRyxHQUEyQkMsRUFBTTFPLEdBQVEsSUFBSzBPLEVBQVEsS0FBTSxJQUFJQyxnQkFBZSw0REFBZ0UsUUFBTzNPLEdBQXlCLGdCQUFUQSxJQUFxQyxrQkFBVEEsR0FBOEIwTyxFQUFQMU8sRUFFbE8sUUFBUzRPLEdBQVVDLEVBQVVDLEdBQWMsR0FBMEIsa0JBQWZBLElBQTRDLE9BQWZBLEVBQXVCLEtBQU0sSUFBSXZHLFdBQVUsaUVBQW9FdUcsR0FBZUQsR0FBUzdOLFVBQVlULE9BQU9vQyxPQUFPbU0sR0FBY0EsRUFBVzlOLFdBQWF3SCxhQUFlakgsTUFBT3NOLEVBQVVuTyxZQUFZLEVBQU9jLFVBQVUsRUFBTWYsY0FBYyxLQUFlcU8sSUFBWXZPLE9BQU93TyxlQUFpQnhPLE9BQU93TyxlQUFlRixFQUFVQyxHQUFjRCxFQUFTRyxVQUFZRixHVTcyQmplLFFBQVNHLEdBQWdCbEksR0FDckIsR0FBTXVHLE1BRGlEckksR0FBQSxFQUFBQyxHQUFBLEVBQUFDLE1BQUFDLEVBQUEsS0FFdkQsT0FBQUMsR0FBQUMsRUFBd0J5QixFQUF4QnhCLE9BQUFDLGNBQUFQLEdBQUFJLEVBQUFDLEVBQUFHLFFBQUFDLE1BQUFULEdBQUEsRUFBb0MsSUFBekJtQixHQUF5QmYsRUFBQTlELEtBQ2hDK0wsR0FBT2xILEVBQVVoRyxNQUFRZ0csRUFBVTdFLE9BSGdCLE1BQUFxRSxHQUFBVixHQUFBLEVBQUFDLEVBQUFTLEVBQUEsYUFBQVgsR0FBQUssRUFBQU8sUUFBQVAsRUFBQU8sU0FBQSxXQUFBWCxFQUFBLEtBQUFDLElBS3ZELE1BQU9tSSxHVmcxQlgvTSxPQUFPQyxlQUFlZixFQUFTLGNBQzNCOEIsT0FBTyxHQUdYLElBQUkwRSxHQUE0QixrQkFBWFYsU0FBb0QsZ0JBQXBCQSxRQUFPQyxTQUF3QixTQUFVbkUsR0FBTyxhQUFjQSxJQUFTLFNBQVVBLEdBQU8sTUFBT0EsSUFBeUIsa0JBQVhrRSxTQUF5QmxFLEVBQUltSCxjQUFnQmpELFFBQVVsRSxJQUFRa0UsT0FBT3ZFLFVBQVksZUFBa0JLLElBRWxRb0gsRUFBV2xJLE9BQU9tSSxRQUFVLFNBQVVDLEdBQVUsSUFBSyxHQUFJN0ksR0FBSSxFQUFHQSxFQUFJOEksVUFBVTVCLE9BQVFsSCxJQUFLLENBQUUsR0FBSStJLEdBQVNELFVBQVU5SSxFQUFJLEtBQUssR0FBSXdCLEtBQU91SCxHQUFjdEksT0FBT1MsVUFBVUMsZUFBZWpCLEtBQUs2SSxFQUFRdkgsS0FBUXFILEVBQU9ySCxHQUFPdUgsRUFBT3ZILElBQVksTUFBT3FILElBRW5QdUcsRUFBZSxXQUFjLFFBQVNDLEdBQWlCeEcsRUFBUXVDLEdBQVMsSUFBSyxHQUFJcEwsR0FBSSxFQUFHQSxFQUFJb0wsRUFBTWxFLE9BQVFsSCxJQUFLLENBQUUsR0FBSXNQLEdBQWFsRSxFQUFNcEwsRUFBSXNQLEdBQVcxTyxXQUFhME8sRUFBVzFPLGFBQWMsRUFBTzBPLEVBQVczTyxjQUFlLEVBQVUsU0FBVzJPLEtBQVlBLEVBQVc1TixVQUFXLEdBQU1qQixPQUFPQyxlQUFlbUksRUFBUXlHLEVBQVc5TixJQUFLOE4sSUFBaUIsTUFBTyxVQUFVWixFQUFhYSxFQUFZQyxHQUFpSixNQUE5SEQsSUFBWUYsRUFBaUJYLEVBQVl4TixVQUFXcU8sR0FBaUJDLEdBQWFILEVBQWlCWCxFQUFhYyxHQUFxQmQsTVVwMkJoaUI5QixFQUFBL00sRUFBQSxHQUNBNFAsRUFBQTVQLEVBQUEsR0FDQW1KLEVBQUFuSixFQUFBLEdBQ0E0RyxFQUFBNUcsRUFBQSxHVm0zQkk2UCxFQUFrQixTQUFVQyxHQUM1QixHQUFJQyxHQUFNRCxFQUFFRSxnQkFBa0IsU0FBVXJQLEdBQ3BDLE1BQU9BLEdBQUUwTyxXQUVUWSxFQUFNSCxFQUFFVixnQkFBa0IsU0FBVXpPLEVBQUdZLEdBRXZDLE1BREFaLEdBQUUwTyxVQUFZOU4sRUFDUFosR0FFUHVQLEVBQWtGLFlBQWxELG1CQUFaQyxTQUEwQixZQUFjN0osRUFBUTZKLFVBQXlCQSxRQUFRRCxVQUFZLFNBQVVFLEVBQVExSixFQUFNMkosR0FDekksR0FBSXhCLEdBQ0F5QixHQUFLLEtBR1QsT0FGQUEsR0FBRXRMLEtBQUt3SixNQUFNOEIsRUFBRzVKLEdBQ2hCbUksRUFBY3VCLEVBQU8vQyxLQUFLbUIsTUFBTTRCLEVBQVFFLEdBQ2pDTCxFQUFJLEdBQUlwQixHQUFld0IsRUFBTWhQLFdBR3hDLE9BQU8sVUFBd0JnUCxHQUMzQixHQUFJRCxHQUFTTCxFQUFJTSxFQUNqQixPQUFPSixHQUFJSSxFQUFPSixFQUFJLFdBQ2xCLE1BQU9DLEdBQVVFLEVBQVFuSCxVQUFXOEcsRUFBSTlNLE1BQU00RixjQUMvQ3VILE1BRVR4UCxRVXY0Qkl3SSxHQUFlLEVBQUFELEVBQUFqSCxZQUFXVSxjQUFZQyxPQVV2QjBOLEVWKzVCTFYsRUFBZ0IsU0FBVVcsR0FHdEMsUUFBU0QsS0FDTCxHQUFJRSxHQUVBQyxFQUFPM0wsRUFBTzRMLENBRWxCaEMsR0FBZ0IxTCxLQUFNc04sRUFFdEIsS0FBSyxHQUFJL0MsR0FBT3ZFLFVBQVU1QixPQUFRWCxFQUFPZ0MsTUFBTThFLEdBQU9DLEVBQU8sRUFBR0EsRUFBT0QsRUFBTUMsSUFDekUvRyxFQUFLK0csR0FBUXhFLFVBQVV3RSxFQUczQixPQUFlaUQsR0FBUzNMLEVBQVErSixFQUEyQjdMLE1BQU93TixFQUFPRixFQUFVbEIsV0FBYXpPLE9BQU9vUCxlQUFlTyxJQUFZbFEsS0FBS21PLE1BQU1pQyxHQUFPeE4sTUFBTXdMLE9BQU8vSCxLQUFpQjNCLEVVOTNCdEw2TCxrQlY4M0JpTjdMLEVVNTNCak5OLGlCVjQzQjJPTSxFVTEzQjNPOEwsU1YwM0I2UDlMLEVVeDNCN1ArTCxTQUFVLEVWdzNCQ0gsRUFBeVFELEVBQVE1QixFQUEyQi9KLEVBQU80TCxHQTJLOVQsTUF4TEExQixHQUFVc0IsRUFBV0MsR0FnQnJCakIsRUFBYWdCLElBQ1Q1TyxJQUFLLGVBQ0xDLE1BQU8sZUFFUEQsSUFBSyxTQUNMQyxNQUFPLFdVMzNCUCxNQUFPLE1WKzNCUEQsSUFBSyxjQUNMQyxNQUFPLGVBRVBELElBQUssbUJBQ0xDLE1BQU8sV1U5M0JRLEdBQUFtUCxHQUFBOU4sS0FBQThJLEdBQUEsRUFBQUMsR0FBQSxFQUFBQyxNQUFBeEcsRUFBQSxLQUNmLE9BQUF5RyxHQUFBQyxFQUFrQmxKLEtBQUswSSxLQUF2Qi9GLE9BQUFDLGNBQUFrRyxHQUFBRyxFQUFBQyxFQUFBckcsUUFBQUMsTUFBQWdHLEdBQUEsRUFBNkIsSUFBbEJwSyxHQUFrQnVLLEVBQUF0SyxPQURkLFNBQ0pELEdBQ1BvUCxFQUFLdE0sY0FBY08sTUFDZixFQUFBK0gsRUFBQWxJLFdBQVVsRCxFQUFLLFNBQUFrUCxHQUNYRSxFQUFLRixNQUFNbFAsR0FBT2tQLEVBQ2xCRyxTQUFPM1EsS0FBSzBRLE1BR3BCQSxFQUFLRixNQUFNbFAsSUFBTyxFQUFBb0wsRUFBQTNILFVBQVN6RCxJQVBwQkEsSUFESSxNQUFBc0UsR0FBQStGLEdBQUEsRUFBQUMsRUFBQWhHLEVBQUEsYUFBQThGLEdBQUFJLEVBQUFqRyxRQUFBaUcsRUFBQWpHLFNBQUEsV0FBQThGLEVBQUEsS0FBQUMsUVZtNkJmdEssSUFBSyxvQkFDTEMsTUFBTyxXVXY1QlBxQixLQUFLZ08sbUJBQ0xELFNBQU8zUSxLQUFLNEMsTUFFWkEsS0FBS2lPLGVWMjVCTHZQLElBQUssWUFDTEMsTUFBTyxlQUVQRCxJQUFLLHVCQUNMQyxNQUFPLFdVMTVCWSxHQUFBdVAsSUFBQSxFQUFBQyxHQUFBLEVBQUFDLE1BQUE1TCxFQUFBLEtBQ25CLE9BQUE2TCxHQUFBQyxFQUEyQnRPLEtBQUt3QixjQUFoQ21CLE9BQUFDLGNBQUFzTCxHQUFBRyxFQUFBQyxFQUFBekwsUUFBQUMsTUFBQW9MLEdBQUEsRUFBK0MsQ0FBQUcsRUFBQTFQLE1BQzlCcUQsZUFGRSxNQUFBZ0IsR0FBQW1MLEdBQUEsRUFBQUMsRUFBQXBMLEVBQUEsYUFBQWtMLEdBQUFJLEVBQUFyTCxRQUFBcUwsRUFBQXJMLFNBQUEsV0FBQWtMLEVBQUEsS0FBQUMsS0FJbkIsRUFBQXpLLEVBQUE2RSxzQkFDQSxFQUFBN0UsRUFBQWtGLHNCQUVBN0ksS0FBS3VPLGtCVm03Qkw3UCxJQUFLLGVBQ0xDLE1BQU8sZUFFUEQsSUFBSyxrQkFDTEMsTUFBTyxXVWo3QlBxQixLQUFLZ08sbUJBQ0xELFNBQU8zUSxLQUFLNEMsTUFFWkEsS0FBS3dPLGFWcTdCTDlQLElBQUssVUFDTEMsTUFBTyxlQUVQRCxJQUFLLDJCQUNMQyxNQUFPLFNVcDdCYzhQLEVBQXVCQyxFQUFrQkMsR0FDMUQzTyxLQUFLNk4sU0FBV2EsR0FBWUMsSUFDNUIzTyxLQUFLNE8sYUFBTC9JLEtBRVc3RixLQUFLc0ksTUFGaEI5SixLQUdTaVEsRUFBZ0JFLEtBR3pCWixTQUFPM1EsS0FBSzRDLFVWbTdCaEJ0QixJQUFLLGVBQ0xDLE1BQU8sU1VoN0JFa1EsT1ZrN0JUblEsSUFBSyxPQUNMWCxJQUFLLFdVdGlDTCxNQUFPSixRQUFPb1AsZUFBZS9NLE1BQU00RixZQUFZcEksUVYwaUMvQ2tCLElBQUssV0FDTFgsSUFBSyxXVXZpQ0wsT0FBTyxLVjJpQ1BXLElBQUssUUFDTFgsSUFBSyxXVXhpQ0wsTUFBQThILE1BQ083RixLQUFLMk4sZUFDTHRCLEVBQWdCck0sS0FBS21FLFlBQ3BCZ0MsRUFBYXBJLElBQUlpQyxZVndpQ3pCOEcsSUFBSyxTVXBpQ0N3QixHQUNOdEksS0FBSzJOLGVBQWlCckYsS1Z1aUN0QjVKLElBQUssT0FDTFgsSUFBSyxXVXBpQ0wsWVZ3aUNBVyxJQUFLLFNBQ0xYLElBQUssV1VyaUNMLE1BQU8sUVZ5aUNQVyxJQUFLLHFCQUNMWCxJQUFLLFdVdGlDTCxNQUFPaUMsTUFBSzhPLGdCQUFnQnBILElBQUksU0FBQ3FILEdBRTdCLElBQUssR0FEREMsR0FBTSxHQUNEOVIsRUFBSSxFQUFHQSxFQUFJNlIsRUFBSzNLLE9BQVFsSCxJQUN6QjZSLEVBQUs3UixLQUFPNlIsRUFBSzdSLEdBQUdvTSxjQUNwQjBGLEdBQU8sSUFBSUQsRUFBSzdSLEdBQUd3SixjQUVuQnNJLEdBQU9ELEVBQUs3UixFQUdwQixPQUFPOFIsUVYyaUNYdFEsSUFBSyxrQkFDTFgsSUFBSyxXVXZpQ0wsYVY0aUNHdVAsR1V4bEM0QjJCLGFWMmxDdkNwUyxHQUFRd0UsUVUzbENhaU0sR1YrbENmLFNBQVUxUSxFQUFRQyxFQUFTRSxHQUVqQyxZVzFtQ0EsU0FBU21TLEdBQVdDLEVBQW1CQyxHQUNuQyxHQUFNQyxHQUFVRixFQUFZRyxXQUFVLEdBQ2hDQyxFQUFVSCxFQUFhRSxXQUFVLEVBQ3ZDLE9BQUluSixHQUFhcEksSUFBSXFSLElBQ1YsRUFBQUksRUFBQW5PLFNBQ0g4RSxFQUFhcEksSUFBSW9SLEdBQ2pCaEosRUFBYXBJLElBQUlxUixLQUNoQkMsRUFBUUksWUFBWUYsR0FFdEJGLEVBQVFJLFlBQVlGLEdBRy9CLFFBQVNHLEdBQWNQLEVBQW1CQyxHQUN0QyxPQUFpRCxJQUExQ0QsRUFBWU0sWUFBWUwsR0FHbkMsUUFBU08sR0FBZ0JDLEVBQXNCQyxHQUMzQyxHQUFJRCxFQUFheEwsT0FBU3lMLEVBQWN6TCxPQUNwQyxJQUFLLEdBQUlsSCxHQUFJLEVBQUdBLEVBQUkwUyxFQUFheEwsT0FBUWxILElBQUssQ0FDMUMsR0FBSTBTLEVBQWExUyxLQUFPMlMsRUFBYzNTLEdBQ2xDLE9BQVEwUyxFQUFhMVMsSUFBSXNPLE9BQ3JCbUUsRUFDSWxLLE1BQU1zRixLQUFLNkUsR0FBY2pKLE1BQU16SixFQUFJLEdBQ25DdUksTUFBTXNGLEtBQUs4RSxHQUFlbEosTUFBTXpKLElBSTVDLEtBQUtnUyxFQUFXVSxFQUFhMVMsR0FBSTJTLEVBQWMzUyxJQUFLLENBQ2hELEdBQU00UyxHQUFVSCxFQUNabEssTUFBTXNGLEtBQUs2RSxHQUFjakosTUFBTXpKLEVBQUksR0FDbkN1SSxNQUFNc0YsS0FBSzhFLEdBQWVsSixNQUFNekosR0FFcEMsSUFBdUIsSUFBbkI0UyxFQUFRMUwsT0FDUixPQUFRd0wsRUFBYTFTLEtBS3JDLFNBR0osUUFBUzZTLEdBQXFCSCxFQUFzQkMsR0FDaEQsR0FBSUQsRUFBYXhMLE9BQVN5TCxFQUFjekwsT0FDcEMsTUFBT3lMLEdBQWN6TCxNQUd6QixLQUFLLEdBREQ0TCxHQUFVLEVBQ0w5UyxFQUFJLEVBQUdBLEVBQUkwUyxFQUFheEwsT0FBUWxILElBQUssQ0FDMUMsR0FBTW1TLEdBQVVPLEVBQWExUyxHQUFHb1MsV0FBVSxHQUNwQ0MsRUFBVU0sRUFBYzNTLEdBQUdvUyxXQUFVLEVBQ3RDSixHQUFXVSxFQUFhMVMsR0FBSTJTLEVBQWMzUyxLQUN0QytTLEVBQVlaLElBQWFZLEVBQVlWLElBQ3RDUyxJQUlaLE1BQU9BLEdBR1gsUUFBU0UsR0FBZWYsRUFBbUJnQixFQUF5QkMsR0FFaEUsSUFBSyxHQURDOUksR0FBV0MsU0FBUzhJLHlCQUNqQm5ULEVBQUlpVCxFQUFnQi9MLE9BQVFsSCxFQUFJa1QsRUFBaUJoTSxPQUFRbEgsSUFDOURvSyxFQUFTZ0osWUFDTEYsRUFBaUJsVCxHQUd6QmlTLEdBQVltQixZQUNSaEosR0FJUixRQUFTaUosR0FBaUJwQixFQUFtQkMsR0FDekMsR0FBTWpMLEdBQWNpTCxFQUFtQmpMLGVBQ2pDcU0sRUFBcUJyQixFQUFrQmhMLGNBQzdDLElBQUlxTSxFQUFrQnBNLE9BQVNELEVBQVdDLE9BQ3RDLElBQUssR0FBSWxILEdBQUksRUFBR0EsRUFBSXNULEVBQWtCcE0sT0FBUWxILElBQUssQ0FDL0MsR0FBTXNHLEdBQVlnTixFQUFrQnRULEVBQzlCa1MsR0FBbUJuSSxhQUFhekQsRUFBVTdDLFdBQzNDd08sRUFBa0IzSSxnQkFDZmhELEVBQVU3QyxVQUsxQixJQUFLLEdBQUl6RCxHQUFJLEVBQUdBLEVBQUlpSCxFQUFXQyxPQUFRbEgsSUFBSyxDQUN4QyxHQUFNc0csR0FBWVcsRUFBV2pILEVBQzVCaVMsR0FBa0JzQixhQUNmak4sRUFBVTdDLFNBQ1Y2QyxFQUFVSyxXQUdsQixHQUFJc0MsRUFBYXBJLElBQUlxUixHQUFlLENBQ2hDLEdBQU1zQixHQUFVdkssRUFBYXBJLElBQUlvUixHQUMzQndCLEVBQVV4SyxFQUFhcEksSUFBSXFSLEVBQ2pDakosR0FBYVcsSUFDVHFJLEVBQ0F3QixJQUVDLEVBQUFuQixFQUFBbk8sU0FBYXFQLEVBQVNDLEtBQ25CLEVBQUFyTixFQUFBN0MsbUJBQWtCME8sSUFDbEJwQixFQUFPM1EsS0FBTStSLElBTTdCLFFBQVN5QixHQUFjekIsRUFBbUJDLEdBQ3RDLElBQUksRUFBQTlMLEVBQUE3QyxtQkFBa0IwTyxHQUNsQixNQUFPb0IsR0FDSHBCLEVBQ0FDLEVBR0hGLEdBQVdDLEVBQWFDLElBQ3pCbUIsRUFDSXBCLEVBQ0FDLEdBR1J5QixFQUNJMUIsRUFDQUMsR0FJUixRQUFTYSxHQUFZdlAsR0FDakIsTUFBSUEsR0FBS29RLFdBQWFDLEtBQUtDLGFBR3ZCdFEsRUFBSzhELFdBQVdKLFNBR2hCMUQsRUFBS3VRLFdBQ3FDLElBQW5DQyxRQUFReFEsRUFBS3VRLFVBQVVySCxRQUU3QmxKLEVBQVcyRyxXQUNxQyxJQUExQzZKLFFBQVN4USxFQUFXMkcsVUFBVXVDLFNBRXBDbEosRUFBV3lRLGNBQ3VDLElBQTVDRCxRQUFTeFEsRUFBV3lRLFlBQVl2SCxVQUsvQyxRQUFTd0gsR0FBVzFRLEdBQ2hCLFFBQUlBLEtBQ1FBLEVBQUtvUSxXQUFhQyxLQUFLTSxjQUMzQjNRLEVBQUtvUSxXQUFhQyxLQUFLQyxZQUNMLFVBQWxCdFEsRUFBS0MsV0FDSnNQLEVBQVl2UCxJQUt6QixRQUFTNFEsR0FBMkJuQyxFQUFtQkMsRUFBb0JRLEVBQXNCQyxHQUM3RixHQUFNQyxHQUFVSCxFQUNaQyxFQUNBQyxFQUVKLE9BQTZCLEtBQXpCQSxFQUFjekwsT0FDTitLLEVBQVlwSCxXQUFpQkMsYUFDakNvSCxFQUNBRCxHQUdlLElBQW5CVyxFQUFRMUwsUUFDUDBMLEVBQVEsR0FBRy9ILFdBQWlCd0osWUFBWXpCLEVBQVEsSUFDMUNlLEVBQ0gxQixFQUNBQyxJQUdKVyxFQUFxQkgsRUFBY0MsR0FBaUIsRUFDNUNWLEVBQVlwSCxXQUFpQkMsYUFDakNvSCxFQUNBRCxHQUdEZSxFQUNIZixFQUNBUyxFQUNBQyxHQUlSLFFBQVNnQixHQUFlMUIsRUFBbUJDLEdBQ3ZDLEdBQU1RLEdBQWVuSyxNQUFNc0YsS0FBS29FLEVBQVkzSyxZQUFZdkMsT0FBT21QLEdBQ3pEdkIsRUFBZ0JwSyxNQUFNc0YsS0FBS3FFLEVBQWE1SyxZQUFZdkMsT0FBT21QLEVBQ2pFLElBQUl4QixFQUFheEwsU0FBV3lMLEVBQWN6TCxPQUN0QyxNQUFPa04sR0FDSG5DLEVBQ0FDLEVBQ0FRLEVBQ0FDLEVBR1IsSUFBNEIsSUFBeEJELEVBQWF4TCxRQUF5QyxJQUF6QnlMLEVBQWN6TCxRQUN2Q3NMLEVBQWNQLEVBQWFDLEdBQzNCLE1BQVFELEdBQVlwSCxXQUFpQkMsYUFDakNvSCxFQUNBRCxFQUlaLEtBQUssR0FBSWpTLEdBQUksRUFBR0EsRUFBSTBTLEVBQWF4TCxPQUFRbEgsSUFDckMwVCxFQUNJaEIsRUFBYTFTLEdBQ2IyUyxFQUFjM1MsSUFLMUIsUUFBU3NVLEdBQXNCcEssR0FDM0IsR0FBTXFELEdBQVdsRCxTQUFTQyxjQUFjLFdBRXhDLE9BREFpRCxHQUFTcEQsVUFBWUQsRUFDZHFELEVBR0osUUFBU3NELEtBQ1owRCxZQUFZQyxLQUFLLDBCQUNqQjFSLEtBQUsyUixlQUVEM1IsS0FBSzRSLFdBQWE1UixLQUFLNlIsYUFDdkJKLFlBQVlDLEtBQUsseUJBQ2pCMVIsS0FBSzhSLGNBQWNDLEtBQU0sU0FDekJOLFlBQVlDLEtBQUssd0JBQ2pCRCxZQUFZTyxRQUNSLHFCQUNBLHdCQUNBLHlCQUdSUCxZQUFZQyxLQUFLLDJCQUNqQixJQUFNTyxHQUFZalMsS0FBSytOLFFBQ3ZCMEQsYUFBWUMsS0FBSyw2QkFDakJELFlBQVlPLFFBQ1IsaUNBQ0EsMkJBQ0EsNEJBR0osSUFBTUUsR0FBT2xTLEtBQUs0UixTQUFZNVIsS0FBSzZSLFdBQW1CN1IsSUFDdER5UixhQUFZQyxLQUFLLHlCQUNqQixJQUFNcEssR0FBZ0MsZ0JBQWQySyxHQUF5QlQsRUFBc0JTLEdBQWFBLENBUXBGLElBUEFSLFlBQVlDLEtBQUssMkJBQ2pCRCxZQUFZTyxRQUNSLDJCQUNBLHlCQUNBLDJCQUdDaFMsS0FBSzZOLFFBb0JILENBQ0g0RCxZQUFZQyxLQUFLLGdEQUNqQixJQUFNUyxHQUFRNUssU0FBU0MsY0FBYyxRQUNyQzJLLEdBQU05SyxVQUFZckgsS0FBS29TLE9BQ3ZCOUssRUFBU1csUUFBUW9LLGFBQ2JGLEVBQ0E3SyxFQUFTVyxRQUFRcUssWUFFckJiLFlBQVlDLEtBQUssb0NBQ2pCRCxZQUFZTyxRQUNSLG9DQUNBLGdEQUNBLG9DQUdKUCxZQUFZQyxLQUFLLDBCQUNqQmIsRUFDSXFCLEVBQ0E1SyxFQUFTVyxTQUVid0osWUFBWUMsS0FBSywyQkFDakJELFlBQVlPLFFBQ1IscUNBQ0EseUJBQ0EsK0JBM0NKUCxhQUFZQyxLQUFLLHNDQUNqQlEsRUFBSzdLLFVBQUwsVUFBMkJySCxLQUFLb1MsT0FBaEMsV0FDQVgsWUFBWUMsS0FBSyx5QkFDakJELFlBQVlPLFFBQ1IsOENBQ0EscUNBQ0EseUJBR0pQLFlBQVlDLEtBQUssb0NBQ2pCUSxFQUFLNUIsWUFBWWhKLEVBQVNXLFNBQzFCd0osWUFBWUMsS0FBSywyQkFDakJELFlBQVlPLFFBQ1IsMENBQ0EsbUNBQ0EsMkJBR0poUyxLQUFLNk4sU0FBVSxDQTRCbkI0RCxhQUFZQyxLQUFLLDJCQUNqQkQsWUFBWU8sUUFDUixxQkFDQSx5QkFDQSwyQkFHSmhTLEtBQUt1UyxjWDZ6QlQ1VSxPQUFPQyxlQUFlZixFQUFTLGNBQzNCOEIsT0FBTyxJQUVYOUIsRVd2NUJnQmtSLFFBL05oQixJQUFBekssR0FBQXZHLEVBQUEsR0FDQW1KLEVBQUFuSixFQUFBLEdBQ0F5VixFQUFBelYsRUFBQSxJWDRuQ0l5UyxFQUVKLFNBQWdDL1EsR0FBTyxNQUFPQSxJQUFPQSxFQUFJUixXQUFhUSxHQUFRNEMsUUFBUzVDLElBRjNDK1QsR1cxbkN0Q3JNLEdBQWUsRUFBQUQsRUFBQWpILFlBQVdVLGNBQVlDLFFYaTFDdEMsU0FBVWhELEVBQVFDLEVBQVNFLEdBRWpDLFlZbjFDQSxTQUFTMFYsR0FBR0MsRUFBR0MsR0FFWCxNQUFJRCxLQUFNQyxFQUlPLElBQU5ELEdBQWlCLElBQU5DLEdBQVcsRUFBSUQsR0FBTSxFQUFJQyxFQUdwQ0QsSUFBTUEsR0FBS0MsSUFBTUEsRUFTaEMsUUFBU0MsR0FBYUMsRUFBYUMsR0FDL0IsR0FBSUwsRUFBR0ksRUFBTUMsR0FDVCxPQUFPLENBR1gsSUFDb0IsZ0JBQWhCLEtBQU9ELEVBQVAsWUFBQXhQLEVBQU93UCxLQUNFLE9BQVRBLEdBQ2dCLGdCQUFoQixLQUFPQyxFQUFQLFlBQUF6UCxFQUFPeVAsS0FDRSxPQUFUQSxFQUVBLE9BQU8sQ0FHWCxJQUFNQyxHQUFRcFYsT0FBTytLLEtBQUttSyxHQUNwQkcsRUFBUXJWLE9BQU8rSyxLQUFLb0ssRUFFMUIsSUFBSUMsRUFBTTNPLFNBQVc0TyxFQUFNNU8sT0FDdkIsT0FBTyxDQUlYLEtBQUssR0FBSWxILEdBQUksRUFBR0EsRUFBSTZWLEVBQU0zTyxPQUFRbEgsSUFDOUIsSUFDS21CLEVBQWVqQixLQUFLMFYsRUFBTUMsRUFBTTdWLE1BQ2hDdVYsRUFBR0ksRUFBS0UsRUFBTTdWLElBQUs0VixFQUFLQyxFQUFNN1YsS0FFL0IsT0FBTyxDQUlmLFFBQU8sRVpxeUNYUyxPQUFPQyxlQUFlZixFQUFTLGNBQzNCOEIsT0FBTyxHQUdYLElBQUkwRSxHQUE0QixrQkFBWFYsU0FBb0QsZ0JBQXBCQSxRQUFPQyxTQUF3QixTQUFVbkUsR0FBTyxhQUFjQSxJQUFTLFNBQVVBLEdBQU8sTUFBT0EsSUFBeUIsa0JBQVhrRSxTQUF5QmxFLEVBQUltSCxjQUFnQmpELFFBQVVsRSxJQUFRa0UsT0FBT3ZFLFVBQVksZUFBa0JLLElZaDJDaFFKLEVBQWlCVixPQUFPUyxVQUFVQyxjWm81Q3hDeEIsR0FBUXdFLFFZMTFDT3VSLEdaODFDVCxTQUFVaFcsRUFBUUMsRUFBU0UsR0FFakMsWUFHQVksUUFBT0MsZUFBZWYsRUFBUyxjQUMzQjhCLE9BQU8sR2E5NUNYLElBQUFzVSxHQUFBbFcsRUFBQSxFQWVBWSxRQUFBK0ssS0FBQXVLLEdBQUEzTyxRQUFBLFNBQUE1RixHQUFBLFlBQUFBLEdBQUEsZUFBQUEsR0FBQWYsT0FBQUMsZUFBQWYsRUFBQTZCLEdBQUFaLFlBQUEsRUFBQUMsSUFBQSxpQkFBQWtWLEdBQUF2VSxTQWJBLEVBQUF1VSxFQUFBQywrQkFDSSxXQUNJLE1BQUksa0JBQW9COVMsUUFDYlksUUFBUUMsVUFFWixHQUFJRCxTQUFRLEtBQU0sU0FBQ0MsR0FDdEJrUyxFQUFRLElBQWtDM1MsS0FBSyxXQUMzQ0osT0FBT3dHLGlCQUFpQixxQkFBc0IzRixTYms3Q3hELFNBQVVyRSxFQUFRQyxJYzM3Q3hCLFdBQ0EsWUFBa0wsU0FBQVEsR0FBQStWLEdBQWMsR0FBQS9GLEdBQUFnRyxFQUFBQyxJQUFBRixFQUE2RCxPQUE3Q0EsR0FBQSxtQ0FBQUcsS0FBQUgsSUFBNkMvRixHQUFBK0YsRUFBWSxRQUFBcFYsR0FBQW9WLEdBQWMsR0FBQS9GLEdBQUErRixFQUFBekssV0FBb0IsYUFBQTBFLEVBQUEsTUFBQUEsRUFBdUIsTUFBSytGLE9BQUFJLHVCQUFBSixZQUFBSyxZQUFxREwsSUFBQXJMLGFBQUEzSCxPQUFBc1QsWUFBQU4sWUFBQU0sWUFBQU4sRUFBQU8sU0FBQSxHQUE0RSxVQUFBUCxPQUFBSSx1QkFBQUosWUFBQUssWUFDeGMsUUFBQW5WLEdBQUE4VSxFQUFBL0YsR0FBZ0IsS0FBS0EsT0FBQStGLElBQUEvRixFQUFBdUcsYUFBeUJ2RyxJQUFBdEYsVUFBZ0IsT0FBQXNGLFFBQUErRixFQUFBL0YsRUFBQXVHLFlBQUEsS0FDOUQsUUFBQUMsR0FBQVQsRUFBQS9GLEVBQUEvUCxHQUFrQkEsS0FBQSxHQUFBd1csSUFBYyxRQUFBdlcsR0FBQTZWLEVBQVk3VixHQUFFLENBQUUsR0FBQUEsRUFBQXVULFdBQUFDLEtBQUFNLGFBQUEsQ0FBbUMsR0FBQTBDLEdBQUF4VyxDQUFROFAsR0FBQTBHLEVBQUssSUFBQUMsR0FBQUQsRUFBQUUsU0FBa0IsYUFBQUQsR0FBQSxXQUFBRCxFQUFBNU0sYUFBQSxRQUE0RCxJQUFYNUosRUFBQXdXLEVBQUFHLGlCQUFXbkQsUUFBQXpULEVBQUFnVyxJQUFBL1YsR0FBQSxJQUFBRCxFQUFBNlcsSUFBQTVXLE9BQUErVSxXQUE0RC9VLEVBQUVBLElBQUFxVyxZQUFBQyxFQUFBdFcsRUFBQThQLEVBQUEvUCxFQUF5QkMsR0FBQWUsRUFBQThVLEVBQUFXLEVBQVMsVUFBUyxnQkFBQUMsRUFBQSxDQUF3QnpXLEVBQUFlLEVBQUE4VSxFQUFBVyxFQUFTLFVBQVMsR0FBQUEsSUFBQUssZ0JBQUEsSUFBQUwsSUFBQXpCLFdBQTBDeUIsRUFBRUEsSUFBQUgsWUFBQUMsRUFBQUUsRUFBQTFHLEVBQUEvUCxHQUF5QkMsSUFBQStVLFdBQUEvVSxFQUFBK1UsV0FBQWhVLEVBQUE4VSxFQUFBN1YsSUFBb0MsUUFBQThXLEdBQUFqQixFQUFBL0YsRUFBQS9QLEdBQWtCOFYsRUFBQS9GLEdBQUEvUCxFQUFRLFFBQUFnWCxLQUFhdFUsS0FBQXFOLEVBQUEsR0FBQTVOLEtBQWVPLEtBQUF6QixFQUFBLEdBQUFrQixLQUFlTyxLQUFBZ1UsS0FBVWhVLEtBQUFvVCxHQUFBLEVBQVUsUUFBQW1CLEdBQUFuQixFQUFBL0YsRUFBQS9QLEdBQW1COFYsRUFBQS9GLEVBQUF2RyxJQUFBdUcsRUFBQS9QLEdBQWE4VixFQUFBN1UsRUFBQXVJLElBQUF4SixFQUFBc0ksWUFBQXRJLEdBQXlCLFFBQUFrWCxHQUFBcEIsRUFBQS9GLEdBQWdCK0YsS0FBQSxFQUFPQSxFQUFBWSxFQUFBalMsS0FBQXNMLEdBQVksUUFBQXFGLEdBQUFVLEVBQUEvRixHQUFnQitGLEtBQUFTLEVBQUF4RyxFQUFBLFNBQUFBLEdBQXFCLE1BQUFzRixHQUFBUyxFQUFBL0YsS0FBZ0IsUUFBQXNGLEdBQUFTLEVBQUEvRixHQUFnQixHQUFBK0YsTUFBQS9GLEVBQUFvSCxhQUFBLENBQXlCcEgsRUFBQW9ILGNBQUEsQ0FBa0IsUUFBQW5YLEdBQUEsRUFBWUEsRUFBQThWLEVBQUFZLEVBQUE1UCxPQUFhOUcsSUFBQThWLEVBQUFZLEVBQUExVyxHQUFBK1AsSUFBZSxRQUFBcUgsR0FBQXRCLEVBQUEvRixHQUFnQixHQUFBL1AsS0FBNEMsS0FBbkN1VyxFQUFBeEcsRUFBQSxTQUFBK0YsR0FBZ0IsTUFBQTlWLEdBQUF5RSxLQUFBcVIsS0FBbUIvRixFQUFBLEVBQVFBLEVBQUEvUCxFQUFBOEcsT0FBV2lKLElBQUEsQ0FBSyxHQUFBOVAsR0FBQUQsRUFBQStQLEVBQVcsS0FBQTlQLEVBQUFvWCxXQUFBdkIsRUFBQXdCLGtCQUFBclgsR0FBQXNYLEVBQUF6QixFQUFBN1YsSUFDdDFCLFFBQUF1WCxHQUFBMUIsRUFBQS9GLEdBQWdCLEdBQUEvUCxLQUE0QyxLQUFuQ3VXLEVBQUF4RyxFQUFBLFNBQUErRixHQUFnQixNQUFBOVYsR0FBQXlFLEtBQUFxUixLQUFtQi9GLEVBQUEsRUFBUUEsRUFBQS9QLEVBQUE4RyxPQUFXaUosSUFBQSxDQUFLLEdBQUE5UCxHQUFBRCxFQUFBK1AsRUFBVyxLQUFBOVAsRUFBQW9YLFlBQUF2QixFQUFBMkIscUJBQUF4WCxJQUMvRixRQUFBeVgsR0FBQTVCLEVBQUEvRixFQUFBL1AsR0FBa0JBLE9BQVMsSUFBQUMsR0FBQUQsRUFBQWtYLEdBQUEsR0FBQVYsS0FBQUMsRUFBQXpXLEVBQUFKLEdBQUEsU0FBQW1RLEdBQXNDLE1BQUF3SCxHQUFBekIsRUFBQS9GLElBQWMyRyxJQUF1WixJQUFqWkgsRUFBQXhHLEVBQUEsU0FBQUEsR0FBZ0IsWUFBQUEsRUFBQTRHLFdBQUEsV0FBQTVHLEVBQUFsRyxhQUFBLFFBQTJELEdBQUE3SixHQUFBK1AsRUFBQTZHLE1BQWU1VyxhQUFBeVQsUUFBQXpULEVBQUFrVyx1QkFBQSxFQUFBbFcsRUFBQTJYLGtCQUFBLEdBQXNFM1gsR0FBQSxhQUFBQSxFQUFBNFgsV0FBQTVYLEVBQUE2WCwwQkFBQSxFQUFBOUgsRUFBQXpHLGlCQUFBLGtCQUFnRyxHQUFBdEosR0FBQStQLEVBQUE2RyxNQUFlLEtBQUE1VyxFQUFBNlgseUJBQUEsQ0FBZ0M3WCxFQUFBNlgsMEJBQUEsQ0FBOEIsSUFBQW5CLEdBQUEsR0FBQUYsS0FBQXZXLEVBQWlCeVcsR0FBQXBMLE9BQUF0TCxHQUFZMFgsRUFBQTVCLEVBQUE5VixHQUFPa1gsRUFBQVIsRUFBQTlXLEVBQUE2VyxXQUFhQyxHQUFBalMsS0FBQXNMLElBQWU5UCxHQUFJNlYsSUFBQSxJQUFBL0YsRUFBQSxFQUFlQSxFQUNyZjJHLEVBQUE1UCxPQUFTaUosSUFBQXNGLEVBQUFTLEVBQUFZLEVBQUEzRyxHQUFjLEtBQUFBLEVBQUEsRUFBUUEsRUFBQTJHLEVBQUE1UCxPQUFXaUosSUFBQTBHLEVBQUFDLEVBQUEzRyxJQUMxQyxRQUFBd0gsR0FBQXpCLEVBQUEvRixHQUFnQixZQUFBQSxFQUFBc0gsV0FBQSxDQUEwQixHQUFBclgsR0FBQStQLEVBQUErSCxhQUFzQixLQUFBOVgsRUFBQStYLGFBQUEvWCxFQUFBa1csdUJBQUFsVyxFQUFBMlgsb0JBQUEzWCxFQUFBOFYsRUFBQS9GLEVBQUF0UCxJQUFBc1AsRUFBQTRHLFlBQUEsQ0FBeUYzVyxFQUFBZ1ksa0JBQUF2VCxLQUFBc0wsRUFBNEIsSUFBQTlQLEdBQUFELEVBQUFzSSxXQUFvQixLQUFJLElBQUksTUFBQXJJLEtBQUE4UCxFQUFBLEtBQUFrSSxPQUFBLDhFQUF3RyxRQUFRalksRUFBQWdZLGtCQUFBRSxPQUEyQixNQUFBQyxHQUFTLEtBQUFwSSxHQUFBc0gsV0FBQSxFQUFBYyxFQUEyRCxHQUFuQ3BJLEVBQUFzSCxXQUFBLEVBQWV0SCxFQUFBcUksZ0JBQUFwWSxFQUFvQkEsRUFBQXFZLHlCQUFBLElBQUFyWSxJQUFBc1ksbUJBQUFyWSxFQUFBLEVBQTZEQSxFQUFBRCxFQUFBOEcsT0FBVzdHLElBQUEsQ0FBSyxHQUFBd1csR0FBQXpXLEVBQUFDLEdBQzdleVcsRUFBQTNHLEVBQUFsRyxhQUFBNE0sRUFBb0IsUUFBQUMsR0FBQVosRUFBQXVDLHlCQUFBdEksRUFBQTBHLEVBQUEsS0FBQUMsRUFBQSxNQUFzRGhXLEVBQUFxUCxJQUFBK0YsRUFBQXdCLGtCQUFBdkgsS0FDbUgsUUFBQXdJLEdBQUF6QyxFQUFBL0YsR0FBZ0JyTixLQUFBMUMsRUFBQThWLEVBQVNwVCxLQUFBcU4sSUFBU3JOLEtBQUFvVCxNQUFBLEdBQWM0QixFQUFBaFYsS0FBQTFDLEVBQUEwQyxLQUFBcU4sR0FBaUIsWUFBQXJOLEtBQUFxTixFQUFBNkgsYUFBQWxWLEtBQUFvVCxFQUFBLEdBQUEwQyxrQkFBQTlWLEtBQUFnVSxFQUFBNUosS0FBQXBLLFlBQUFvVCxFQUFBMkMsUUFBQS9WLEtBQUFxTixHQUFzRzJJLFdBQUEsRUFBQUMsU0FBQSxLQUEyQixRQUFBQyxHQUFBOUMsR0FBY0EsU0FBQStDLGFBQXVNLFFBQUFDLEtBQWMsR0FBQWhELEdBQUFwVCxJQUFXQSxNQUFBb1QsRUFBQXBULEtBQUFxTixNQUFBLEdBQXFCck4sS0FBQWdVLEVBQUEsR0FBQWhULFNBQUEsU0FBQXFNLEdBQStCK0YsSUFBQS9GLEVBQU0rRixFQUFBL0YsS0FBQStGLEVBQUEvRixLQUFjLFFBQUFnSixHQUFBakQsR0FBYyxHQUFBQSxFQUFBL0YsRUFBQSxLQUFBa0ksT0FBQSxvQkFBd0NuQyxHQUFBL0YsTUFBQSxHQUFXK0YsYUFBQSxJQUFrQixRQUFBa0QsR0FBQWxELEdBQWNwVCxLQUFBdVcsR0FBQSxFQUFVdlcsS0FBQTFDLEVBQUE4VixFQUFTcFQsS0FBQXRDLEVBQUEsR0FBQStCLEtBQWVPLEtBQUE3QyxFQUFBLFNBQUFpVyxHQUFtQixNQUFBQSxNQUFZcFQsS0FBQXdXLEdBQUEsRUFBVXhXLEtBQUEzQyxLQUFVMkMsS0FBQXFVLEVBQUEsR0FBQXdCLEdBQUF6QyxFQUFBN0wsVUFHdHhCLFFBQUFrUCxHQUFBckQsR0FBZSxRQUFBQSxFQUFBb0QsRUFBQSxDQUFhcEQsRUFBQW9ELEdBQUEsQ0FBTyxRQUFBbkosR0FBQStGLEVBQUEvVixFQUFBQyxLQUFBQyxFQUFBLEdBQUFrQyxLQUFBc1UsRUFBQSxFQUFpQ0EsRUFBQTFHLEVBQUFqSixPQUFXMlAsSUFBQXhXLEVBQUF1SixJQUFBdUcsRUFBQTBHLEdBQUFFLGFBQTBKLEtBQTdIZSxFQUFBNUIsRUFBQTlWLEVBQUFpSyxVQUFnQnJLLEVBQUEsU0FBQW1RLEdBQWMsWUFBQUEsRUFBQXNILFdBQUEsQ0FBMEIsR0FBQVosR0FBQTFHLEVBQUE0RyxVQUFBRCxFQUFBelcsRUFBQVEsSUFBQWdXLEVBQTZCQyxLQUFBalMsS0FBQXNMLEdBQUErRixFQUFBOVYsRUFBQStQLEVBQUF0UCxJQUFBZ1csSUFBQXpXLEVBQUF5RSxLQUFBc0wsT0FBd0MwRyxFQUFBLEVBQVFBLEVBQUF6VyxFQUFBOEcsT0FBVzJQLElBQUFjLEVBQUF6QixFQUFBOVYsSUFBQXlXLEdBQWdCLE1BQUssRUFBQTFHLEVBQUFqSixRQUFXLENBQUUsT0FBQTRQLEdBQUEzRyxFQUFBcUosUUFBQTNDLEVBQUFDLEVBQUFDLFVBQUFELEVBQUF6VyxFQUFBUSxJQUFBaVcsRUFBQUMsV0FBQXdCLEVBQUEsRUFBMkRBLEVBQUF6QixFQUFBNVAsT0FBV3FSLElBQUFaLEVBQUF6QixFQUFBOVYsRUFBQTBXLEVBQUF5QixLQUFnQjFCLEVBQUFYLEVBQUExVixFQUFBSyxJQUFBZ1csS0FBQXNDLEVBQUF0QyxLQUtsUSxRQUFBNEMsR0FBQXZELEVBQUEvRixFQUFBL1AsR0FBa0IsUUFBQUMsR0FBQThQLEdBQWMsZ0JBQUEvUCxHQUFtQixPQUFBeVcsTUFBQXhXLEVBQUEsRUFBaUJBLEVBQUF5SSxVQUFBNUIsU0FBbUI3RyxFQUFBd1csRUFBQXhXLEVBQUEsR0FBQXlJLFVBQUF6SSxFQUF3QixRQUFBQSxNQUFBeVcsS0FBQTdXLEVBQUEsRUFBc0JBLEVBQUE0VyxFQUFBM1AsT0FBV2pILElBQUEsQ0FBSyxHQUFBeVosR0FBQTdDLEVBQUE1VyxFQUFpRCxJQUF0Q3laLFlBQUFDLFVBQUE3WSxFQUFBNFksSUFBQTVDLEVBQUFqUyxLQUFBNlUsR0FBc0NBLFlBQUFFLGtCQUFBLElBQUFGLElBQUF0RSxXQUFvRHNFLEVBQUVBLElBQUFoRCxZQUFBclcsRUFBQXdFLEtBQUE2VSxPQUEwQnJaLEdBQUF3RSxLQUFBNlUsR0FBK0IsSUFBaEJ2SixFQUFBOUIsTUFBQXZMLEtBQUErVCxHQUFnQkEsRUFBQSxFQUFRQSxFQUFBQyxFQUFBNVAsT0FBVzJQLElBQUFlLEVBQUExQixFQUFBWSxFQUFBRCxHQUFjLElBQUEvVixFQUFBZ0MsTUFBQSxJQUFBK1QsRUFBQSxFQUFtQkEsRUFBQXhXLEVBQUE2RyxPQUFXMlAsS0FBQUMsRUFBQXpXLEVBQUF3VyxhQUFBOEMsVUFBQW5DLEVBQUF0QixFQUFBWSxJQUF5QzFXLEVBQUF5WixJQUFBMUosRUFBQTJKLFFBQUF6WixFQUFBRCxFQUFBeVosSUFBd0J6WixFQUFBMlosU0FBQTVKLEVBQUE0SixPQUFBMVosRUFBQUQsRUFBQTJaLFNBSWxiLFFBQUFDLEdBQUE5RCxHQUF1QyxRQUFBOVYsR0FBQStQLEdBQWMsZ0JBQUEwRyxHQUFtQixPQUFBelcsTUFBQUMsRUFBQSxFQUFpQkEsRUFBQXlJLFVBQUE1QixTQUFtQjdHLEVBQUFELEVBQUFDLEVBQUEsR0FBQXlJLFVBQUF6SSxFQUF3QixRQUFBQSxNQUFBNFosS0FBQVgsRUFBQSxFQUFzQkEsRUFBQWxaLEVBQUE4RyxPQUFXb1MsSUFBQSxDQUFLLEdBQUFyWixHQUFBRyxFQUFBa1osRUFBaUQsSUFBdENyWixZQUFBMFosVUFBQTdZLEVBQUFiLElBQUFnYSxFQUFBcFYsS0FBQTVFLEdBQXNDQSxZQUFBMlosa0JBQUEsSUFBQTNaLElBQUFtVixXQUFvRG5WLEVBQUVBLElBQUF5VyxZQUFBclcsRUFBQXdFLEtBQUE1RSxPQUEwQkksR0FBQXdFLEtBQUE1RSxHQUErQixJQUFoQmtRLEVBQUE5QixNQUFBdkwsS0FBQTFDLEdBQWdCQSxFQUFBLEVBQVFBLEVBQUE2WixFQUFBL1MsT0FBVzlHLElBQUF3WCxFQUFBMUIsRUFBQStELEVBQUE3WixHQUFjLElBQUFVLEVBQUFnQyxNQUFBLElBQUExQyxFQUFBLEVBQW1CQSxFQUFBQyxFQUFBNkcsT0FBVzlHLEtBQUE2WixFQUFBNVosRUFBQUQsYUFBQXVaLFVBQUFuQyxFQUFBdEIsRUFBQStELElBQTFYLEdBQUE5SixHQUFBd0osUUFBQXpZLFNBQW1hZ1osS0FBQS9KLEVBQUFnSyxPQUFBL1osRUFBQThaLElBQW1CQSxJQUFBL0osRUFBQWlLLE1BQUFoYSxFQUFBaWEsSUFBbUJDLEdBQUFuRCxFQUFBaEgsRUFBQSx1QkFBQUEsR0FBa0MsT0FBQTBHLE1BQ3BzQnpXLEVBQUEsRUFBT0EsRUFBQTBJLFVBQUE1QixTQUFtQjlHLEVBQUF5VyxFQUFBelcsRUFBQSxHQUFBMEksVUFBQTFJLEVBQXdCLFFBQUFBLE1BQUFDLEtBQUE0WixFQUFBLEVBQXNCQSxFQUFBcEQsRUFBQTNQLE9BQVcrUyxJQUFBLENBQUssR0FBQVgsR0FBQXpDLEVBQUFvRCxFQUFpRCxJQUF0Q1gsWUFBQUssVUFBQTdZLEVBQUF3WSxJQUFBalosRUFBQXdFLEtBQUF5VSxHQUFzQ0EsWUFBQU0sa0JBQUEsSUFBQU4sSUFBQWxFLFdBQW9Ea0UsRUFBRUEsSUFBQTVDLFlBQUF0VyxFQUFBeUUsS0FBQXlVLE9BQTBCbFosR0FBQXlFLEtBQUF5VSxHQUEwQyxJQUEzQlcsRUFBQW5aLEVBQUFnQyxNQUFVd1gsRUFBQWpNLE1BQUF2TCxLQUFBK1QsR0FBaUJBLEVBQUEsRUFBUUEsRUFBQXhXLEVBQUE2RyxPQUFXMlAsSUFBQWUsRUFBQTFCLEVBQUE3VixFQUFBd1csR0FBYyxJQUFBb0QsRUFBQSxJQUFBckMsRUFBQTFCLEVBQUFwVCxNQUFBK1QsRUFBQSxFQUF1QkEsRUFBQXpXLEVBQUE4RyxPQUFXMlAsS0FBQXhXLEVBQUFELEVBQUF5VyxhQUFBOEMsVUFBQW5DLEVBQUF0QixFQUFBN1YsS0FBMENrYSxHQUFBcEQsRUFBQWhILEVBQUEsb0JBQTRCLEdBQUFBLEdBQUFyUCxFQUFBZ0MsS0FBY3lYLEdBQUFyYSxLQUFBNEMsTUFBY3FOLEdBQUF5SCxFQUFBMUIsRUFBQXBULFFBckIzWixHQUFBK1csR0FBQSxpQkFBdUIxRCxFQUFBLEdBQUFTLEtBQUEsbUhBQUEzSyxNQUFBLEtBT3FFbUwsR0FBQWxXLFVBQUF3VyxrQkFBQSxTQUFBeEIsR0FBMEMsR0FBQS9GLEdBQUErRixFQUFBc0MsZUFBd0JySSxHQUFBdUgsbUJBQUF2SCxFQUFBdUgsa0JBQUF4WCxLQUFBZ1csSUFBa0RrQixFQUFBbFcsVUFBQTJXLHFCQUFBLFNBQUEzQixHQUE2QyxHQUFBL0YsR0FBQStGLEVBQUFzQyxlQUF3QnJJLEdBQUEwSCxzQkFBQTFILEVBQUEwSCxxQkFBQTNYLEtBQUFnVyxJQUNsU2tCLEVBQUFsVyxVQUFBdVgseUJBQUEsU0FBQXZDLEVBQUEvRixFQUFBL1AsRUFBQUMsRUFBQXdXLEdBQXlELEdBQUFDLEdBQUFaLEVBQUFzQyxlQUF3QjFCLEdBQUEyQiwyQkFBQSxFQUFBM0IsRUFBQTRCLG1CQUFBOEIsUUFBQXJLLElBQUEyRyxFQUFBMkIseUJBQUF2WSxLQUFBZ1csRUFBQS9GLEVBQUEvUCxFQUFBQyxFQUFBd1csSUFBa1Y4QixFQUFBelgsVUFBQTRWLEVBQUEsU0FBQVosR0FBMEIsR0FBQS9GLEdBQUFyTixLQUFBcU4sRUFBQTZILFVBQW1FLEtBQTNDLGdCQUFBN0gsR0FBQSxhQUFBQSxHQUFBNkksRUFBQWxXLE1BQTJDcU4sRUFBQSxFQUFRQSxFQUFBK0YsRUFBQWhQLE9BQVdpSixJQUFBLE9BQUEvUCxHQUFBOFYsRUFBQS9GLEdBQUFzSyxXQUFBcGEsRUFBQSxFQUFrQ0EsRUFBQUQsRUFBQThHLE9BQVc3RyxJQUFBeVgsRUFBQWhWLEtBQUExQyxJQUFBQyxLQUNoa0IrWSxFQUFBbFksVUFBQWtDLE9BQUEsU0FBQThTLEVBQUEvRixHQUFpQyxHQUFBL1AsR0FBQTBDLElBQVcsTUFBQXFOLFlBQUF1SyxXQUFBLFNBQUFqUyxXQUFBLGlEQUFrRyxLQUFBdEksRUFBQStWLEdBQUEsU0FBQXlFLGFBQUEscUJBQUF6RSxFQUFBLGtCQUF5RSxJQUFBcFQsS0FBQTFDLEVBQUErUCxFQUFBdFAsSUFBQXFWLEdBQUEsS0FBQW1DLE9BQUEsK0JBQUFuQyxFQUFBLDhCQUErRixJQUFBcFQsS0FBQXVXLEVBQUEsS0FBQWhCLE9BQUEsNkNBQW9FdlYsTUFBQXVXLEdBQUEsQ0FBVSxJQUFBaFosR0FBQXdXLEVBQUFDLEVBQUF5QixFQUFBMEIsQ0FBYyxLQUFJLEdBQUFYLEdBQUEsU0FBQXBELEdBQWtCLEdBQUEvRixHQUFBbFEsRUFBQWlXLEVBQVcsYUFBQS9GLGlCQUFBdUssV0FBQSxLQUFBckMsT0FBQSxRQUFBbkMsRUFBQSxpQ0FDbmIsT0FBQS9GLElBQVNsUSxFQUFBa1EsRUFBQWpQLFNBQWUsTUFBQWpCLFlBQUFRLFNBQUEsU0FBQWdJLFdBQUEsK0RBQThHcEksR0FBQWlaLEVBQUEscUJBQXlCekMsRUFBQXlDLEVBQUEsd0JBQTRCeEMsRUFBQXdDLEVBQUEsbUJBQXVCZixFQUFBZSxFQUFBLDRCQUFnQ1csRUFBQTlKLEVBQUF1SSx1QkFBMkIsTUFBQWdCLEdBQVMsT0FBTyxRQUFRNVcsS0FBQXVXLEdBQUEsRUFBVWxKLEdBQUc0RyxVQUFBYixFQUFBeE4sWUFBQXlILEVBQUF1SCxrQkFBQXJYLEVBQUF3WCxxQkFBQWhCLEVBQUErRCxnQkFBQTlELEVBQUEyQix5QkFBQUYsRUFBQUcsbUJBQUF1QixFQUFBN0Isc0JBQTZKZixFQUFBdlUsS0FBQTFDLEVBQUE4VixFQUFBL0YsR0FBZXJOLEtBQUEzQyxFQUFBMEUsS0FBQXNMLEdBQWVyTixLQUFBd1csSUFDN2V4VyxLQUFBd1csR0FBQSxFQUFBeFcsS0FBQTdDLEVBQUEsV0FBNkIsTUFBQXNaLEdBQUFuWixPQUFpQmdaLEVBQUFsWSxVQUFBbEIsRUFBQSxTQUFBa1csR0FBMEI0QixFQUFBaFYsS0FBQTFDLEVBQUE4VixJQUN4RWtELEVBQUFsWSxVQUFBTCxJQUFBLFNBQUFxVixHQUE0QixHQUFBQSxFQUFBcFQsS0FBQTFDLEVBQUErUCxFQUFBdFAsSUFBQXFWLEdBQUEsTUFBQUEsR0FBQXhOLGFBQTJDMFEsRUFBQWxZLFVBQUEyWixZQUFBLFNBQUEzRSxHQUFvQyxJQUFBL1YsRUFBQStWLEdBQUEsTUFBQXBTLFNBQUFnWCxPQUFBLEdBQUFILGFBQUEsSUFBQXpFLEVBQUEseUNBQStGLElBQUEvRixHQUFBck4sS0FBQXRDLEVBQUFLLElBQUFxVixFQUFvQixPQUFBL0YsS0FBQTJHLEdBQWdCM0csRUFBQSxHQUFBK0ksR0FBU3BXLEtBQUF0QyxFQUFBb0osSUFBQXNNLEVBQUEvRixHQUFnQnJOLEtBQUExQyxFQUFBK1AsRUFBQXRQLElBQUFxVixLQUFBcFQsS0FBQTNDLEVBQUE0YSxLQUFBLFNBQUE1SyxHQUEwQyxNQUFBQSxHQUFBNEcsWUFBQWIsS0FBdUJpRCxFQUFBaEosR0FBUUEsRUFBQTJHLElBQVlzQyxFQUFBbFksVUFBQWtXLEVBQUEsU0FBQWxCLEdBQTBCOEMsRUFBQWxXLEtBQUFxVSxFQUFVLElBQUFoSCxHQUFBck4sS0FBQTdDLENBQWE2QyxNQUFBN0MsRUFBQSxTQUFBRyxHQUFtQixNQUFBOFYsR0FBQSxXQUFvQixNQUFBL0YsR0FBQS9QLE9BQWdCOEMsT0FBQThYLHNCQUFBNUIsRUFDcGNBLEVBQUFsWSxVQUFBa0MsT0FBQWdXLEVBQUFsWSxVQUFBa0MsT0FBc0NnVyxFQUFBbFksVUFBQStaLFFBQUE3QixFQUFBbFksVUFBQWxCLEVBQWtDb1osRUFBQWxZLFVBQUFMLElBQUF1WSxFQUFBbFksVUFBQUwsSUFBZ0N1WSxFQUFBbFksVUFBQTJaLFlBQUF6QixFQUFBbFksVUFBQTJaLFlBQWdEekIsRUFBQWxZLFVBQUFnYSwwQkFBQTlCLEVBQUFsWSxVQUFBa1csQ0FBb0QsSUFBQStELEdBQUFqWSxPQUFBcVQsU0FBQXJWLFVBQUFvSixjQUFBOFEsRUFBQWxZLE9BQUFxVCxTQUFBclYsVUFBQW1hLGdCQUFBQyxFQUFBcFksT0FBQXFULFNBQUFyVixVQUFBcWEsV0FBQUMsRUFBQXRZLE9BQUFxVCxTQUFBclYsVUFBQTRZLFFBQUEyQixFQUFBdlksT0FBQXFULFNBQUFyVixVQUFBNlksT0FBQTJCLEVBQUF4WSxPQUFBMFcsaUJBQUExWSxVQUFBNFksUUFBQTZCLEVBQUF6WSxPQUFBMFcsaUJBQUExWSxVQUFBNlksT0FBQTZCLEVBQUExWSxPQUFBMlEsS0FBQTNTLFVBQUFrUixVQUFBeUosRUFBQTNZLE9BQUEyUSxLQUFBM1MsVUFBQWtTLFlBQUEwSSxFQUFBNVksT0FBQTJRLEtBQUEzUyxVQUFBaVUsYUFBQTRHLEVBQUE3WSxPQUFBMlEsS0FBQTNTLFVBQUFtVCxZQUFBMkgsRUFBQTlZLE9BQUEyUSxLQUFBM1MsVUFBQTRKLGFBQUE2RSxFQUFBbFAsT0FBQXdiLHlCQUFBL1ksT0FBQTJRLEtBQUEzUyxVQUM1TSxlQUFBZ2IsRUFBQWhaLE9BQUF5VyxRQUFBelksVUFBQTBULGFBQUF1SCxFQUFBMWIsT0FBQXdiLHlCQUFBL1ksT0FBQXlXLFFBQUF6WSxVQUFBLGFBQUFrYixFQUFBbFosT0FBQXlXLFFBQUF6WSxVQUFBK0ksYUFBQW9TLEVBQUFuWixPQUFBeVcsUUFBQXpZLFVBQUFxUyxhQUFBK0ksRUFBQXBaLE9BQUF5VyxRQUFBelksVUFBQW9JLGdCQUFBaVQsRUFBQXJaLE9BQUF5VyxRQUFBelksVUFBQXNiLGVBQUFDLEVBQUF2WixPQUFBeVcsUUFBQXpZLFVBQUF3YixlQUFBQyxFQUFBelosT0FBQXlXLFFBQUF6WSxVQUFBMGIsa0JBQUFDLEVBQUEzWixPQUFBeVcsUUFBQXpZLFVBQUE0YixzQkFBQUMsRUFBQTdaLE9BQUF5VyxRQUFBelksVUFBQThiLG1CQUFBQyxFQUFBL1osT0FBQXlXLFFBQUF6WSxVQUFBNFksUUFDQW9ELEVBQUFoYSxPQUFBeVcsUUFBQXpZLFVBQUE2WSxPQUFBRyxFQUFBaFgsT0FBQXlXLFFBQUF6WSxVQUFBaVosT0FBQUUsRUFBQW5YLE9BQUF5VyxRQUFBelksVUFBQWtaLE1BQUFFLEVBQUFwWCxPQUFBeVcsUUFBQXpZLFVBQUFpYyxZQUFBNUMsRUFBQXJYLE9BQUF5VyxRQUFBelksVUFBQWtjLE9BQUFDLEVBQUFuYSxPQUFBNk8sWUFBQXVMLEdBQUE3YyxPQUFBd2IseUJBQUEvWSxPQUFBNk8sWUFBQTdRLFVBQUEsYUFBQXFjLEdBQUFyYSxPQUFBNk8sWUFBQTdRLFVBQUE0YixzQkFBQVUsR0FBQXRhLE9BQUE2TyxZQUFBN1EsVUFBQThiLG1CQW9CQVMsR0FBQXZhLE9BQUFDLGNBQTRCLEtBQUFzYSxPQUFBQyxlQUFBLGtCQUFBRCxJQUFBcmEsUUFBQSxrQkFBQXFhLElBQUE1YyxJQUFBLENBQStFLEdBQUE4YyxJQUFBLEdBQUF2RyxJQXBCa1IsV0FBYyxHQUFBbEIsR0FBQXlILEVBQVF6YSxRQUFBNk8sWUFBQSxXQUE4QixRQUFBNUIsS0FBYSxHQUFBQSxHQUFBck4sS0FBQTRGLFlBQUFySSxFQUFBNlYsRUFBQTdVLEVBQUFSLElBQUFzUCxFQUFvQyxLQUFBOVAsRUFBQSxLQUFBZ1ksT0FBQSxpRkFBb0csSUFBQXhCLEdBQUF4VyxFQUFBK1gsaUJBQTBCLEtBQUF2QixFQUFBM1AsT0FBQSxNQUFBMlAsR0FBQXNFLEVBQUFqYixLQUFBbUssU0FBQWhLLEVBQUEwVyxXQUFBdFcsT0FBQXdPLGVBQUE0SCxFQUFBMUcsRUFBQWpQLFdBQUEyVixFQUFBWSxXQUFBLEVBQUFaLEVBQUEyQixnQkFBQW5ZLEVBQUFvVixFQUFBUyxFQUFBVyxJQUFvSSxJQUFBeFcsR0FBQXdXLEVBQUEzUCxPQUFBLEVBQUE0UCxFQUFBRCxFQUFBeFcsRUFBd0IsSUFBQXlXLElBQUErQyxFQUFBLEtBQUF4QixPQUFBLDJHQUN6c0IsT0FBbkR4QixHQUFBeFcsR0FBQXdaLEVBQU9wWixPQUFBd08sZUFBQTZILEVBQUEzRyxFQUFBalAsV0FBcUN1VSxFQUFBUyxFQUFBWSxHQUFPQSxFQUF1SSxNQUE5SDNHLEdBQUFqUCxVQUFBbWMsRUFBQW5jLFVBQXlCVCxPQUFBQyxlQUFBeVAsRUFBQWpQLFVBQUEsZUFBaURRLFVBQUEsRUFBQWYsY0FBQSxFQUFBQyxZQUFBLEVBQUFhLE1BQUEwTyxJQUFvREEsUUFBb2UsV0FBYyxHQUFBK0YsR0FBQXlILEVBQVF4RyxHQUFBWixTQUFBclYsVUFBQSx5QkFBQWlQLEdBQWlELEdBQUFyTixLQUFBaVYsaUJBQUEsQ0FBMEIsR0FBQTNYLEdBQUE4VixFQUFBL0YsRUFBQXRQLElBQUFzUCxFQUFpQixJQUFBL1AsRUFBQSxVQUFBQSxHQUFBc0ksWUFBc0QsTUFBeEJ5SCxHQUFBZ0wsRUFBQWpiLEtBQUE0QyxLQUFBcU4sR0FBaUJzRixFQUFBUyxFQUFBL0YsR0FBT0EsSUFBV2dILEVBQUFaLFNBQUFyVixVQUFBLHNCQUFBaVAsRUFBQS9QLEdBQXdHLE1BQXhEK1AsR0FBQW1MLEVBQUFwYixLQUFBNEMsS0FBQXFOLEVBQUEvUCxHQUFvQjBDLEtBQUFpVixpQkFBQUQsRUFBQTVCLEVBQUEvRixHQUFBcUYsRUFBQVUsRUFBQS9GLEdBQW9DQSxJQUFXZ0gsRUFBQVosU0FBQXJWLFVBQUEsMkJBQUFpUCxFQUFBL1AsR0FBcUQsR0FBQTBDLEtBQUFpVixtQkFBQSxPQUFBNUgsR0FBQSxpQ0FBQUEsR0FBQSxDQUEwRSxHQUFBOVAsR0FBQTZWLEVBQUEvRixFQUFBdFAsSUFBQVQsRUFBaUIsSUFBQUMsRUFBQSxVQUFBQSxHQUFBcUksWUFBd0QsTUFBMUJ5SCxHQUFBaUwsRUFBQWxiLEtBQUE0QyxLQUFBcU4sRUFBQS9QLEdBQW1CcVYsRUFBQVMsRUFBQS9GLEdBQU9BLElBQzVvQ3NKLEVBQUF2RCxFQUFBSyxTQUFBclYsV0FBd0IyWSxFQUFBMkIsRUFBQXpCLE9BQUEwQixPQWtCeUdoQyxFQUFBa0UsR0FBQS9ELGlCQUFBMVksV0FBZ0MyWSxFQUFBNkIsRUFBQTNCLE9BQUE0QixJQWxCdkgsV0FBc0IsUUFBQXhMLEtBQUE5UCxHQUFnQkksT0FBQUMsZUFBQXlQLEVBQUEsZUFBdUN2UCxXQUFBUCxFQUFBTyxXQUFBRCxjQUFBLEVBQUFFLElBQUFSLEVBQUFRLElBQUErSSxJQUFBLFNBQUF1RyxHQUFrRSxHQUFBck4sS0FBQThRLFdBQUFDLEtBQUFDLFVBQUF6VCxFQUFBdUosSUFBQTFKLEtBQUE0QyxLQUFBcU4sT0FBcUQsQ0FBSyxHQUFBMEcsT0FBQSxFQUFhLElBQUEvVCxLQUFBc1MsV0FBQSxDQUFvQixHQUFBaFYsR0FBQTBDLEtBQUF3RSxXQUFBMlMsRUFBQTdaLEVBQUE4RyxNQUFpQyxNQUFBK1MsR0FBQW5aLEVBQUFnQyxNQUFBLE9BQUErVCxHQUFBdE8sTUFBQTBSLEdBQUFYLEVBQUEsRUFBdUNBLEVBQUFXLEVBQUlYLElBQUF6QyxFQUFBeUMsR0FBQWxaLEVBQUFrWixHQUFpQyxHQUFuQmpaLEVBQUF1SixJQUFBMUosS0FBQTRDLEtBQUFxTixHQUFtQjBHLEVBQUEsSUFBQTFHLEVBQUEsRUFBYUEsRUFBQTBHLEVBQUEzUCxPQUFXaUosSUFBQXlILEVBQUExQixFQUFBVyxFQUFBMUcsUUFBalcsR0FBQStGLEdBQUF5SCxFQUFtWHhHLEdBQUF0RCxLQUFBM1MsVUFBQSx3QkFBQWlQLEVBQUE5UCxHQUE4QyxHQUFBOFAsWUFBQXlKLGtCQUFBLENBQWtDLEdBQUEvQyxHQUFBdE8sTUFBQXJILFVBQUF1SSxNQUFBNEUsTUFBQThCLEVBQUE3SSxXQUN4ZSxJQUFuQjZJLEVBQUEyTCxFQUFBNWIsS0FBQTRDLEtBQUFxTixFQUFBOVAsR0FBbUJTLEVBQUFnQyxNQUFBLElBQUF6QyxFQUFBLEVBQW1CQSxFQUFBd1csRUFBQTNQLE9BQVc3RyxJQUFBbVgsRUFBQXRCLEVBQUFXLEVBQUF4VyxHQUFjLE9BQUE4UCxHQUE2RCxNQUFwRDBHLEdBQUEvVixFQUFBcVAsR0FBTzlQLEVBQUF5YixFQUFBNWIsS0FBQTRDLEtBQUFxTixFQUFBOVAsR0FBbUJ3VyxHQUFBZSxFQUFBMUIsRUFBQS9GLEdBQVVyUCxFQUFBZ0MsT0FBQTBVLEVBQUF0QixFQUFBL0YsR0FBZ0I5UCxJQUFXOFcsRUFBQXRELEtBQUEzUyxVQUFBLHVCQUFBaVAsR0FBMkMsR0FBQUEsWUFBQXlKLGtCQUFBLENBQWtDLEdBQUF4WixHQUFBbUksTUFBQXJILFVBQUF1SSxNQUFBNEUsTUFBQThCLEVBQUE3SSxXQUFpRSxJQUFqQjZJLEVBQUEwTCxFQUFBM2IsS0FBQTRDLEtBQUFxTixHQUFpQnJQLEVBQUFnQyxNQUFBLE9BQUErVCxHQUFBLEVBQXVCQSxFQUFBelcsRUFBQThHLE9BQVcyUCxJQUFBVyxFQUFBdEIsRUFBQTlWLEVBQUF5VyxHQUFjLE9BQUExRyxHQUEyRCxNQUFsRC9QLEdBQUFVLEVBQUFxUCxHQUFPMEcsRUFBQWdGLEVBQUEzYixLQUFBNEMsS0FBQXFOLEdBQWlCL1AsR0FBQXdYLEVBQUExQixFQUFBL0YsR0FBVXJQLEVBQUFnQyxPQUFBMFUsRUFBQXRCLEVBQUEvRixHQUFnQjBHLElBQVdNLEVBQUF0RCxLQUFBM1MsVUFBQSxxQkFBQWlQLEdBQzNZLE1BRG9iQSxHQUFBeUwsRUFBQTFiLEtBQUE0QyxLQUFBcU4sR0FBaUJyTixLQUFBb1YsY0FBQUgsaUJBQUFELEVBQUE1QixFQUFBL0YsR0FBQXFGLEVBQUFVLEVBQUEvRixHQUNyY0EsSUFBV2dILEVBQUF0RCxLQUFBM1MsVUFBQSx1QkFBQWlQLEdBQTJDLEdBQUEvUCxHQUFBVSxFQUFBcVAsR0FBQTBHLEVBQUFrRixFQUFBN2IsS0FBQTRDLEtBQUFxTixFQUFzQyxPQUFWL1AsSUFBQXdYLEVBQUExQixFQUFBL0YsR0FBVTBHLElBQVdNLEVBQUF0RCxLQUFBM1MsVUFBQSx3QkFBQWlQLEVBQUE5UCxHQUE4QyxHQUFBOFAsWUFBQXlKLGtCQUFBLENBQWtDLEdBQUEvQyxHQUFBdE8sTUFBQXJILFVBQUF1SSxNQUFBNEUsTUFBQThCLEVBQUE3SSxXQUFtRSxJQUFuQjZJLEVBQUE2TCxFQUFBOWIsS0FBQTRDLEtBQUFxTixFQUFBOVAsR0FBbUJTLEVBQUFnQyxNQUFBLElBQUE4VSxFQUFBMUIsRUFBQTdWLEtBQUEsRUFBMEJBLEVBQUF3VyxFQUFBM1AsT0FBVzdHLElBQUFtWCxFQUFBdEIsRUFBQVcsRUFBQXhXLEdBQWMsT0FBQThQLEdBQVMsR0FBQTBHLEdBQUEvVixFQUFBcVAsR0FBQTJHLEVBQUFrRixFQUFBOWIsS0FBQTRDLEtBQUFxTixFQUFBOVAsR0FBQUQsRUFBQVUsRUFBQWdDLEtBQXNFLE9BQTlCMUMsSUFBQXdYLEVBQUExQixFQUFBN1YsR0FBVXdXLEdBQUFlLEVBQUExQixFQUFBL0YsR0FBVS9QLEdBQUFvWCxFQUFBdEIsRUFBQS9GLEdBQVUyRyxJQUFXbkgsS0FBQTlPLElBQUFzUCxFQUFBMEQsS0FBQTNTLFVBQUF5TyxHQUFBMkgsRUFBQXBCLEVBQUEsU0FBQUEsR0FBNkMvRixFQUFBK0YsR0FBS3RWLFlBQUEsRUFBQUQsY0FBQSxFQUFBRSxJQUFBLFdBQTZDLE9BQUFzUCxNQUFBK0YsRUFDdGUsRUFBRUEsRUFBQXBULEtBQUF3RSxXQUFBSixPQUF5QmdQLElBQUEvRixFQUFBdEwsS0FBQS9CLEtBQUF3RSxXQUFBNE8sR0FBQWpDLFlBQTJDLE9BQUE5RCxHQUFBdkYsS0FBQSxLQUFrQmhCLElBQUEsU0FBQXVHLEdBQWlCLEtBQUtyTixLQUFBc1MsWUFBZ0IyRyxFQUFBN2IsS0FBQTRDLFVBQUFzUyxXQUE4QnlHLEdBQUEzYixLQUFBNEMsS0FBQXVILFNBQUF1VCxlQUFBek4sWUFDNFIsV0FBc0IsUUFBQUEsS0FBQS9QLEdBQWdCSyxPQUFBQyxlQUFBeVAsRUFBQSxhQUFxQ3ZQLFdBQUFSLEVBQUFRLFdBQUFELGNBQUEsRUFBQUUsSUFBQVQsRUFBQVMsSUFBQStJLElBQUEsU0FBQXVHLEdBQWtFLEdBQUEwRyxHQUFBL1QsS0FBQXpDLE1BQUEsRUFBNkYsSUFBekVTLEVBQUFnQyxRQUFBekMsS0FBQXNXLEVBQUE3VCxLQUFBLFNBQUFxTixHQUFrQ0EsSUFBQTBHLEdBQUF4VyxFQUFBd0UsS0FBQXNMLE1BQW9CL1AsRUFBQXdKLElBQUExSixLQUFBNEMsS0FBQXFOLEdBQW1COVAsRUFBQSxPQUFBeVcsR0FBQSxFQUFpQkEsRUFBQXpXLEVBQUE2RyxPQUFXNFAsSUFBQSxDQUFLLEdBQUF5QixHQUFBbFksRUFBQXlXLEVBQVcsS0FBQXlCLEVBQUFkLFlBQUF2QixFQUFBMkIscUJBQUFVLEdBQW9HLE1BQXhEelYsTUFBQW9WLGNBQUFILGlCQUFBRCxFQUFBNUIsRUFBQXBULE1BQUEwUyxFQUFBVSxFQUFBcFQsTUFBd0RxTixLQUFZLFFBQUEvUCxHQUFBK1AsRUFBQS9QLEdBQWdCK1csRUFBQWhILEVBQUEsaUNBQUFBLEVBQUEwRyxHQUEwQyxHQUFBeFcsR0FBQVMsRUFBQStWLEVBQ3gzQixPQURtNEIxRyxHQUFBL1AsRUFBQUYsS0FBQTRDLEtBQUFxTixFQUFBMEcsR0FBbUJ4VyxHQUFBdVgsRUFBQTFCLEVBQUFXLEdBQVUvVixFQUFBcVAsSUFBQXFILEVBQUF0QixFQUFBVyxHQUNoNkIxRyxJQUFXLFFBQUE5UCxHQUFBOFAsRUFBQS9QLEdBQWdCLFFBQUF5VyxHQUFBMUcsRUFBQTBHLEdBQWdCLE9BQUF6VyxNQUFhK1AsSUFBQTBHLEVBQU0xRyxJQUFBdUcsWUFBQXRXLEVBQUF5RSxLQUFBc0wsRUFBMEIsS0FBQTBHLEVBQUEsRUFBUUEsRUFBQXpXLEVBQUE4RyxPQUFXMlAsSUFBQWlCLEVBQUE1QixFQUFBOVYsRUFBQXlXLElBQWNNLEVBQUFoSCxFQUFBLDhCQUFBQSxFQUFBK0YsR0FBeUQsb0JBQWxCL0YsSUFBQTNHLGVBQWtCLENBQXNCLEdBQUFuSixHQUFBeUMsS0FBQSthLGVBQTJCemQsR0FBQUYsS0FBQTRDLEtBQUFxTixFQUFBK0YsR0FBaUJXLEVBQUF4VyxHQUFBeUMsS0FBQStILFdBQUF1SyxXQUFBdFMsVUFBc0MsbUJBQUFxTixFQUFBOVAsRUFBQXlDLEtBQUFzUyxXQUFBaFYsRUFBQUYsS0FBQTRDLEtBQUFxTixFQUFBK0YsR0FBQVcsRUFBQS9ULEtBQUFzUyxXQUFBL1UsT0FBaUYsa0JBQUE4UCxFQUFBOVAsRUFBQXlDLEtBQUFnYixVQUFBMWQsRUFBQUYsS0FBQTRDLEtBQUFxTixFQUFBK0YsR0FBQVcsRUFBQXhXLEdBQUF5QyxLQUFBc1MsV0FBQSxVQUFxRixpQkFBQWpGLEVBQ3JhLFNBQUF3SyxhQUFBLHVCQUFBM1EsT0FBQW1HLEdBQUEsMkVBRHFhOVAsR0FBQXlDLEtBQUE0VCxZQUFBdFcsRUFBQUYsS0FBQTRDLEtBQ2hjcU4sRUFBQStGLEdBQUFXLEVBQUEvVCxLQUFBNFQsWUFBQXJXLE1BRnNjLEdBQUE2VixHQUFBeUgsRUFFaFN6QixJQUFBL0UsRUFBQXdDLFFBQUF6WSxVQUFBLHdCQUFBaVAsR0FBa0QsTUFBQXJOLE1BQUFvVSxnQkFBQS9HLEVBQUErTCxFQUFBaGMsS0FBQTRDLEtBQUFxTixLQUErQ2dNLEtBQUF0YixJQUFBc1AsRUFBQXdKLFFBQUF6WSxVQUFBaWIsR0FBQW1CLE9BQUF6YyxJQUFBc1AsRUFBQTRCLFlBQUE3USxVQUFBb2MsSUFBQWhHLEVBQUFwQixFQUFBLFNBQUFBLEdBQW9GL0YsRUFBQStGLEdBQUt0VixZQUFBLEVBQUFELGNBQUEsRUFBQUUsSUFBQSxXQUE2QyxNQUFBK2EsR0FBQTFiLEtBQUE0QyxNQUFBLEdBQUFxSCxXQUFpQ1AsSUFBQSxTQUFBdUcsR0FBaUIsR0FBQStGLEdBQUEsYUFBQXBULEtBQUFpVSxVQUFBRixFQUFBWCxFQUFBcFQsS0FBQWlJLFFBQUFqSSxLQUMvYjFDLEVBQUFnYixFQUFBbGIsS0FBQW1LLFNBQUF2SCxLQUFBaWIsYUFBQWpiLEtBQUFpVSxVQUFvRCxLQUFBM1csRUFBQStKLFVBQUFnRyxFQUFrQixFQUFBMEcsRUFBQXZQLFdBQUFKLFFBQXNCNlUsRUFBQTdiLEtBQUEyVyxJQUFBdlAsV0FBQSxHQUEyQixLQUFBNkksRUFBQStGLEVBQUE5VixFQUFBMkssUUFBQTNLLEVBQW9CLEVBQUErUCxFQUFBN0ksV0FBQUosUUFBc0IyVSxFQUFBM2IsS0FBQTJXLEVBQUExRyxFQUFBN0ksV0FBQSxTQUFnQzZQLEVBQUF3QyxRQUFBelksVUFBQSx3QkFBQWlQLEVBQUEvUCxHQUFpRCxPQUFBMEMsS0FBQTJVLFdBQUEsTUFBQTRFLEdBQUFuYyxLQUFBNEMsS0FBQXFOLEVBQUEvUCxFQUErQyxJQUFBeVcsR0FBQXVGLEVBQUFsYyxLQUFBNEMsS0FBQXFOLEVBQXFCa00sR0FBQW5jLEtBQUE0QyxLQUFBcU4sRUFBQS9QLEdBQWlCQSxFQUFBZ2MsRUFBQWxjLEtBQUE0QyxLQUFBcU4sR0FBaUIrRixFQUFBdUMseUJBQUEzVixLQUFBcU4sRUFBQTBHLEVBQUF6VyxFQUFBLFFBQThDK1csRUFBQXdDLFFBQUF6WSxVQUFBLDBCQUFBaVAsRUFBQS9QLEVBQUFDLEdBQXFELE9BQUF5QyxLQUFBMlUsV0FBQSxNQUFBZ0YsR0FBQXZjLEtBQUE0QyxLQUFBcU4sRUFBQS9QLEVBQUFDLEVBQWtELElBQUF3VyxHQUFBMEYsRUFBQXJjLEtBQUE0QyxLQUM3ZXFOLEVBQUEvUCxFQUFLcWMsR0FBQXZjLEtBQUE0QyxLQUFBcU4sRUFBQS9QLEVBQUFDLEdBQW9CQSxFQUFBa2MsRUFBQXJjLEtBQUE0QyxLQUFBcU4sRUFBQS9QLEdBQW1COFYsRUFBQXVDLHlCQUFBM1YsS0FBQTFDLEVBQUF5VyxFQUFBeFcsRUFBQThQLEtBQTJDZ0gsRUFBQXdDLFFBQUF6WSxVQUFBLDJCQUFBaVAsR0FBa0QsT0FBQXJOLEtBQUEyVSxXQUFBLE1BQUE2RSxHQUFBcGMsS0FBQTRDLEtBQUFxTixFQUE2QyxJQUFBL1AsR0FBQWdjLEVBQUFsYyxLQUFBNEMsS0FBQXFOLEVBQXFCbU0sR0FBQXBjLEtBQUE0QyxLQUFBcU4sR0FBZSxPQUFBL1AsR0FBQThWLEVBQUF1Qyx5QkFBQTNWLEtBQUFxTixFQUFBL1AsRUFBQSxhQUEyRCtXLEVBQUF3QyxRQUFBelksVUFBQSw2QkFBQWlQLEVBQUEvUCxHQUFzRCxPQUFBMEMsS0FBQTJVLFdBQUEsTUFBQWtGLEdBQUF6YyxLQUFBNEMsS0FBQXFOLEVBQUEvUCxFQUFnRCxJQUFBQyxHQUFBa2MsRUFBQXJjLEtBQUE0QyxLQUFBcU4sRUFBQS9QLEVBQXVCdWMsR0FBQXpjLEtBQUE0QyxLQUFBcU4sRUFBQS9QLEVBQWtCLElBQUF5VyxHQUFBMEYsRUFBQXJjLEtBQUE0QyxLQUFBcU4sRUFBQS9QLEVBQXVCQyxLQUFBd1csR0FBQVgsRUFBQXVDLHlCQUFBM1YsS0FBQTFDLEVBQUFDLEVBQUF3VyxFQUFBMUcsS0FBa0RvTixHQUFBbmQsRUFBQTJSLFlBQUE3USxVQUM3ZXFjLElBQUFWLEVBQUF6YyxFQUFBdVosUUFBQXpZLFVBQUEyYixHQUFBbUIsUUFBQUMsS0FBQSxxRUFBaUhULEdBQUFuZCxFQUFBMFIsWUFBQTdRLFVBQUFzYyxJQUFBVCxFQUFBMWMsRUFBQXNaLFFBQUF6WSxVQUFBNmIsR0FBQWlCLFFBQUFDLEtBQUEsa0VBQXlJeEUsRUFBQXZELEVBQUF5RCxRQUFBelksV0FBdUIyWSxFQUFBb0QsRUFBQWxELE9BQUFtRCxJQUFpQmxELEVBQUE5RCxNQVN0RzdMLFNBQUEwTixrQkFBQSxDQUE2QixJQUFBNVUsSUFBQSxHQUFBaVcsR0FBQXVFLEdBQTRCbGQsUUFBQUMsZUFBQXdDLE9BQUEsa0JBQStDdkMsY0FBQSxFQUFBQyxZQUFBLEVBQUFhLE1BQUEwQixRQUNuU2pELEtBQUEwTyIsImZpbGUiOiJwb2x5ZmlsbGVkLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPVxuLyoqKioqKi8gKGZ1bmN0aW9uKG1vZHVsZXMpIHsgLy8gd2VicGFja0Jvb3RzdHJhcFxuLyoqKioqKi8gXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuLyoqKioqKi8gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuLyoqKioqKi8gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4vKioqKioqLyBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbi8qKioqKiovIFx0XHR9XG4vKioqKioqLyBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbi8qKioqKiovIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4vKioqKioqLyBcdFx0XHRpOiBtb2R1bGVJZCxcbi8qKioqKiovIFx0XHRcdGw6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0ZXhwb3J0czoge31cbi8qKioqKiovIFx0XHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbi8qKioqKiovIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuLyoqKioqKi8gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbi8qKioqKiovIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4vKioqKioqLyBcdH1cbi8qKioqKiovXG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbi8qKioqKiovIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4vKioqKioqLyBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuLyoqKioqKi8gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuLyoqKioqKi8gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuLyoqKioqKi8gXHRcdFx0XHRnZXQ6IGdldHRlclxuLyoqKioqKi8gXHRcdFx0fSk7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHR9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4vKioqKioqLyBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4vKioqKioqLyBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbi8qKioqKiovIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4vKioqKioqLyBcdFx0cmV0dXJuIGdldHRlcjtcbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuLyoqKioqKi8gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4vKioqKioqLyBcdHJldHVybiBfX3dlYnBhY2tfcmVxdWlyZV9fKF9fd2VicGFja19yZXF1aXJlX18ucyA9IDExKTtcbi8qKioqKiovIH0pXG4vKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuLyoqKioqKi8gKFtcbi8qIDAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX09iamVjdCRjcmVhdGU7XG5cbmV4cG9ydHMuc2V0U3RvcmFnZURyaXZlciA9IHNldFN0b3JhZ2VEcml2ZXI7XG5leHBvcnRzLmdldFN0b3JhZ2UgPSBnZXRTdG9yYWdlO1xuZXhwb3J0cy5hZGRTdG9yYWdlID0gYWRkU3RvcmFnZTtcbmV4cG9ydHMucmVtb3ZlU3RvcmFnZSA9IHJlbW92ZVN0b3JhZ2U7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBwcm9wc01hcCA9IG5ldyBNYXAoKTtcblxudmFyIGV2ZW50c01hcCA9IG5ldyBNYXAoKTtcblxudmFyIHN0b3JhZ2VLZXlzID0gZXhwb3J0cy5zdG9yYWdlS2V5cyA9IHtcbiAgICBQUk9QUzogXCJwcm9wc1wiLFxuICAgIEVWRU5UUzogXCJldmVudHNcIlxufTtcblxudmFyIGRyaXZlciA9IHtcbiAgICBpdGVtczogT2JqZWN0LmNyZWF0ZSgoX09iamVjdCRjcmVhdGUgPSB7fSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBzdG9yYWdlS2V5cy5QUk9QUywgcHJvcHNNYXApLCBfZGVmaW5lUHJvcGVydHkoX09iamVjdCRjcmVhdGUsIHN0b3JhZ2VLZXlzLkVWRU5UUywgZXZlbnRzTWFwKSwgX09iamVjdCRjcmVhdGUpKSxcbiAgICBzZXRJdGVtOiBmdW5jdGlvbiBzZXRJdGVtKGtleSwgdmFsdWUpIHtcbiAgICAgICAgdGhpcy5pdGVtc1trZXldID0gdmFsdWU7XG4gICAgfSxcbiAgICBnZXRJdGVtOiBmdW5jdGlvbiBnZXRJdGVtKGtleSkge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1trZXldO1xuICAgIH0sXG4gICAgcmVtb3ZlSXRlbTogZnVuY3Rpb24gcmVtb3ZlSXRlbShrZXkpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMuaXRlbXNba2V5XTtcbiAgICB9LFxuICAgIG1pZ3JhdGU6IGZ1bmN0aW9uIG1pZ3JhdGUoZHJpdmVyKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLml0ZW1zKSB7XG4gICAgICAgICAgICBkcml2ZXIuc2V0SXRlbShrZXksIHRoaXMuaXRlbXNba2V5XSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRyaXZlcjtcbiAgICB9XG59O1xuXG52YXIgc3RvcmFnZSA9IGV4cG9ydHMuc3RvcmFnZSA9IHtcbiAgICBkcml2ZXI6IGRyaXZlclxufTtcblxuZnVuY3Rpb24gc2V0U3RvcmFnZURyaXZlcihkcml2ZXIpIHtcbiAgICBzdG9yYWdlLmRyaXZlciA9IHN0b3JhZ2UuZHJpdmVyLm1pZ3JhdGUoZHJpdmVyKTtcbn1cblxuZnVuY3Rpb24gZ2V0U3RvcmFnZShrZXkpIHtcbiAgICByZXR1cm4gc3RvcmFnZS5kcml2ZXIuZ2V0SXRlbShrZXkpO1xufVxuXG5mdW5jdGlvbiBhZGRTdG9yYWdlKGtleSwgdmFsdWUpIHtcbiAgICBzdG9yYWdlLmRyaXZlci5zZXRJdGVtKGtleSwgdmFsdWUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdG9yYWdlKGtleSkge1xuICAgIHN0b3JhZ2UuZHJpdmVyLnJlbW92ZUl0ZW0oa2V5KTtcbn1cblxuLyoqKi8gfSksXG4vKiAxICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxuXG52YXIgZGVmYXVsdEltcGxlbWVudGF0aW9uID0ge1xuICAgIHJlZ2lzdGVyQ29tcG9uZW50OiBmdW5jdGlvbiByZWdpc3RlckNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpIHtcbiAgICAgICAgaWYgKCdjdXN0b21FbGVtZW50cycgaW4gd2luZG93KSB7XG4gICAgICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUobmFtZSwgY29tcG9uZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWFkeUNoZWNrKCkudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3JlZ2lzdGVyQ29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaXNDdXN0b21Db21wb25lbnQ6IGZ1bmN0aW9uIGlzQ3VzdG9tQ29tcG9uZW50KG5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubm9kZU5hbWUuaW5jbHVkZXMoXCItXCIpO1xuICAgIH1cbn07XG5cbnZhciBjdXJyZW50SW1wbGVtZW50YXRpb24gPSBkZWZhdWx0SW1wbGVtZW50YXRpb247XG5cbnZhciBfcmVnaXN0ZXJDb21wb25lbnQgPSBmdW5jdGlvbiBfcmVnaXN0ZXJDb21wb25lbnQobmFtZSwgY29tcG9uZW50KSB7XG4gICAgcmV0dXJuIGN1cnJlbnRJbXBsZW1lbnRhdGlvbi5yZWdpc3RlckNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpO1xufTtcblxudmFyIHNldEltcGxlbWVudGF0aW9uID0gZXhwb3J0cy5zZXRJbXBsZW1lbnRhdGlvbiA9IGZ1bmN0aW9uIHNldEltcGxlbWVudGF0aW9uKGltcGxlbWVudGF0aW9uKSB7XG4gICAgY3VycmVudEltcGxlbWVudGF0aW9uID0gaW1wbGVtZW50YXRpb247XG59O1xuXG52YXIgY3VycmVudFJlYWR5Q2hlY2sgPSBmdW5jdGlvbiBjdXJyZW50UmVhZHlDaGVjaygpIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG59O1xuXG52YXIgY29tcG9uZW50c1JlYWR5ID0gZXhwb3J0cy5jb21wb25lbnRzUmVhZHkgPSBmdW5jdGlvbiBjb21wb25lbnRzUmVhZHkoKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRSZWFkeUNoZWNrKCk7XG59O1xuXG52YXIgc2V0UmVhZHlDaGVjayA9IGV4cG9ydHMuc2V0UmVhZHlDaGVjayA9IGZ1bmN0aW9uIHNldFJlYWR5Q2hlY2socmVhZHlDaGVjaykge1xuICAgIGN1cnJlbnRSZWFkeUNoZWNrID0gcmVhZHlDaGVjaztcbn07XG5cbmV4cG9ydHMuZGVmYXVsdCA9IF9yZWdpc3RlckNvbXBvbmVudDtcbnZhciBpc0N1c3RvbUNvbXBvbmVudCA9IGV4cG9ydHMuaXNDdXN0b21Db21wb25lbnQgPSBmdW5jdGlvbiBpc0N1c3RvbUNvbXBvbmVudChub2RlKSB7XG4gICAgcmV0dXJuIGN1cnJlbnRJbXBsZW1lbnRhdGlvbi5pc0N1c3RvbUNvbXBvbmVudChub2RlKTtcbn07XG5cbi8qKiovIH0pLFxuLyogMiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cblxudmFyIHN0dWJJbXBsZW1lbnRhdGlvbiA9IHtcbiAgICByZWR1Y2Vyczoge30sXG4gICAgc3Vic2NyaXB0aW9uczoge30sXG4gICAgYWRkUmVkdWNlcjogZnVuY3Rpb24gYWRkUmVkdWNlcihrZXksIHJlZHVjZXIpIHtcbiAgICAgICAgdGhpcy5yZWR1Y2Vyc1trZXldID0gcmVkdWNlcjtcbiAgICB9LFxuICAgIHJlbW92ZVJlZHVjZXI6IGZ1bmN0aW9uIHJlbW92ZVJlZHVjZXIoa2V5KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJlZHVjZXJzW2tleV07XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIHN1YnNjcmliZTogZnVuY3Rpb24gc3Vic2NyaWJlKGtleSwgY2IpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgICBpZiAoIXRoaXMuc3Vic2NyaXB0aW9uc1trZXldKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNba2V5XSA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1trZXldLnB1c2goY2IpO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdW5zdWJzY3JpYmU6IGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnN1YnNjcmlwdGlvbnNba2V5XSA9IF90aGlzLnN1YnNjcmlwdGlvbnNba2V5XS5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBlbCAhPT0gY2I7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgfSxcbiAgICBnZXRTdGF0ZTogZnVuY3Rpb24gZ2V0U3RhdGUoa2V5KSB7fSxcbiAgICBtaWdyYXRlOiBmdW5jdGlvbiBtaWdyYXRlKG5ld1N0b3JlKSB7XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB0aGlzLnJlZHVjZXJzKSB7XG4gICAgICAgICAgICB2YXIgcmVkdWNlciA9IHRoaXMucmVkdWNlcnNba2V5XTtcbiAgICAgICAgICAgIG5ld1N0b3JlLmFkZFJlZHVjZXIoa2V5LCByZWR1Y2VyKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKHZhciBfa2V5IGluIHRoaXMuc3Vic2NyaXB0aW9ucykge1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gdGhpcy5zdWJzY3JpcHRpb25zW19rZXldW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgICAgICAgICAgbmV3U3RvcmUuc3Vic2NyaWJlKF9rZXksIHN1YnNjcmlwdGlvbik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3U3RvcmU7XG4gICAgfVxufTtcblxudmFyIHN0b3JlID0ge1xuICAgIGN1cnJlbnRJbXBsZW1lbnRhdGlvbjogc3R1YkltcGxlbWVudGF0aW9uXG59O1xuXG52YXIgc2V0SW1wbGVtZW50YXRpb24gPSBleHBvcnRzLnNldEltcGxlbWVudGF0aW9uID0gZnVuY3Rpb24gc2V0SW1wbGVtZW50YXRpb24oaW1wbGVtZW50YXRpb24pIHtcbiAgICBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24gPSBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24ubWlncmF0ZShpbXBsZW1lbnRhdGlvbik7XG59O1xuXG52YXIgcmVnaXN0ZXJSZWR1Y2VyID0gZXhwb3J0cy5yZWdpc3RlclJlZHVjZXIgPSBmdW5jdGlvbiByZWdpc3RlclJlZHVjZXIoa2V5LCByZWR1Y2VyKSB7XG4gICAgc3RvcmUuY3VycmVudEltcGxlbWVudGF0aW9uLmFkZFJlZHVjZXIoa2V5LCByZWR1Y2VyKTtcbn07XG52YXIgcmVtb3ZlUmVkdWNlciA9IGV4cG9ydHMucmVtb3ZlUmVkdWNlciA9IGZ1bmN0aW9uIHJlbW92ZVJlZHVjZXIoa2V5KSB7XG4gICAgc3RvcmUuY3VycmVudEltcGxlbWVudGF0aW9uLnJlbW92ZVJlZHVjZXIoa2V5KTtcbn07XG52YXIgc3Vic2NyaWJlID0gZXhwb3J0cy5zdWJzY3JpYmUgPSBmdW5jdGlvbiBzdWJzY3JpYmUoa2V5LCBjYikge1xuICAgIHJldHVybiBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24uc3Vic2NyaWJlKGtleSwgY2IpO1xufTtcbnZhciBnZXRTdGF0ZSA9IGV4cG9ydHMuZ2V0U3RhdGUgPSBmdW5jdGlvbiBnZXRTdGF0ZShrZXkpIHtcbiAgICByZXR1cm4gc3RvcmUuY3VycmVudEltcGxlbWVudGF0aW9uLmdldFN0YXRlKGtleSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDMgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3NsaWNlZFRvQXJyYXkgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIHNsaWNlSXRlcmF0b3IoYXJyLCBpKSB7IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX2UgPSB1bmRlZmluZWQ7IHRyeSB7IGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHsgX2Fyci5wdXNoKF9zLnZhbHVlKTsgaWYgKGkgJiYgX2Fyci5sZW5ndGggPT09IGkpIGJyZWFrOyB9IH0gY2F0Y2ggKGVycikgeyBfZCA9IHRydWU7IF9lID0gZXJyOyB9IGZpbmFsbHkgeyB0cnkgeyBpZiAoIV9uICYmIF9pW1wicmV0dXJuXCJdKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH0gcmV0dXJuIGZ1bmN0aW9uIChhcnIsIGkpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgeyByZXR1cm4gYXJyOyB9IGVsc2UgaWYgKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkgeyByZXR1cm4gc2xpY2VJdGVyYXRvcihhcnIsIGkpOyB9IGVsc2UgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTsgfSB9OyB9KCk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZXhwb3J0cy5jYWxsSGFuZGxlcnMgPSBjYWxsSGFuZGxlcnM7XG5leHBvcnRzLmFkZFRlbXBsYXRlSGFuZGxlciA9IGFkZFRlbXBsYXRlSGFuZGxlcjtcbmV4cG9ydHMuYWNjZXNzSGFuZGxlciA9IGFjY2Vzc0hhbmRsZXI7XG5leHBvcnRzLnVubG9hZEhhbmRsZXIgPSB1bmxvYWRIYW5kbGVyO1xuZXhwb3J0cy5zZXRDb3JlSGFuZGxlciA9IHNldENvcmVIYW5kbGVyO1xuXG52YXIgX3N0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxudmFyIF93ZWJDb21wb25lbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxudmFyIHByb3BzU3RvcmFnZSA9ICgwLCBfc3RvcmFnZS5nZXRTdG9yYWdlKShfc3RvcmFnZS5zdG9yYWdlS2V5cy5QUk9QUyk7XG52YXIgZXZlbnRzU3RvcmFnZSA9ICgwLCBfc3RvcmFnZS5nZXRTdG9yYWdlKShfc3RvcmFnZS5zdG9yYWdlS2V5cy5FVkVOVFMpO1xuXG52YXIgRXZlbnRzVGFnSGFuZGxlciA9IHtcbiAgICBjYWxsOiBmdW5jdGlvbiBjYWxsKG5vZGUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgICAgICAgICBpZiAoYXR0cmlidXRlLm5vZGVOYW1lLnN0YXJ0c1dpdGgoXCJvblwiKSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9ICgwLCBfdXRpbHMubWF0Y2hUYWdBcmcpKGF0dHJpYnV0ZS5ub2RlVmFsdWUpO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBOdW1iZXIobWF0Y2hbMV0pO1xuICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXIgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGUubm9kZU5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIGV2ZW50TmFtZSA9IGF0dHJpYnV0ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLnNsaWNlKDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKGV2ZW50TmFtZSwgbGlzdGVuZXIpO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgbGlzdGVuZXJzID0gZXZlbnRzU3RvcmFnZS5nZXQobm9kZSkgfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHNTdG9yYWdlLnNldChub2RlLCBfZXh0ZW5kcyh7fSwgbGlzdGVuZXJzLCBfZGVmaW5lUHJvcGVydHkoe30sIGV2ZW50TmFtZSwgbGlzdGVuZXIpKSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgTWFwSGFuZGxlciA9IHtcbiAgICBjYWxsOiBmdW5jdGlvbiBjYWxsKG5vZGUsIGFyZ3MpIHtcbiAgICAgICAgaWYgKG5vZGUgaW5zdGFuY2VvZiBIVE1MVGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAgICAgICBpZiAobm9kZS5oYXNBdHRyaWJ1dGUoXCJtYXBcIikpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSAoMCwgX3V0aWxzLm1hdGNoVGFnQXJnKShTdHJpbmcobm9kZS5nZXRBdHRyaWJ1dGUoXCJtYXBcIikpKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gTnVtYmVyKG1hdGNoWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHBsID0gbm9kZS5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG5vZGVzID0gYXJyLm1hcChmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAoMCwgX3V0aWxzLnJlcGxhY2VUYWdBcmcpKHRwbCwgZnVuY3Rpb24gKG1hdGNoLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmcgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cGxDYWxsID0gYXJnKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRwbENhbGwgaW5zdGFuY2VvZiBIVE1MVGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHBsQ2FsbC5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh0cGxDYWxsKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cGxDYWxsLmpvaW4oJycpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHBsQ2FsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gYXJnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudC5pbm5lckhUTUwgPSBub2Rlcy5qb2luKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGZyYWdtZW50LmNvbnRlbnQsIG5vZGUpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHNob3VsZFNldFByb3BUb1N0b3JhZ2UodmFsdWUsIG5vZGUpIHtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSBcImZ1bmN0aW9uXCIgfHwgKHR5cGVvZiB2YWx1ZSA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKHZhbHVlKSkgPT09IFwib2JqZWN0XCIgfHwgKDAsIF93ZWJDb21wb25lbnRzLmlzQ3VzdG9tQ29tcG9uZW50KShub2RlKTtcbn1cblxuZnVuY3Rpb24gcGFyc2VBdHRyaWJ1dGUoYXR0cmlidXRlLCBub2RlLCBhcmdzKSB7XG4gICAgdmFyIG1hdGNoID0gKDAsIF91dGlscy5tYXRjaFRhZ0FyZykoYXR0cmlidXRlLm5vZGVWYWx1ZSk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XG4gICAgICAgIHZhciBpbmRleCA9IE51bWJlcihtYXRjaFsxXSk7XG4gICAgICAgIHZhciBub2RlTmFtZSA9IGF0dHJpYnV0ZS5ub2RlTmFtZTtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gKDAsIF91dGlscy50YWdOYW1lVG9Qcm9wKShub2RlTmFtZSk7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICByZXR1cm4gW3Byb3BOYW1lLCB2YWx1ZV07XG4gICAgfVxuICAgIHJldHVybiBbYXR0cmlidXRlLm5vZGVOYW1lLCBhdHRyaWJ1dGUubm9kZVZhbHVlXTtcbn1cblxudmFyIFByb3BzSGFuZGxlciA9IHtcbiAgICBjYWxsOiBmdW5jdGlvbiBjYWxsKG5vZGUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG5cbiAgICAgICAgICAgIHZhciBfcGFyc2VBdHRyaWJ1dGUgPSBwYXJzZUF0dHJpYnV0ZShhdHRyaWJ1dGUsIG5vZGUsIGFyZ3MpLFxuICAgICAgICAgICAgICAgIF9wYXJzZUF0dHJpYnV0ZTIgPSBfc2xpY2VkVG9BcnJheShfcGFyc2VBdHRyaWJ1dGUsIDIpLFxuICAgICAgICAgICAgICAgIHByb3BOYW1lID0gX3BhcnNlQXR0cmlidXRlMlswXSxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9wYXJzZUF0dHJpYnV0ZTJbMV07XG5cbiAgICAgICAgICAgIGlmIChzaG91bGRTZXRQcm9wVG9TdG9yYWdlKHZhbHVlLCBub2RlKSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IHByb3BzU3RvcmFnZS5nZXQobm9kZSkgfHwge307XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlLm5vZGVOYW1lKTtcbiAgICAgICAgICAgICAgICBwcm9wc1N0b3JhZ2Uuc2V0KG5vZGUsIF9leHRlbmRzKHt9LCBwcm9wcywgX2RlZmluZVByb3BlcnR5KHt9LCBwcm9wTmFtZSwgdmFsdWUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgY29yZUhhbmRsZXJzID0ge1xuICAgIGV2ZW50czogRXZlbnRzVGFnSGFuZGxlcixcbiAgICBtYXA6IE1hcEhhbmRsZXIsXG4gICAgcHJvcHM6IFByb3BzSGFuZGxlclxufTtcblxudmFyIGN1c3RvbUhhbmRsZXJzID0ge307XG5cbnZhciBoYW5kbGVycyA9IFtjb3JlSGFuZGxlcnMubWFwLmNhbGwsIGNvcmVIYW5kbGVycy5ldmVudHMuY2FsbCwgY29yZUhhbmRsZXJzLnByb3BzLmNhbGxdO1xuXG5mdW5jdGlvbiBjYWxsSGFuZGxlcnMoZWxlbWVudCwgYXJncykge1xuICAgIGlmICgoZWxlbWVudC5hdHRyaWJ1dGVzIHx8IFtdKS5sZW5ndGgpIHtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgaGFuZGxlcihlbGVtZW50LCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIYW5kbGVycyhlbGVtZW50LmNoaWxkTm9kZXNbaV0sIGFyZ3MpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkVGVtcGxhdGVIYW5kbGVyKGtleSwgaGFuZGxlcikge1xuICAgIGN1c3RvbUhhbmRsZXJzW2tleV0gPSBoYW5kbGVyO1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBoYW5kbGVycy51bnNoaWZ0KGhhbmRsZXIuY2FsbCk7XG59XG5cbmZ1bmN0aW9uIGFjY2Vzc0hhbmRsZXIoa2V5KSB7XG4gICAgcmV0dXJuIGN1c3RvbUhhbmRsZXJzW2tleV07XG59XG5cbmZ1bmN0aW9uIHVubG9hZEhhbmRsZXIoa2V5KSB7XG4gICAgdmFyIGhhbmRsZXIgPSBjdXN0b21IYW5kbGVyc1trZXldO1xuICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gZWwgIT09IGhhbmRsZXIuY2FsbDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0Q29yZUhhbmRsZXIoa2V5LCBoYW5kbGVyKSB7XG4gICAgY29yZUhhbmRsZXJzW2tleV0gPSBoYW5kbGVyO1xufVxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jbGVhclByb3BzU3RvcmFnZSA9IGNsZWFyUHJvcHNTdG9yYWdlO1xuZXhwb3J0cy5jbGVhckV2ZW50c1N0b3JhZ2UgPSBjbGVhckV2ZW50c1N0b3JhZ2U7XG5leHBvcnRzLnRhZ05hbWVUb1Byb3AgPSB0YWdOYW1lVG9Qcm9wO1xuZXhwb3J0cy5jcmVhdGVUYWdBcmcgPSBjcmVhdGVUYWdBcmc7XG5leHBvcnRzLm1hdGNoVGFnQXJnID0gbWF0Y2hUYWdBcmc7XG5leHBvcnRzLnJlcGxhY2VUYWdBcmcgPSByZXBsYWNlVGFnQXJnO1xuZXhwb3J0cy5hdHRyaWJ1dGVTdGFydHMgPSBhdHRyaWJ1dGVTdGFydHM7XG5cbnZhciBfc3RvcmFnZSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBwcm9wc1N0b3JhZ2UgPSAoMCwgX3N0b3JhZ2UuZ2V0U3RvcmFnZSkoX3N0b3JhZ2Uuc3RvcmFnZUtleXMuUFJPUFMpO1xuXG52YXIgZXZlbnRzU3RvcmFnZSA9ICgwLCBfc3RvcmFnZS5nZXRTdG9yYWdlKShfc3RvcmFnZS5zdG9yYWdlS2V5cy5FVkVOVFMpO1xuXG5mdW5jdGlvbiBjbGVhclByb3BzU3RvcmFnZSgpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBwcm9wc1N0b3JhZ2Uua2V5cygpW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgICAgIGlmICgha2V5LmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHByb3BzU3RvcmFnZS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gY2xlYXJFdmVudHNTdG9yYWdlKCkge1xuICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlO1xuICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSBldmVudHNTdG9yYWdlLmtleXMoKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBrZXkgPSBfc3RlcDIudmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWtleS5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBldmVudHNTdG9yYWdlLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gdGFnTmFtZVRvUHJvcChub2RlTmFtZSkge1xuICAgIHJldHVybiBub2RlTmFtZS5zcGxpdChcIi1cIikucmVkdWNlKGZ1bmN0aW9uIChhY2MsIG5leHQpIHtcbiAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgIHJldHVybiBhY2MgKyBuZXh0WzBdLnRvVXBwZXJDYXNlKCkgKyBuZXh0LnNsaWNlKDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhY2M7XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRhZ0FyZyhpbmRleCkge1xuICAgIHJldHVybiBcIjwhLS1fX0FSR19fXCIgKyBpbmRleCArIFwiLS0+XCI7XG59XG5cbmZ1bmN0aW9uIG1hdGNoVGFnQXJnKHN0cikge1xuICAgIHJldHVybiBzdHIubWF0Y2goL19fQVJHX18oXFxkKykvKTtcbn1cblxuZnVuY3Rpb24gcmVwbGFjZVRhZ0FyZyhzdHIsIGZuKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKC88IS0tX19BUkdfXyhcXGQrKS0tPi8sIGZuKTtcbn1cblxuZnVuY3Rpb24gYXR0cmlidXRlU3RhcnRzKHN0cikge1xuICAgIHJldHVybiBzdHIudHJpbSgpLnNsaWNlKC0yKSA9PT0gXCI9XFxcIlwiO1xufVxuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3dlYkNvbXBvbmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjaGFuZ2VXZWJDb21wb25lbnRzSW1wbGVtZW5hdGlvblwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF93ZWJDb21wb25lbnRzLnNldEltcGxlbWVudGF0aW9uO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tcG9uZW50c1JlYWR5XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3dlYkNvbXBvbmVudHMuY29tcG9uZW50c1JlYWR5O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2hhbmdlV2ViQ29tcG9uZW50c1JlYWR5Q2hlY2tcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfd2ViQ29tcG9uZW50cy5zZXRSZWFkeUNoZWNrO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVnaXN0ZXJDb21wb25lbnRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93ZWJDb21wb25lbnRzKS5kZWZhdWx0O1xuICAgIH1cbn0pO1xuXG52YXIgX3N0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2hhbmdlU3RvcmVJbXBsZW1lbnRhdGlvblwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdG9yZS5zZXRJbXBsZW1lbnRhdGlvbjtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlZ2lzdGVyUmVkdWNlclwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdG9yZS5yZWdpc3RlclJlZHVjZXI7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZW1vdmVSZWR1Y2VyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3N0b3JlLnJlbW92ZVJlZHVjZXI7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdWJzY3JpYmVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfc3RvcmUuc3Vic2NyaWJlO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0U3RhdGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfc3RvcmUuZ2V0U3RhdGU7XG4gICAgfVxufSk7XG5cbnZhciBfaGFuZGxlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRUZW1wbGF0ZUhhbmRsZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfaGFuZGxlcnMuYWRkVGVtcGxhdGVIYW5kbGVyO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2V0Q29yZUhhbmRsZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfaGFuZGxlcnMuc2V0Q29yZUhhbmRsZXI7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1bmxvYWRIYW5kbGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2hhbmRsZXJzLnVubG9hZEhhbmRsZXI7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhY2Nlc3NIYW5kbGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2hhbmRsZXJzLmFjY2Vzc0hhbmRsZXI7XG4gICAgfVxufSk7XG5cbnZhciBfdGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaHRtbFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF90YWcuaHRtbDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNzc1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF90YWcuY3NzO1xuICAgIH1cbn0pO1xuXG52YXIgX3N0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRTdG9yYWdlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3N0b3JhZ2UuZ2V0U3RvcmFnZTtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFkZFN0b3JhZ2VcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfc3RvcmFnZS5hZGRTdG9yYWdlO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlU3RvcmFnZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdG9yYWdlLnJlbW92ZVN0b3JhZ2U7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXRTdG9yYWdlRHJpdmVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3N0b3JhZ2Uuc2V0U3RvcmFnZURyaXZlcjtcbiAgICB9XG59KTtcblxudmFyIF9iaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYmluZFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9iaW5kLmJpbmQ7XG4gICAgfVxufSk7XG5cbnZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJtYXRjaFRhZ0FyZ1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF91dGlscy5tYXRjaFRhZ0FyZztcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlcGxhY2VUYWdBcmdcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfdXRpbHMucmVwbGFjZVRhZ0FyZztcbiAgICB9XG59KTtcblxudmFyIF9Db21wb25lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDgpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJDb21wb25lbnRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9Db21wb25lbnQpLmRlZmF1bHQ7XG4gICAgfVxufSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKiovIH0pLFxuLyogNiAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZXhwb3J0cy5odG1sID0gaHRtbDtcbmV4cG9ydHMuY3NzID0gY3NzO1xuXG52YXIgX2hhbmRsZXJzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzKTtcblxudmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbmZ1bmN0aW9uIGh0bWwoc3RyaW5ncykge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdzWzBdO1xuICAgIH1cblxuICAgIHZhciB0cGwgPSBcIlwiO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0cGwgKz0gc3RyaW5nc1tpXTtcbiAgICAgICAgaWYgKGkgPCBzdHJpbmdzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGFyZ3NbaV0pICYmICgwLCBfdXRpbHMuYXR0cmlidXRlU3RhcnRzKSh0cGwpID09PSBmYWxzZSkgdHBsICs9IGFyZ3NbaV0uam9pbignJyk7ZWxzZSBpZiAodHlwZW9mIGFyZ3NbaV0gPT09IFwiZnVuY3Rpb25cIiB8fCBfdHlwZW9mKGFyZ3NbaV0pID09PSBcIm9iamVjdFwiKSB0cGwgKz0gKDAsIF91dGlscy5jcmVhdGVUYWdBcmcpKGkpO2Vsc2UgdHBsICs9IGFyZ3NbaV07XG4gICAgICAgIH1cbiAgICB9XG4gICAgdmFyIHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICAgIHRlbXBsYXRlLmlubmVySFRNTCA9IHRwbDtcbiAgICAoMCwgX2hhbmRsZXJzLmNhbGxIYW5kbGVycykodGVtcGxhdGUuY29udGVudCwgYXJncyk7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG5mdW5jdGlvbiBjc3Moc3RyaW5ncykge1xuICAgIHZhciByZXN1bHQgPSAnJztcblxuICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4yID4gMSA/IF9sZW4yIC0gMSA6IDApLCBfa2V5MiA9IDE7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgcmVzdWx0ICs9IHN0cmluZ3NbaV07XG4gICAgICAgIGlmIChpIDwgc3RyaW5ncy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbaV0gPT09IFwiZnVuY3Rpb25cIikgcmVzdWx0ICs9IGFyZ3NbaV0oKTtlbHNlIHJlc3VsdCArPSBhcmdzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbi8qKiovIH0pLFxuLyogNyAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmJpbmQgPSBiaW5kO1xuXG52YXIgX3N0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxudmFyIEtFWSA9IFwiQk9VTkRTXCI7XG52YXIgTUFYX1NUT1JBR0VfU0laRSA9IDEwMDtcblxuKDAsIF9zdG9yYWdlLmFkZFN0b3JhZ2UpKEtFWSwgbmV3IE1hcCgpKTtcblxuZnVuY3Rpb24gYXBwZW5kVG9TdG9yYWdlKGZuLCB2YWx1ZSkge1xuICAgIHZhciBzdG9yYWdlID0gKDAsIF9zdG9yYWdlLmdldFN0b3JhZ2UpKEtFWSk7XG4gICAgaWYgKHN0b3JhZ2Uuc2l6ZSA9PT0gTUFYX1NUT1JBR0VfU0laRSkge1xuICAgICAgICB2YXIga2V5cyA9IHN0b3JhZ2Uua2V5cygpO1xuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHN0b3JhZ2UuZGVsZXRlKGtleXMubmV4dCgpLnZhbHVlKTtcbiAgICB9XG4gICAgc3RvcmFnZS5zZXQoZm4sIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gYmluZChmbikge1xuICAgIHZhciBzdG9yYWdlID0gKDAsIF9zdG9yYWdlLmdldFN0b3JhZ2UpKEtFWSk7XG4gICAgdmFyIGJvdW5kID0gc3RvcmFnZS5nZXQoZm4pO1xuXG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgIH1cblxuICAgIHZhciBmaXJzdEFyZyA9IGFyZ3NbMF07XG4gICAgdmFyIGJvdW5kRm4gPSBmbi5iaW5kLmFwcGx5KGZuLCBbbnVsbF0uY29uY2F0KF90b0NvbnN1bWFibGVBcnJheShhcmdzKSkpO1xuICAgIGlmIChib3VuZCkge1xuICAgICAgICBpZiAoIWJvdW5kLmdldChmaXJzdEFyZykpIHtcbiAgICAgICAgICAgIGJvdW5kLnNldChmaXJzdEFyZywgYm91bmRGbik7XG4gICAgICAgICAgICByZXR1cm4gYm91bmRGbjtcbiAgICAgICAgfVxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHJldHVybiBib3VuZC5nZXQoZmlyc3RBcmcpO1xuICAgIH1cblxuICAgIHZhciBmbk1hcCA9IG5ldyBNYXAoKTtcbiAgICBmbk1hcC5zZXQoZmlyc3RBcmcsIGJvdW5kRm4pO1xuICAgIGFwcGVuZFRvU3RvcmFnZShmbiwgZm5NYXApO1xuICAgIHJldHVybiBib3VuZEZuO1xufVxuXG4vKioqLyB9KSxcbi8qIDggKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfY3JlYXRlQ2xhc3MgPSBmdW5jdGlvbiAoKSB7IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykgeyBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7IHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07IGRlc2NyaXB0b3IuZW51bWVyYWJsZSA9IGRlc2NyaXB0b3IuZW51bWVyYWJsZSB8fCBmYWxzZTsgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlOyBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlOyBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBkZXNjcmlwdG9yLmtleSwgZGVzY3JpcHRvcik7IH0gfSByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykgeyBpZiAocHJvdG9Qcm9wcykgZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpOyBpZiAoc3RhdGljUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTsgcmV0dXJuIENvbnN0cnVjdG9yOyB9OyB9KCk7XG5cbnZhciBfc3RvcmUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDIpO1xuXG52YXIgX3JlbmRlciA9IF9fd2VicGFja19yZXF1aXJlX18oOSk7XG5cbnZhciBfc3RvcmFnZSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfdXRpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQpO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzOyB9XG5cbnZhciBfZml4QmFiZWxFeHRlbmQgPSBmdW5jdGlvbiAoTykge1xuICAgIHZhciBnUE8gPSBPLmdldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChvKSB7XG4gICAgICAgIHJldHVybiBvLl9fcHJvdG9fXztcbiAgICB9LFxuICAgICAgICBzUE8gPSBPLnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIChvLCBwKSB7XG4gICAgICAgIG8uX19wcm90b19fID0gcDtcbiAgICAgICAgcmV0dXJuIG87XG4gICAgfSxcbiAgICAgICAgY29uc3RydWN0ID0gKHR5cGVvZiBSZWZsZWN0ID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YoUmVmbGVjdCkpID09PSAnb2JqZWN0JyA/IFJlZmxlY3QuY29uc3RydWN0IDogZnVuY3Rpb24gKFBhcmVudCwgYXJncywgQ2xhc3MpIHtcbiAgICAgICAgdmFyIENvbnN0cnVjdG9yLFxuICAgICAgICAgICAgYSA9IFtudWxsXTtcbiAgICAgICAgYS5wdXNoLmFwcGx5KGEsIGFyZ3MpO1xuICAgICAgICBDb25zdHJ1Y3RvciA9IFBhcmVudC5iaW5kLmFwcGx5KFBhcmVudCwgYSk7XG4gICAgICAgIHJldHVybiBzUE8obmV3IENvbnN0cnVjdG9yKCksIENsYXNzLnByb3RvdHlwZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBmdW5jdGlvbiBmaXhCYWJlbEV4dGVuZChDbGFzcykge1xuICAgICAgICB2YXIgUGFyZW50ID0gZ1BPKENsYXNzKTtcbiAgICAgICAgcmV0dXJuIHNQTyhDbGFzcywgc1BPKGZ1bmN0aW9uIFN1cGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNvbnN0cnVjdChQYXJlbnQsIGFyZ3VtZW50cywgZ1BPKHRoaXMpLmNvbnN0cnVjdG9yKTtcbiAgICAgICAgfSwgUGFyZW50KSk7XG4gICAgfTtcbn0oT2JqZWN0KTtcblxudmFyIHByb3BzU3RvcmFnZSA9ICgwLCBfc3RvcmFnZS5nZXRTdG9yYWdlKShfc3RvcmFnZS5zdG9yYWdlS2V5cy5QUk9QUyk7XG5cbmZ1bmN0aW9uIHBhcnNlQXR0cmlidXRlcyhhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIHJlc3VsdCA9IHt9O1xuICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcbiAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cbiAgICB0cnkge1xuICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSBhdHRyaWJ1dGVzW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgICByZXN1bHRbYXR0cmlidXRlLm5hbWVdID0gYXR0cmlidXRlLnZhbHVlO1xuICAgICAgICB9XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG52YXIgQ29tcG9uZW50ID0gX2ZpeEJhYmVsRXh0ZW5kKGZ1bmN0aW9uIChfSFRNTEVsZW1lbnQpIHtcbiAgICBfaW5oZXJpdHMoQ29tcG9uZW50LCBfSFRNTEVsZW1lbnQpO1xuXG4gICAgZnVuY3Rpb24gQ29tcG9uZW50KCkge1xuICAgICAgICB2YXIgX3JlZjtcblxuICAgICAgICB2YXIgX3RlbXAsIF90aGlzLCBfcmV0O1xuXG4gICAgICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBDb21wb25lbnQpO1xuXG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgICAgICBhcmdzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIF9yZXQgPSAoX3RlbXAgPSAoX3RoaXMgPSBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybih0aGlzLCAoX3JlZiA9IENvbXBvbmVudC5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKENvbXBvbmVudCkpLmNhbGwuYXBwbHkoX3JlZiwgW3RoaXNdLmNvbmNhdChhcmdzKSkpLCBfdGhpcyksIF90aGlzLl9fZGVmYXVsdFByb3BzID0ge30sIF90aGlzLnN1YnNjcmlwdGlvbnMgPSBbXSwgX3RoaXMuc3RhdGUgPSB7fSwgX3RoaXMubW91bnRlZCA9IGZhbHNlLCBfdGVtcCksIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKF90aGlzLCBfcmV0KTtcbiAgICB9XG5cbiAgICBfY3JlYXRlQ2xhc3MoQ29tcG9uZW50LCBbe1xuICAgICAgICBrZXk6IFwiYmVmb3JlUmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBiZWZvcmVSZW5kZXIoKSB7fVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgICAgICAgICAgcmV0dXJuICcnO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYWZ0ZXJSZW5kZXJcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFmdGVyUmVuZGVyKCkge31cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzdWJzY3JpYmVUb1N0b3JlXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBzdWJzY3JpYmVUb1N0b3JlKCkge1xuICAgICAgICAgICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICAgICAgICAgIHZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKGtleSkge1xuICAgICAgICAgICAgICAgIF90aGlzMi5zdWJzY3JpcHRpb25zLnB1c2goKDAsIF9zdG9yZS5zdWJzY3JpYmUpKGtleSwgZnVuY3Rpb24gKHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzMi5zdGF0ZVtrZXldID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIF9yZW5kZXIucmVuZGVyLmNhbGwoX3RoaXMyKTtcbiAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgICAgICAgICAgX3RoaXMyLnN0YXRlW2tleV0gPSAoMCwgX3N0b3JlLmdldFN0YXRlKShrZXkpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjIgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9IHRoaXMua2V5c1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIF9sb29wKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvcjIgPSBlcnI7XG4gICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgJiYgX2l0ZXJhdG9yMi5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJjb25uZWN0ZWRDYWxsYmFja1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZVRvU3RvcmUoKTtcbiAgICAgICAgICAgIF9yZW5kZXIucmVuZGVyLmNhbGwodGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMuY29ubmVjdGVkKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJjb25uZWN0ZWRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbm5lY3RlZCgpIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZGlzY29ubmVjdGVkQ2FsbGJhY2tcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjMgPSBmYWxzZTtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JFcnJvcjMgPSB1bmRlZmluZWQ7XG5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMyA9IHRoaXMuc3Vic2NyaXB0aW9uc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwMzsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IChfc3RlcDMgPSBfaXRlcmF0b3IzLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zID0gdHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgc3Vic2NyaXB0aW9uID0gX3N0ZXAzLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMyA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IzID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24zICYmIF9pdGVyYXRvcjMucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IzLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IzO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAoMCwgX3V0aWxzLmNsZWFyUHJvcHNTdG9yYWdlKSgpO1xuICAgICAgICAgICAgKDAsIF91dGlscy5jbGVhckV2ZW50c1N0b3JhZ2UpKCk7XG5cbiAgICAgICAgICAgIHRoaXMuZGlzY29ubmVjdGVkKCk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJkaXNjb25uZWN0ZWRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGRpc2Nvbm5lY3RlZCgpIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYWRvcHRlZENhbGxiYWNrXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZG9wdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgICAgICB0aGlzLnN1YnNjcmliZVRvU3RvcmUoKTtcbiAgICAgICAgICAgIF9yZW5kZXIucmVuZGVyLmNhbGwodGhpcyk7XG5cbiAgICAgICAgICAgIHRoaXMuYWRvcHRlZCgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYWRvcHRlZFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRvcHRlZCgpIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYXR0cmlidXRlTmFtZSwgb2xkVmFsdWUsIG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5tb3VudGVkICYmIG9sZFZhbHVlICE9IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5wcm9wc0NoYW5nZWQoX2V4dGVuZHMoe30sIHRoaXMucHJvcHMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgYXR0cmlidXRlTmFtZSwgbmV3VmFsdWUpKSk7XG4gICAgICAgICAgICAgICAgX3JlbmRlci5yZW5kZXIuY2FsbCh0aGlzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInByb3BzQ2hhbmdlZFwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gcHJvcHNDaGFuZ2VkKG5ld1Byb3BzKSB7fVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcIm5hbWVcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpLmNvbnN0cnVjdG9yLm5hbWU7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJpc1NoYWRvd1wiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwicHJvcHNcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2V4dGVuZHMoe30sIHRoaXMuX19kZWZhdWx0UHJvcHMsIHBhcnNlQXR0cmlidXRlcyh0aGlzLmF0dHJpYnV0ZXMpLCBwcm9wc1N0b3JhZ2UuZ2V0KHRoaXMpIHx8IHt9KTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiBzZXQocHJvcHMpIHtcbiAgICAgICAgICAgIHRoaXMuX19kZWZhdWx0UHJvcHMgPSBwcm9wcztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImtleXNcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJzdHlsZXNcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gXCJcIjtcbiAgICAgICAgfVxuICAgIH1dLCBbe1xuICAgICAgICBrZXk6IFwib2JzZXJ2ZWRBdHRyaWJ1dGVzXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMub2JzZXJ2YWJsZVByb3BzLm1hcChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgICAgICAgICAgIHZhciByZXMgPSBcIlwiO1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcHJvcC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAocHJvcFtpXSA9PT0gcHJvcFtpXS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgKz0gXCItXCIgKyBwcm9wW2ldLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXMgKz0gcHJvcFtpXTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICByZXR1cm4gcmVzO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJvYnNlcnZhYmxlUHJvcHNcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gW107XG4gICAgICAgIH1cbiAgICB9XSk7XG5cbiAgICByZXR1cm4gQ29tcG9uZW50O1xufShIVE1MRWxlbWVudCkpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBDb21wb25lbnQ7XG5cbi8qKiovIH0pLFxuLyogOSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLnJlbmRlciA9IHJlbmRlcjtcblxudmFyIF93ZWJDb21wb25lbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygxKTtcblxudmFyIF9zdG9yYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF9zaGFsbG93RXF1YWwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEwKTtcblxudmFyIF9zaGFsbG93RXF1YWwyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc2hhbGxvd0VxdWFsKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxudmFyIHByb3BzU3RvcmFnZSA9ICgwLCBfc3RvcmFnZS5nZXRTdG9yYWdlKShfc3RvcmFnZS5zdG9yYWdlS2V5cy5QUk9QUyk7XG5cbmZ1bmN0aW9uIG5vZGVFcXVhbHMoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSkge1xuICAgIHZhciBlbENsb25lID0gZWxlbWVudE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICB2YXIgZnJDbG9uZSA9IGZyYWdtZW50Tm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgIGlmIChwcm9wc1N0b3JhZ2UuZ2V0KGZyYWdtZW50Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuICgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KShwcm9wc1N0b3JhZ2UuZ2V0KGVsZW1lbnROb2RlKSwgcHJvcHNTdG9yYWdlLmdldChmcmFnbWVudE5vZGUpKSAmJiBlbENsb25lLmlzRXF1YWxOb2RlKGZyQ2xvbmUpO1xuICAgIH1cbiAgICByZXR1cm4gZWxDbG9uZS5pc0VxdWFsTm9kZShmckNsb25lKTtcbn1cblxuZnVuY3Rpb24gY29udGVudERpZmZlcihlbGVtZW50Tm9kZSwgZnJhZ21lbnROb2RlKSB7XG4gICAgcmV0dXJuIGVsZW1lbnROb2RlLmlzRXF1YWxOb2RlKGZyYWdtZW50Tm9kZSkgPT09IGZhbHNlO1xufVxuXG5mdW5jdGlvbiBlbGVtZW50c0RlbGV0ZWQoZWxlbWVudE5vZGVzLCBmcmFnbWVudE5vZGVzKSB7XG4gICAgaWYgKGVsZW1lbnROb2Rlcy5sZW5ndGggPiBmcmFnbWVudE5vZGVzLmxlbmd0aCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgaWYgKGVsZW1lbnROb2Rlc1tpXSAmJiAhZnJhZ21lbnROb2Rlc1tpXSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBbZWxlbWVudE5vZGVzW2ldXS5jb25jYXQoZWxlbWVudHNEZWxldGVkKEFycmF5LmZyb20oZWxlbWVudE5vZGVzKS5zbGljZShpICsgMSksIEFycmF5LmZyb20oZnJhZ21lbnROb2Rlcykuc2xpY2UoaSkpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICghbm9kZUVxdWFscyhlbGVtZW50Tm9kZXNbaV0sIGZyYWdtZW50Tm9kZXNbaV0pKSB7XG4gICAgICAgICAgICAgICAgdmFyIGRlbGV0ZWQgPSBlbGVtZW50c0RlbGV0ZWQoQXJyYXkuZnJvbShlbGVtZW50Tm9kZXMpLnNsaWNlKGkgKyAxKSwgQXJyYXkuZnJvbShmcmFnbWVudE5vZGVzKS5zbGljZShpKSk7XG4gICAgICAgICAgICAgICAgaWYgKGRlbGV0ZWQubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbZWxlbWVudE5vZGVzW2ldXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIFtdO1xufVxuXG5mdW5jdGlvbiBjaGlsZHJlbkNoYW5nZWRDb3VudChlbGVtZW50Tm9kZXMsIGZyYWdtZW50Tm9kZXMpIHtcbiAgICBpZiAoZWxlbWVudE5vZGVzLmxlbmd0aCA+IGZyYWdtZW50Tm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmcmFnbWVudE5vZGVzLmxlbmd0aDtcbiAgICB9XG4gICAgdmFyIGNoYW5nZWQgPSAwO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBlbENsb25lID0gZWxlbWVudE5vZGVzW2ldLmNsb25lTm9kZShmYWxzZSk7XG4gICAgICAgIHZhciBmckNsb25lID0gZnJhZ21lbnROb2Rlc1tpXS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICBpZiAoIW5vZGVFcXVhbHMoZWxlbWVudE5vZGVzW2ldLCBmcmFnbWVudE5vZGVzW2ldKSkge1xuICAgICAgICAgICAgaWYgKCFpc0VtcHR5Tm9kZShlbENsb25lKSAmJiAhaXNFbXB0eU5vZGUoZnJDbG9uZSkpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkKys7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoYW5nZWQ7XG59XG5cbmZ1bmN0aW9uIGFwcGVuZENoaWxkcmVuKGVsZW1lbnROb2RlLCBlbGVtZW50Q2hpbGRyZW4sIGZyYWdtZW50Q2hpbGRyZW4pIHtcbiAgICB2YXIgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgZm9yICh2YXIgaSA9IGVsZW1lbnRDaGlsZHJlbi5sZW5ndGg7IGkgPCBmcmFnbWVudENoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKGZyYWdtZW50Q2hpbGRyZW5baV0pO1xuICAgIH1cbiAgICBlbGVtZW50Tm9kZS5hcHBlbmRDaGlsZChmcmFnbWVudCk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJpYnV0ZXMoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSkge1xuICAgIHZhciBhdHRyaWJ1dGVzID0gZnJhZ21lbnROb2RlLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgdmFyIGVsZW1lbnRBdHRyaWJ1dGVzID0gZWxlbWVudE5vZGUuYXR0cmlidXRlcyB8fCBbXTtcbiAgICBpZiAoZWxlbWVudEF0dHJpYnV0ZXMubGVuZ3RoID4gYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50QXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGVsZW1lbnRBdHRyaWJ1dGVzW2ldO1xuICAgICAgICAgICAgaWYgKCFmcmFnbWVudE5vZGUuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZS5ub2RlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICBlbGVtZW50Tm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlLm5vZGVOYW1lKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXR0cmlidXRlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgdmFyIF9hdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW19pXTtcbiAgICAgICAgZWxlbWVudE5vZGUuc2V0QXR0cmlidXRlKF9hdHRyaWJ1dGUubm9kZU5hbWUsIF9hdHRyaWJ1dGUubm9kZVZhbHVlKTtcbiAgICB9XG4gICAgaWYgKHByb3BzU3RvcmFnZS5nZXQoZnJhZ21lbnROb2RlKSkge1xuICAgICAgICB2YXIgZWxQcm9wcyA9IHByb3BzU3RvcmFnZS5nZXQoZWxlbWVudE5vZGUpO1xuICAgICAgICB2YXIgZnJQcm9wcyA9IHByb3BzU3RvcmFnZS5nZXQoZnJhZ21lbnROb2RlKTtcbiAgICAgICAgcHJvcHNTdG9yYWdlLnNldChlbGVtZW50Tm9kZSwgZnJQcm9wcyk7XG4gICAgICAgIGlmICghKDAsIF9zaGFsbG93RXF1YWwyLmRlZmF1bHQpKGVsUHJvcHMsIGZyUHJvcHMpKSB7XG4gICAgICAgICAgICBpZiAoKDAsIF93ZWJDb21wb25lbnRzLmlzQ3VzdG9tQ29tcG9uZW50KShlbGVtZW50Tm9kZSkpIHtcbiAgICAgICAgICAgICAgICByZW5kZXIuY2FsbChlbGVtZW50Tm9kZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUVsZW1lbnQoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSkge1xuICAgIGlmICgoMCwgX3dlYkNvbXBvbmVudHMuaXNDdXN0b21Db21wb25lbnQpKGVsZW1lbnROb2RlKSkge1xuICAgICAgICByZXR1cm4gdXBkYXRlQXR0cmlidXRlcyhlbGVtZW50Tm9kZSwgZnJhZ21lbnROb2RlKTtcbiAgICB9XG4gICAgaWYgKCFub2RlRXF1YWxzKGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUpKSB7XG4gICAgICAgIHVwZGF0ZUF0dHJpYnV0ZXMoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSk7XG4gICAgfVxuICAgIHVwZGF0ZUNoaWxkcmVuKGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUpO1xufVxuXG5mdW5jdGlvbiBpc0VtcHR5Tm9kZShub2RlKSB7XG4gICAgaWYgKG5vZGUubm9kZVR5cGUgIT09IE5vZGUuVEVYVF9OT0RFKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUuY2hpbGROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5pbm5lclRleHQpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4obm9kZS5pbm5lclRleHQudHJpbSgpKSA9PT0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLmlubmVySFRNTCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihub2RlLmlubmVySFRNTC50cmltKCkpID09PSBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUudGV4dENvbnRlbnQpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4obm9kZS50ZXh0Q29udGVudC50cmltKCkpID09PSBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIG5vZGVGaWx0ZXIobm9kZSkge1xuICAgIGlmIChub2RlKSB7XG4gICAgICAgIHJldHVybiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgfHwgbm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5URVhUX05PREUpICYmIG5vZGUubm9kZU5hbWUgIT09IFwiU1RZTEVcIiAmJiAhaXNFbXB0eU5vZGUobm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gaGFuZGxlQ2hpbGRyZW5Db3VudENoYW5nZWQoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSwgZWxlbWVudE5vZGVzLCBmcmFnbWVudE5vZGVzKSB7XG4gICAgdmFyIGRlbGV0ZWQgPSBlbGVtZW50c0RlbGV0ZWQoZWxlbWVudE5vZGVzLCBmcmFnbWVudE5vZGVzKTtcbiAgICBpZiAoZnJhZ21lbnROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnROb2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGZyYWdtZW50Tm9kZSwgZWxlbWVudE5vZGUpO1xuICAgIH1cbiAgICBpZiAoZGVsZXRlZC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgZGVsZXRlZFswXS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGRlbGV0ZWRbMF0pO1xuICAgICAgICByZXR1cm4gdXBkYXRlQ2hpbGRyZW4oZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSk7XG4gICAgfVxuICAgIGlmIChjaGlsZHJlbkNoYW5nZWRDb3VudChlbGVtZW50Tm9kZXMsIGZyYWdtZW50Tm9kZXMpID4gMCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZnJhZ21lbnROb2RlLCBlbGVtZW50Tm9kZSk7XG4gICAgfVxuICAgIHJldHVybiBhcHBlbmRDaGlsZHJlbihlbGVtZW50Tm9kZSwgZWxlbWVudE5vZGVzLCBmcmFnbWVudE5vZGVzKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4oZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSkge1xuICAgIHZhciBlbGVtZW50Tm9kZXMgPSBBcnJheS5mcm9tKGVsZW1lbnROb2RlLmNoaWxkTm9kZXMpLmZpbHRlcihub2RlRmlsdGVyKTtcbiAgICB2YXIgZnJhZ21lbnROb2RlcyA9IEFycmF5LmZyb20oZnJhZ21lbnROb2RlLmNoaWxkTm9kZXMpLmZpbHRlcihub2RlRmlsdGVyKTtcbiAgICBpZiAoZWxlbWVudE5vZGVzLmxlbmd0aCAhPT0gZnJhZ21lbnROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNoaWxkcmVuQ291bnRDaGFuZ2VkKGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUsIGVsZW1lbnROb2RlcywgZnJhZ21lbnROb2Rlcyk7XG4gICAgfVxuICAgIGlmIChlbGVtZW50Tm9kZXMubGVuZ3RoID09PSAwICYmIGZyYWdtZW50Tm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIGlmIChjb250ZW50RGlmZmVyKGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUpKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbWVudE5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoZnJhZ21lbnROb2RlLCBlbGVtZW50Tm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50Tm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdXBkYXRlRWxlbWVudChlbGVtZW50Tm9kZXNbaV0sIGZyYWdtZW50Tm9kZXNbaV0pO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gY3JlYXRlRnJhZ21lbnRGcm9tU3RyKHRwbCkge1xuICAgIHZhciB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSB0cGw7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG5mdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IHN0YXJ0IHJlbmRlcmluZycpO1xuICAgIHRoaXMuYmVmb3JlUmVuZGVyKCk7XG5cbiAgICBpZiAodGhpcy5pc1NoYWRvdyAmJiAhdGhpcy5zaGFkb3dSb290KSB7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBhdHRhY2hpbmcgcm9vdCcpO1xuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7IG1vZGU6ICdvcGVuJyB9KTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IHJvb3QgYXR0YWNoZWQnKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShcIm11c2tvdCBhdHRhY2ggcm9vdFwiLCAnbXVza290IGF0dGFjaGluZyByb290JywgJ211c2tvdCByb290IGF0dGFjaGVkJyk7XG4gICAgfVxuICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBjcmVhdGUgcmVuZGVyIERPTScpO1xuICAgIHZhciByZW5kZXJSZXMgPSB0aGlzLnJlbmRlcigpO1xuICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCByZW5kZXIgRE9NIGNyZWF0ZWQnKTtcbiAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKFwibXVza290IGNvbXBvbmVudCByZW5kZXIgcmVzdWx0XCIsICdtdXNrb3QgY3JlYXRlIHJlbmRlciBET00nLCAnbXVza290IHJlbmRlciBET00gY3JlYXRlZCcpO1xuXG4gICAgdmFyIHJvb3QgPSB0aGlzLmlzU2hhZG93ID8gdGhpcy5zaGFkb3dSb290IDogdGhpcztcbiAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgY3JlYXRlIGZyYWdtZW50Jyk7XG4gICAgdmFyIGZyYWdtZW50ID0gdHlwZW9mIHJlbmRlclJlcyA9PT0gXCJzdHJpbmdcIiA/IGNyZWF0ZUZyYWdtZW50RnJvbVN0cihyZW5kZXJSZXMpIDogcmVuZGVyUmVzO1xuICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBmcmFnbWVudCBjcmVhdGVkJyk7XG4gICAgcGVyZm9ybWFuY2UubWVhc3VyZShcIm11c2tvdCBmcmFnbWVudCBjcmVhdGlvblwiLCAnbXVza290IGNyZWF0ZSBmcmFnbWVudCcsICdtdXNrb3QgZnJhZ21lbnQgY3JlYXRlZCcpO1xuXG4gICAgaWYgKCF0aGlzLm1vdW50ZWQpIHtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGluc2VydCBzdHlsZSBpbnRvIGNvbXBvbmVudCcpO1xuICAgICAgICByb290LmlubmVySFRNTCA9IFwiPHN0eWxlPlwiICsgdGhpcy5zdHlsZXMgKyBcIjwvc3R5bGU+XCI7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBzdHlsZSBpbnNlcnRlZCcpO1xuICAgICAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKFwibXVza290IHN0eWxlIGNyZWF0aW9uICYgaW5zZXJ0IGJ5IGlubmVySFRNTFwiLCAnbXVza290IGluc2VydCBzdHlsZSBpbnRvIGNvbXBvbmVudCcsICdtdXNrb3Qgc3R5bGUgaW5zZXJ0ZWQnKTtcblxuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgYXBwZW5kIGNoaWxkIHdpdGggY29udGVudCcpO1xuICAgICAgICByb290LmFwcGVuZENoaWxkKGZyYWdtZW50LmNvbnRlbnQpO1xuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgY29udGVudCBhcHBlbmRlZCcpO1xuICAgICAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKFwibXVza290IGFwcGVuZCBjb250ZW50IG9uIGluaXRpYWwgcmVuZGVyXCIsICdtdXNrb3QgYXBwZW5kIGNoaWxkIHdpdGggY29udGVudCcsICdtdXNrb3QgY29udGVudCBhcHBlbmRlZCcpO1xuXG4gICAgICAgIHRoaXMubW91bnRlZCA9IHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGluc2VydCBzdHlsZXMgYmVmb3JlIGNvbnRlbnQgb24gdXBkYXRlJyk7XG4gICAgICAgIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgc3R5bGUuaW5uZXJIVE1MID0gdGhpcy5zdHlsZXM7XG4gICAgICAgIGZyYWdtZW50LmNvbnRlbnQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBmcmFnbWVudC5jb250ZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3Qgc3R5bGVzIGluc2VydGVkIG9uIHVwZGF0ZScpO1xuICAgICAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKFwibXVza290IGFkZCBzdHlsZXMgYnkgaW5zZXJ0QmVmb3JlXCIsICdtdXNrb3QgaW5zZXJ0IHN0eWxlcyBiZWZvcmUgY29udGVudCBvbiB1cGRhdGUnLCAnbXVza290IHN0eWxlcyBpbnNlcnRlZCBvbiB1cGRhdGUnKTtcblxuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgdXBkYXRlIGNoaWxkcmVuJyk7XG4gICAgICAgIHVwZGF0ZUNoaWxkcmVuKHJvb3QsIGZyYWdtZW50LmNvbnRlbnQpO1xuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgY2hpbGRyZW4gdXBkYXRlZCcpO1xuICAgICAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKFwibXVza290IHVwZGF0ZSBjb21wb25lbnQncyBjaGlsZHJlblwiLCAnbXVza290IHVwZGF0ZSBjaGlsZHJlbicsICdtdXNrb3QgY2hpbGRyZW4gdXBkYXRlZCcpO1xuICAgIH1cbiAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgZmluaXNoIHJlbmRlcmluZycpO1xuICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXCJtdXNrb3QgZnVsbCByZW5kZXJcIiwgJ211c2tvdCBzdGFydCByZW5kZXJpbmcnLCAnbXVza290IGZpbmlzaCByZW5kZXJpbmcnKTtcblxuICAgIHRoaXMuYWZ0ZXJSZW5kZXIoKTtcbn1cblxuLyoqKi8gfSksXG4vKiAxMCAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAgICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAgICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICAgICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakEsIG9iakIpIHtcbiAgICBpZiAoaXMob2JqQSwgb2JqQikpIHtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgaWYgKCh0eXBlb2Ygb2JqQSA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqQSkpICE9PSAnb2JqZWN0JyB8fCBvYmpBID09PSBudWxsIHx8ICh0eXBlb2Ygb2JqQiA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2Yob2JqQikpICE9PSAnb2JqZWN0JyB8fCBvYmpCID09PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhvYmpBKTtcbiAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhvYmpCKTtcblxuICAgIGlmIChrZXlzQS5sZW5ndGggIT09IGtleXNCLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgLy8gVGVzdCBmb3IgQSdzIGtleXMgZGlmZmVyZW50IGZyb20gQi5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXNBLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICghaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHwgIWlzKG9iakFba2V5c0FbaV1dLCBvYmpCW2tleXNBW2ldXSkpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnRzLmRlZmF1bHQgPSBzaGFsbG93RXF1YWw7XG5cbi8qKiovIH0pLFxuLyogMTEgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX2luZGV4ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg1KTtcblxuT2JqZWN0LmtleXMoX2luZGV4KS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICBpZiAoa2V5ID09PSBcImRlZmF1bHRcIiB8fCBrZXkgPT09IFwiX19lc01vZHVsZVwiKSByZXR1cm47XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwge1xuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiBfaW5kZXhba2V5XTtcbiAgICAgICAgfVxuICAgIH0pO1xufSk7XG5cblxuKDAsIF9pbmRleC5jaGFuZ2VXZWJDb21wb25lbnRzUmVhZHlDaGVjaykoZnVuY3Rpb24gKCkge1xuICAgIGlmICgnY3VzdG9tRWxlbWVudHMnIGluIHdpbmRvdykge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgUHJvbWlzZSgpIDwgbnVsbCA+IGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIF9fd2VicGFja19yZXF1aXJlX18oMTIpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ1dlYkNvbXBvbmVudHNSZWFkeScsIHJlc29sdmUpO1xuICAgICAgICB9KTtcbiAgICB9O1xufSk7XG5cbi8qKiovIH0pLFxuLyogMTIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuKGZ1bmN0aW9uKCl7XG4ndXNlIHN0cmljdCc7dmFyIGg9bmV3IGZ1bmN0aW9uKCl7fTt2YXIgYWE9bmV3IFNldChcImFubm90YXRpb24teG1sIGNvbG9yLXByb2ZpbGUgZm9udC1mYWNlIGZvbnQtZmFjZS1zcmMgZm9udC1mYWNlLXVyaSBmb250LWZhY2UtZm9ybWF0IGZvbnQtZmFjZS1uYW1lIG1pc3NpbmctZ2x5cGhcIi5zcGxpdChcIiBcIikpO2Z1bmN0aW9uIG0oYil7dmFyIGE9YWEuaGFzKGIpO2I9L15bYS16XVsuMC05X2Etel0qLVtcXC0uMC05X2Etel0qJC8udGVzdChiKTtyZXR1cm4hYSYmYn1mdW5jdGlvbiBuKGIpe3ZhciBhPWIuaXNDb25uZWN0ZWQ7aWYodm9pZCAwIT09YSlyZXR1cm4gYTtmb3IoO2ImJiEoYi5fX0NFX2lzSW1wb3J0RG9jdW1lbnR8fGIgaW5zdGFuY2VvZiBEb2N1bWVudCk7KWI9Yi5wYXJlbnROb2RlfHwod2luZG93LlNoYWRvd1Jvb3QmJmIgaW5zdGFuY2VvZiBTaGFkb3dSb290P2IuaG9zdDp2b2lkIDApO3JldHVybiEoIWJ8fCEoYi5fX0NFX2lzSW1wb3J0RG9jdW1lbnR8fGIgaW5zdGFuY2VvZiBEb2N1bWVudCkpfVxuZnVuY3Rpb24gcChiLGEpe2Zvcig7YSYmYSE9PWImJiFhLm5leHRTaWJsaW5nOylhPWEucGFyZW50Tm9kZTtyZXR1cm4gYSYmYSE9PWI/YS5uZXh0U2libGluZzpudWxsfVxuZnVuY3Rpb24gdChiLGEsYyl7Yz1jP2M6bmV3IFNldDtmb3IodmFyIGQ9YjtkOyl7aWYoZC5ub2RlVHlwZT09PU5vZGUuRUxFTUVOVF9OT0RFKXt2YXIgZT1kO2EoZSk7dmFyIGY9ZS5sb2NhbE5hbWU7aWYoXCJsaW5rXCI9PT1mJiZcImltcG9ydFwiPT09ZS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikpe2Q9ZS5pbXBvcnQ7aWYoZCBpbnN0YW5jZW9mIE5vZGUmJiFjLmhhcyhkKSlmb3IoYy5hZGQoZCksZD1kLmZpcnN0Q2hpbGQ7ZDtkPWQubmV4dFNpYmxpbmcpdChkLGEsYyk7ZD1wKGIsZSk7Y29udGludWV9ZWxzZSBpZihcInRlbXBsYXRlXCI9PT1mKXtkPXAoYixlKTtjb250aW51ZX1pZihlPWUuX19DRV9zaGFkb3dSb290KWZvcihlPWUuZmlyc3RDaGlsZDtlO2U9ZS5uZXh0U2libGluZyl0KGUsYSxjKX1kPWQuZmlyc3RDaGlsZD9kLmZpcnN0Q2hpbGQ6cChiLGQpfX1mdW5jdGlvbiB1KGIsYSxjKXtiW2FdPWN9O2Z1bmN0aW9uIHYoKXt0aGlzLmE9bmV3IE1hcDt0aGlzLnM9bmV3IE1hcDt0aGlzLmY9W107dGhpcy5iPSExfWZ1bmN0aW9uIGJhKGIsYSxjKXtiLmEuc2V0KGEsYyk7Yi5zLnNldChjLmNvbnN0cnVjdG9yLGMpfWZ1bmN0aW9uIHcoYixhKXtiLmI9ITA7Yi5mLnB1c2goYSl9ZnVuY3Rpb24geChiLGEpe2IuYiYmdChhLGZ1bmN0aW9uKGEpe3JldHVybiB5KGIsYSl9KX1mdW5jdGlvbiB5KGIsYSl7aWYoYi5iJiYhYS5fX0NFX3BhdGNoZWQpe2EuX19DRV9wYXRjaGVkPSEwO2Zvcih2YXIgYz0wO2M8Yi5mLmxlbmd0aDtjKyspYi5mW2NdKGEpfX1mdW5jdGlvbiB6KGIsYSl7dmFyIGM9W107dChhLGZ1bmN0aW9uKGIpe3JldHVybiBjLnB1c2goYil9KTtmb3IoYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdOzE9PT1kLl9fQ0Vfc3RhdGU/Yi5jb25uZWN0ZWRDYWxsYmFjayhkKTpBKGIsZCl9fVxuZnVuY3Rpb24gQihiLGEpe3ZhciBjPVtdO3QoYSxmdW5jdGlvbihiKXtyZXR1cm4gYy5wdXNoKGIpfSk7Zm9yKGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTsxPT09ZC5fX0NFX3N0YXRlJiZiLmRpc2Nvbm5lY3RlZENhbGxiYWNrKGQpfX1cbmZ1bmN0aW9uIEMoYixhLGMpe2M9Yz9jOnt9O3ZhciBkPWMud3x8bmV3IFNldCxlPWMuaXx8ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYixhKX0sZj1bXTt0KGEsZnVuY3Rpb24oYSl7aWYoXCJsaW5rXCI9PT1hLmxvY2FsTmFtZSYmXCJpbXBvcnRcIj09PWEuZ2V0QXR0cmlidXRlKFwicmVsXCIpKXt2YXIgYz1hLmltcG9ydDtjIGluc3RhbmNlb2YgTm9kZSYmKGMuX19DRV9pc0ltcG9ydERvY3VtZW50PSEwLGMuX19DRV9oYXNSZWdpc3RyeT0hMCk7YyYmXCJjb21wbGV0ZVwiPT09Yy5yZWFkeVN0YXRlP2MuX19DRV9kb2N1bWVudExvYWRIYW5kbGVkPSEwOmEuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIixmdW5jdGlvbigpe3ZhciBjPWEuaW1wb3J0O2lmKCFjLl9fQ0VfZG9jdW1lbnRMb2FkSGFuZGxlZCl7Yy5fX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQ9ITA7dmFyIGY9bmV3IFNldChkKTtmLmRlbGV0ZShjKTtDKGIsYyx7dzpmLGk6ZX0pfX0pfWVsc2UgZi5wdXNoKGEpfSxkKTtpZihiLmIpZm9yKGE9MDthPFxuZi5sZW5ndGg7YSsrKXkoYixmW2FdKTtmb3IoYT0wO2E8Zi5sZW5ndGg7YSsrKWUoZlthXSl9XG5mdW5jdGlvbiBBKGIsYSl7aWYodm9pZCAwPT09YS5fX0NFX3N0YXRlKXt2YXIgYz1hLm93bmVyRG9jdW1lbnQ7aWYoYy5kZWZhdWx0Vmlld3x8Yy5fX0NFX2lzSW1wb3J0RG9jdW1lbnQmJmMuX19DRV9oYXNSZWdpc3RyeSlpZihjPWIuYS5nZXQoYS5sb2NhbE5hbWUpKXtjLmNvbnN0cnVjdGlvblN0YWNrLnB1c2goYSk7dmFyIGQ9Yy5jb25zdHJ1Y3Rvcjt0cnl7dHJ5e2lmKG5ldyBkIT09YSl0aHJvdyBFcnJvcihcIlRoZSBjdXN0b20gZWxlbWVudCBjb25zdHJ1Y3RvciBkaWQgbm90IHByb2R1Y2UgdGhlIGVsZW1lbnQgYmVpbmcgdXBncmFkZWQuXCIpO31maW5hbGx5e2MuY29uc3RydWN0aW9uU3RhY2sucG9wKCl9fWNhdGNoKHIpe3Rocm93IGEuX19DRV9zdGF0ZT0yLHI7fWEuX19DRV9zdGF0ZT0xO2EuX19DRV9kZWZpbml0aW9uPWM7aWYoYy5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2spZm9yKGM9Yy5vYnNlcnZlZEF0dHJpYnV0ZXMsZD0wO2Q8Yy5sZW5ndGg7ZCsrKXt2YXIgZT1jW2RdLFxuZj1hLmdldEF0dHJpYnV0ZShlKTtudWxsIT09ZiYmYi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soYSxlLG51bGwsZixudWxsKX1uKGEpJiZiLmNvbm5lY3RlZENhbGxiYWNrKGEpfX19di5wcm90b3R5cGUuY29ubmVjdGVkQ2FsbGJhY2s9ZnVuY3Rpb24oYil7dmFyIGE9Yi5fX0NFX2RlZmluaXRpb247YS5jb25uZWN0ZWRDYWxsYmFjayYmYS5jb25uZWN0ZWRDYWxsYmFjay5jYWxsKGIpfTt2LnByb3RvdHlwZS5kaXNjb25uZWN0ZWRDYWxsYmFjaz1mdW5jdGlvbihiKXt2YXIgYT1iLl9fQ0VfZGVmaW5pdGlvbjthLmRpc2Nvbm5lY3RlZENhbGxiYWNrJiZhLmRpc2Nvbm5lY3RlZENhbGxiYWNrLmNhbGwoYil9O1xudi5wcm90b3R5cGUuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrPWZ1bmN0aW9uKGIsYSxjLGQsZSl7dmFyIGY9Yi5fX0NFX2RlZmluaXRpb247Zi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2smJi0xPGYub2JzZXJ2ZWRBdHRyaWJ1dGVzLmluZGV4T2YoYSkmJmYuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrLmNhbGwoYixhLGMsZCxlKX07ZnVuY3Rpb24gRChiLGEpe3RoaXMuYz1iO3RoaXMuYT1hO3RoaXMuYj12b2lkIDA7Qyh0aGlzLmMsdGhpcy5hKTtcImxvYWRpbmdcIj09PXRoaXMuYS5yZWFkeVN0YXRlJiYodGhpcy5iPW5ldyBNdXRhdGlvbk9ic2VydmVyKHRoaXMuZi5iaW5kKHRoaXMpKSx0aGlzLmIub2JzZXJ2ZSh0aGlzLmEse2NoaWxkTGlzdDohMCxzdWJ0cmVlOiEwfSkpfWZ1bmN0aW9uIEUoYil7Yi5iJiZiLmIuZGlzY29ubmVjdCgpfUQucHJvdG90eXBlLmY9ZnVuY3Rpb24oYil7dmFyIGE9dGhpcy5hLnJlYWR5U3RhdGU7XCJpbnRlcmFjdGl2ZVwiIT09YSYmXCJjb21wbGV0ZVwiIT09YXx8RSh0aGlzKTtmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKWZvcih2YXIgYz1iW2FdLmFkZGVkTm9kZXMsZD0wO2Q8Yy5sZW5ndGg7ZCsrKUModGhpcy5jLGNbZF0pfTtmdW5jdGlvbiBjYSgpe3ZhciBiPXRoaXM7dGhpcy5iPXRoaXMuYT12b2lkIDA7dGhpcy5mPW5ldyBQcm9taXNlKGZ1bmN0aW9uKGEpe2IuYj1hO2IuYSYmYShiLmEpfSl9ZnVuY3Rpb24gRihiKXtpZihiLmEpdGhyb3cgRXJyb3IoXCJBbHJlYWR5IHJlc29sdmVkLlwiKTtiLmE9dm9pZCAwO2IuYiYmYi5iKHZvaWQgMCl9O2Z1bmN0aW9uIEcoYil7dGhpcy5qPSExO3RoaXMuYz1iO3RoaXMubz1uZXcgTWFwO3RoaXMubD1mdW5jdGlvbihiKXtyZXR1cm4gYigpfTt0aGlzLmc9ITE7dGhpcy5tPVtdO3RoaXMudT1uZXcgRChiLGRvY3VtZW50KX1cbkcucHJvdG90eXBlLmRlZmluZT1mdW5jdGlvbihiLGEpe3ZhciBjPXRoaXM7aWYoIShhIGluc3RhbmNlb2YgRnVuY3Rpb24pKXRocm93IG5ldyBUeXBlRXJyb3IoXCJDdXN0b20gZWxlbWVudCBjb25zdHJ1Y3RvcnMgbXVzdCBiZSBmdW5jdGlvbnMuXCIpO2lmKCFtKGIpKXRocm93IG5ldyBTeW50YXhFcnJvcihcIlRoZSBlbGVtZW50IG5hbWUgJ1wiK2IrXCInIGlzIG5vdCB2YWxpZC5cIik7aWYodGhpcy5jLmEuZ2V0KGIpKXRocm93IEVycm9yKFwiQSBjdXN0b20gZWxlbWVudCB3aXRoIG5hbWUgJ1wiK2IrXCInIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZC5cIik7aWYodGhpcy5qKXRocm93IEVycm9yKFwiQSBjdXN0b20gZWxlbWVudCBpcyBhbHJlYWR5IGJlaW5nIGRlZmluZWQuXCIpO3RoaXMuaj0hMDt2YXIgZCxlLGYscixrO3RyeXt2YXIgZz1mdW5jdGlvbihiKXt2YXIgYT1sW2JdO2lmKHZvaWQgMCE9PWEmJiEoYSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl0aHJvdyBFcnJvcihcIlRoZSAnXCIrYitcIicgY2FsbGJhY2sgbXVzdCBiZSBhIGZ1bmN0aW9uLlwiKTtcbnJldHVybiBhfSxsPWEucHJvdG90eXBlO2lmKCEobCBpbnN0YW5jZW9mIE9iamVjdCkpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSBjdXN0b20gZWxlbWVudCBjb25zdHJ1Y3RvcidzIHByb3RvdHlwZSBpcyBub3QgYW4gb2JqZWN0LlwiKTtkPWcoXCJjb25uZWN0ZWRDYWxsYmFja1wiKTtlPWcoXCJkaXNjb25uZWN0ZWRDYWxsYmFja1wiKTtmPWcoXCJhZG9wdGVkQ2FsbGJhY2tcIik7cj1nKFwiYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrXCIpO2s9YS5vYnNlcnZlZEF0dHJpYnV0ZXN8fFtdfWNhdGNoKHEpe3JldHVybn1maW5hbGx5e3RoaXMuaj0hMX1hPXtsb2NhbE5hbWU6Yixjb25zdHJ1Y3RvcjphLGNvbm5lY3RlZENhbGxiYWNrOmQsZGlzY29ubmVjdGVkQ2FsbGJhY2s6ZSxhZG9wdGVkQ2FsbGJhY2s6ZixhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s6cixvYnNlcnZlZEF0dHJpYnV0ZXM6ayxjb25zdHJ1Y3Rpb25TdGFjazpbXX07YmEodGhpcy5jLGIsYSk7dGhpcy5tLnB1c2goYSk7dGhpcy5nfHxcbih0aGlzLmc9ITAsdGhpcy5sKGZ1bmN0aW9uKCl7cmV0dXJuIGRhKGMpfSkpfTtHLnByb3RvdHlwZS5pPWZ1bmN0aW9uKGIpe0ModGhpcy5jLGIpfTtmdW5jdGlvbiBkYShiKXtpZighMSE9PWIuZyl7Yi5nPSExO2Zvcih2YXIgYT1iLm0sYz1bXSxkPW5ldyBNYXAsZT0wO2U8YS5sZW5ndGg7ZSsrKWQuc2V0KGFbZV0ubG9jYWxOYW1lLFtdKTtDKGIuYyxkb2N1bWVudCx7aTpmdW5jdGlvbihhKXtpZih2b2lkIDA9PT1hLl9fQ0Vfc3RhdGUpe3ZhciBlPWEubG9jYWxOYW1lLGY9ZC5nZXQoZSk7Zj9mLnB1c2goYSk6Yi5jLmEuZ2V0KGUpJiZjLnB1c2goYSl9fX0pO2ZvcihlPTA7ZTxjLmxlbmd0aDtlKyspQShiLmMsY1tlXSk7Zm9yKDswPGEubGVuZ3RoOyl7Zm9yKHZhciBmPWEuc2hpZnQoKSxlPWYubG9jYWxOYW1lLGY9ZC5nZXQoZi5sb2NhbE5hbWUpLHI9MDtyPGYubGVuZ3RoO3IrKylBKGIuYyxmW3JdKTsoZT1iLm8uZ2V0KGUpKSYmRihlKX19fVxuRy5wcm90b3R5cGUuZ2V0PWZ1bmN0aW9uKGIpe2lmKGI9dGhpcy5jLmEuZ2V0KGIpKXJldHVybiBiLmNvbnN0cnVjdG9yfTtHLnByb3RvdHlwZS53aGVuRGVmaW5lZD1mdW5jdGlvbihiKXtpZighbShiKSlyZXR1cm4gUHJvbWlzZS5yZWplY3QobmV3IFN5bnRheEVycm9yKFwiJ1wiK2IrXCInIGlzIG5vdCBhIHZhbGlkIGN1c3RvbSBlbGVtZW50IG5hbWUuXCIpKTt2YXIgYT10aGlzLm8uZ2V0KGIpO2lmKGEpcmV0dXJuIGEuZjthPW5ldyBjYTt0aGlzLm8uc2V0KGIsYSk7dGhpcy5jLmEuZ2V0KGIpJiYhdGhpcy5tLnNvbWUoZnVuY3Rpb24oYSl7cmV0dXJuIGEubG9jYWxOYW1lPT09Yn0pJiZGKGEpO3JldHVybiBhLmZ9O0cucHJvdG90eXBlLnY9ZnVuY3Rpb24oYil7RSh0aGlzLnUpO3ZhciBhPXRoaXMubDt0aGlzLmw9ZnVuY3Rpb24oYyl7cmV0dXJuIGIoZnVuY3Rpb24oKXtyZXR1cm4gYShjKX0pfX07d2luZG93LkN1c3RvbUVsZW1lbnRSZWdpc3RyeT1HO1xuRy5wcm90b3R5cGUuZGVmaW5lPUcucHJvdG90eXBlLmRlZmluZTtHLnByb3RvdHlwZS51cGdyYWRlPUcucHJvdG90eXBlLmk7Ry5wcm90b3R5cGUuZ2V0PUcucHJvdG90eXBlLmdldDtHLnByb3RvdHlwZS53aGVuRGVmaW5lZD1HLnByb3RvdHlwZS53aGVuRGVmaW5lZDtHLnByb3RvdHlwZS5wb2x5ZmlsbFdyYXBGbHVzaENhbGxiYWNrPUcucHJvdG90eXBlLnY7dmFyIEg9d2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50LEk9d2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5jcmVhdGVFbGVtZW50TlMsZWE9d2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5pbXBvcnROb2RlLGZhPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUucHJlcGVuZCxnYT13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmFwcGVuZCxoYT13aW5kb3cuRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUucHJlcGVuZCxpYT13aW5kb3cuRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUuYXBwZW5kLEo9d2luZG93Lk5vZGUucHJvdG90eXBlLmNsb25lTm9kZSxLPXdpbmRvdy5Ob2RlLnByb3RvdHlwZS5hcHBlbmRDaGlsZCxMPXdpbmRvdy5Ob2RlLnByb3RvdHlwZS5pbnNlcnRCZWZvcmUsTT13aW5kb3cuTm9kZS5wcm90b3R5cGUucmVtb3ZlQ2hpbGQsTj13aW5kb3cuTm9kZS5wcm90b3R5cGUucmVwbGFjZUNoaWxkLE89T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuTm9kZS5wcm90b3R5cGUsXG5cInRleHRDb250ZW50XCIpLFA9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmF0dGFjaFNoYWRvdyxRPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LkVsZW1lbnQucHJvdG90eXBlLFwiaW5uZXJIVE1MXCIpLFI9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZSxTPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGUsVD13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlLFU9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmdldEF0dHJpYnV0ZU5TLGphPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5zZXRBdHRyaWJ1dGVOUyxrYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlQXR0cmlidXRlTlMsbGE9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50RWxlbWVudCxtYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuaW5zZXJ0QWRqYWNlbnRIVE1MLG5hPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5wcmVwZW5kLFxub2E9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmFwcGVuZCxWPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5iZWZvcmUscGE9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmFmdGVyLHFhPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZXBsYWNlV2l0aCxyYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucmVtb3ZlLHNhPXdpbmRvdy5IVE1MRWxlbWVudCxXPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZSxcImlubmVySFRNTFwiKSx0YT13aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50RWxlbWVudCx1YT13aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50SFRNTDtmdW5jdGlvbiB2YSgpe3ZhciBiPVg7d2luZG93LkhUTUxFbGVtZW50PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gYSgpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IsZD1iLnMuZ2V0KGEpO2lmKCFkKXRocm93IEVycm9yKFwiVGhlIGN1c3RvbSBlbGVtZW50IGJlaW5nIGNvbnN0cnVjdGVkIHdhcyBub3QgcmVnaXN0ZXJlZCB3aXRoIGBjdXN0b21FbGVtZW50c2AuXCIpO3ZhciBlPWQuY29uc3RydWN0aW9uU3RhY2s7aWYoIWUubGVuZ3RoKXJldHVybiBlPUguY2FsbChkb2N1bWVudCxkLmxvY2FsTmFtZSksT2JqZWN0LnNldFByb3RvdHlwZU9mKGUsYS5wcm90b3R5cGUpLGUuX19DRV9zdGF0ZT0xLGUuX19DRV9kZWZpbml0aW9uPWQseShiLGUpLGU7dmFyIGQ9ZS5sZW5ndGgtMSxmPWVbZF07aWYoZj09PWgpdGhyb3cgRXJyb3IoXCJUaGUgSFRNTEVsZW1lbnQgY29uc3RydWN0b3Igd2FzIGVpdGhlciBjYWxsZWQgcmVlbnRyYW50bHkgZm9yIHRoaXMgY29uc3RydWN0b3Igb3IgY2FsbGVkIG11bHRpcGxlIHRpbWVzLlwiKTtcbmVbZF09aDtPYmplY3Quc2V0UHJvdG90eXBlT2YoZixhLnByb3RvdHlwZSk7eShiLGYpO3JldHVybiBmfWEucHJvdG90eXBlPXNhLnByb3RvdHlwZTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYS5wcm90b3R5cGUsXCJjb25zdHJ1Y3RvclwiLHt3cml0YWJsZTohMCxjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMSx2YWx1ZTphfSk7cmV0dXJuIGF9KCl9O2Z1bmN0aW9uIFkoYixhLGMpe2Z1bmN0aW9uIGQoYSl7cmV0dXJuIGZ1bmN0aW9uKGMpe2Zvcih2YXIgZT1bXSxkPTA7ZDxhcmd1bWVudHMubGVuZ3RoOysrZCllW2QtMF09YXJndW1lbnRzW2RdO2Zvcih2YXIgZD1bXSxmPVtdLGw9MDtsPGUubGVuZ3RoO2wrKyl7dmFyIHE9ZVtsXTtxIGluc3RhbmNlb2YgRWxlbWVudCYmbihxKSYmZi5wdXNoKHEpO2lmKHEgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KWZvcihxPXEuZmlyc3RDaGlsZDtxO3E9cS5uZXh0U2libGluZylkLnB1c2gocSk7ZWxzZSBkLnB1c2gocSl9YS5hcHBseSh0aGlzLGUpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKyspQihiLGZbZV0pO2lmKG4odGhpcykpZm9yKGU9MDtlPGQubGVuZ3RoO2UrKylmPWRbZV0sZiBpbnN0YW5jZW9mIEVsZW1lbnQmJnooYixmKX19Yy5oJiYoYS5wcmVwZW5kPWQoYy5oKSk7Yy5hcHBlbmQmJihhLmFwcGVuZD1kKGMuYXBwZW5kKSl9O2Z1bmN0aW9uIHdhKCl7dmFyIGI9WDt1KERvY3VtZW50LnByb3RvdHlwZSxcImNyZWF0ZUVsZW1lbnRcIixmdW5jdGlvbihhKXtpZih0aGlzLl9fQ0VfaGFzUmVnaXN0cnkpe3ZhciBjPWIuYS5nZXQoYSk7aWYoYylyZXR1cm4gbmV3IGMuY29uc3RydWN0b3J9YT1ILmNhbGwodGhpcyxhKTt5KGIsYSk7cmV0dXJuIGF9KTt1KERvY3VtZW50LnByb3RvdHlwZSxcImltcG9ydE5vZGVcIixmdW5jdGlvbihhLGMpe2E9ZWEuY2FsbCh0aGlzLGEsYyk7dGhpcy5fX0NFX2hhc1JlZ2lzdHJ5P0MoYixhKTp4KGIsYSk7cmV0dXJuIGF9KTt1KERvY3VtZW50LnByb3RvdHlwZSxcImNyZWF0ZUVsZW1lbnROU1wiLGZ1bmN0aW9uKGEsYyl7aWYodGhpcy5fX0NFX2hhc1JlZ2lzdHJ5JiYobnVsbD09PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YSkpe3ZhciBkPWIuYS5nZXQoYyk7aWYoZClyZXR1cm4gbmV3IGQuY29uc3RydWN0b3J9YT1JLmNhbGwodGhpcyxhLGMpO3koYixhKTtyZXR1cm4gYX0pO1xuWShiLERvY3VtZW50LnByb3RvdHlwZSx7aDpmYSxhcHBlbmQ6Z2F9KX07ZnVuY3Rpb24geGEoKXt2YXIgYj1YO2Z1bmN0aW9uIGEoYSxkKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcInRleHRDb250ZW50XCIse2VudW1lcmFibGU6ZC5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZC5nZXQsc2V0OmZ1bmN0aW9uKGEpe2lmKHRoaXMubm9kZVR5cGU9PT1Ob2RlLlRFWFRfTk9ERSlkLnNldC5jYWxsKHRoaXMsYSk7ZWxzZXt2YXIgZT12b2lkIDA7aWYodGhpcy5maXJzdENoaWxkKXt2YXIgYz10aGlzLmNoaWxkTm9kZXMsaz1jLmxlbmd0aDtpZigwPGsmJm4odGhpcykpZm9yKHZhciBlPUFycmF5KGspLGc9MDtnPGs7ZysrKWVbZ109Y1tnXX1kLnNldC5jYWxsKHRoaXMsYSk7aWYoZSlmb3IoYT0wO2E8ZS5sZW5ndGg7YSsrKUIoYixlW2FdKX19fSl9dShOb2RlLnByb3RvdHlwZSxcImluc2VydEJlZm9yZVwiLGZ1bmN0aW9uKGEsZCl7aWYoYSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpe3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhLmNoaWxkTm9kZXMpO1xuYT1MLmNhbGwodGhpcyxhLGQpO2lmKG4odGhpcykpZm9yKGQ9MDtkPGUubGVuZ3RoO2QrKyl6KGIsZVtkXSk7cmV0dXJuIGF9ZT1uKGEpO2Q9TC5jYWxsKHRoaXMsYSxkKTtlJiZCKGIsYSk7bih0aGlzKSYmeihiLGEpO3JldHVybiBkfSk7dShOb2RlLnByb3RvdHlwZSxcImFwcGVuZENoaWxkXCIsZnVuY3Rpb24oYSl7aWYoYSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpe3ZhciBjPUFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhLmNoaWxkTm9kZXMpO2E9Sy5jYWxsKHRoaXMsYSk7aWYobih0aGlzKSlmb3IodmFyIGU9MDtlPGMubGVuZ3RoO2UrKyl6KGIsY1tlXSk7cmV0dXJuIGF9Yz1uKGEpO2U9Sy5jYWxsKHRoaXMsYSk7YyYmQihiLGEpO24odGhpcykmJnooYixhKTtyZXR1cm4gZX0pO3UoTm9kZS5wcm90b3R5cGUsXCJjbG9uZU5vZGVcIixmdW5jdGlvbihhKXthPUouY2FsbCh0aGlzLGEpO3RoaXMub3duZXJEb2N1bWVudC5fX0NFX2hhc1JlZ2lzdHJ5P0MoYixhKTp4KGIsYSk7XG5yZXR1cm4gYX0pO3UoTm9kZS5wcm90b3R5cGUsXCJyZW1vdmVDaGlsZFwiLGZ1bmN0aW9uKGEpe3ZhciBjPW4oYSksZT1NLmNhbGwodGhpcyxhKTtjJiZCKGIsYSk7cmV0dXJuIGV9KTt1KE5vZGUucHJvdG90eXBlLFwicmVwbGFjZUNoaWxkXCIsZnVuY3Rpb24oYSxkKXtpZihhIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGEuY2hpbGROb2Rlcyk7YT1OLmNhbGwodGhpcyxhLGQpO2lmKG4odGhpcykpZm9yKEIoYixkKSxkPTA7ZDxlLmxlbmd0aDtkKyspeihiLGVbZF0pO3JldHVybiBhfXZhciBlPW4oYSksZj1OLmNhbGwodGhpcyxhLGQpLGM9bih0aGlzKTtjJiZCKGIsZCk7ZSYmQihiLGEpO2MmJnooYixhKTtyZXR1cm4gZn0pO08mJk8uZ2V0P2EoTm9kZS5wcm90b3R5cGUsTyk6dyhiLGZ1bmN0aW9uKGIpe2EoYix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7Zm9yKHZhciBhPVtdLGI9XG4wO2I8dGhpcy5jaGlsZE5vZGVzLmxlbmd0aDtiKyspYS5wdXNoKHRoaXMuY2hpbGROb2Rlc1tiXS50ZXh0Q29udGVudCk7cmV0dXJuIGEuam9pbihcIlwiKX0sc2V0OmZ1bmN0aW9uKGEpe2Zvcig7dGhpcy5maXJzdENoaWxkOylNLmNhbGwodGhpcyx0aGlzLmZpcnN0Q2hpbGQpO0suY2FsbCh0aGlzLGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGEpKX19KX0pfTtmdW5jdGlvbiB5YShiKXt2YXIgYT1FbGVtZW50LnByb3RvdHlwZTtmdW5jdGlvbiBjKGEpe3JldHVybiBmdW5jdGlvbihlKXtmb3IodmFyIGM9W10sZD0wO2Q8YXJndW1lbnRzLmxlbmd0aDsrK2QpY1tkLTBdPWFyZ3VtZW50c1tkXTtmb3IodmFyIGQ9W10saz1bXSxnPTA7ZzxjLmxlbmd0aDtnKyspe3ZhciBsPWNbZ107bCBpbnN0YW5jZW9mIEVsZW1lbnQmJm4obCkmJmsucHVzaChsKTtpZihsIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudClmb3IobD1sLmZpcnN0Q2hpbGQ7bDtsPWwubmV4dFNpYmxpbmcpZC5wdXNoKGwpO2Vsc2UgZC5wdXNoKGwpfWEuYXBwbHkodGhpcyxjKTtmb3IoYz0wO2M8ay5sZW5ndGg7YysrKUIoYixrW2NdKTtpZihuKHRoaXMpKWZvcihjPTA7YzxkLmxlbmd0aDtjKyspaz1kW2NdLGsgaW5zdGFuY2VvZiBFbGVtZW50JiZ6KGIsayl9fVYmJihhLmJlZm9yZT1jKFYpKTtWJiYoYS5hZnRlcj1jKHBhKSk7cWEmJnUoYSxcInJlcGxhY2VXaXRoXCIsZnVuY3Rpb24oYSl7Zm9yKHZhciBlPVxuW10sYz0wO2M8YXJndW1lbnRzLmxlbmd0aDsrK2MpZVtjLTBdPWFyZ3VtZW50c1tjXTtmb3IodmFyIGM9W10sZD1bXSxrPTA7azxlLmxlbmd0aDtrKyspe3ZhciBnPWVba107ZyBpbnN0YW5jZW9mIEVsZW1lbnQmJm4oZykmJmQucHVzaChnKTtpZihnIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudClmb3IoZz1nLmZpcnN0Q2hpbGQ7ZztnPWcubmV4dFNpYmxpbmcpYy5wdXNoKGcpO2Vsc2UgYy5wdXNoKGcpfWs9bih0aGlzKTtxYS5hcHBseSh0aGlzLGUpO2ZvcihlPTA7ZTxkLmxlbmd0aDtlKyspQihiLGRbZV0pO2lmKGspZm9yKEIoYix0aGlzKSxlPTA7ZTxjLmxlbmd0aDtlKyspZD1jW2VdLGQgaW5zdGFuY2VvZiBFbGVtZW50JiZ6KGIsZCl9KTtyYSYmdShhLFwicmVtb3ZlXCIsZnVuY3Rpb24oKXt2YXIgYT1uKHRoaXMpO3JhLmNhbGwodGhpcyk7YSYmQihiLHRoaXMpfSl9O2Z1bmN0aW9uIHphKCl7dmFyIGI9WDtmdW5jdGlvbiBhKGEsYyl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJpbm5lckhUTUxcIix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGUsY29uZmlndXJhYmxlOiEwLGdldDpjLmdldCxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGU9dGhpcyxkPXZvaWQgMDtuKHRoaXMpJiYoZD1bXSx0KHRoaXMsZnVuY3Rpb24oYSl7YSE9PWUmJmQucHVzaChhKX0pKTtjLnNldC5jYWxsKHRoaXMsYSk7aWYoZClmb3IodmFyIGY9MDtmPGQubGVuZ3RoO2YrKyl7dmFyIHI9ZFtmXTsxPT09ci5fX0NFX3N0YXRlJiZiLmRpc2Nvbm5lY3RlZENhbGxiYWNrKHIpfXRoaXMub3duZXJEb2N1bWVudC5fX0NFX2hhc1JlZ2lzdHJ5P0MoYix0aGlzKTp4KGIsdGhpcyk7cmV0dXJuIGF9fSl9ZnVuY3Rpb24gYyhhLGMpe3UoYSxcImluc2VydEFkamFjZW50RWxlbWVudFwiLGZ1bmN0aW9uKGEsZSl7dmFyIGQ9bihlKTthPWMuY2FsbCh0aGlzLGEsZSk7ZCYmQihiLGUpO24oYSkmJnooYixlKTtcbnJldHVybiBhfSl9ZnVuY3Rpb24gZChhLGMpe2Z1bmN0aW9uIGUoYSxlKXtmb3IodmFyIGM9W107YSE9PWU7YT1hLm5leHRTaWJsaW5nKWMucHVzaChhKTtmb3IoZT0wO2U8Yy5sZW5ndGg7ZSsrKUMoYixjW2VdKX11KGEsXCJpbnNlcnRBZGphY2VudEhUTUxcIixmdW5jdGlvbihhLGIpe2E9YS50b0xvd2VyQ2FzZSgpO2lmKFwiYmVmb3JlYmVnaW5cIj09PWEpe3ZhciBkPXRoaXMucHJldmlvdXNTaWJsaW5nO2MuY2FsbCh0aGlzLGEsYik7ZShkfHx0aGlzLnBhcmVudE5vZGUuZmlyc3RDaGlsZCx0aGlzKX1lbHNlIGlmKFwiYWZ0ZXJiZWdpblwiPT09YSlkPXRoaXMuZmlyc3RDaGlsZCxjLmNhbGwodGhpcyxhLGIpLGUodGhpcy5maXJzdENoaWxkLGQpO2Vsc2UgaWYoXCJiZWZvcmVlbmRcIj09PWEpZD10aGlzLmxhc3RDaGlsZCxjLmNhbGwodGhpcyxhLGIpLGUoZHx8dGhpcy5maXJzdENoaWxkLG51bGwpO2Vsc2UgaWYoXCJhZnRlcmVuZFwiPT09YSlkPXRoaXMubmV4dFNpYmxpbmcsYy5jYWxsKHRoaXMsXG5hLGIpLGUodGhpcy5uZXh0U2libGluZyxkKTtlbHNlIHRocm93IG5ldyBTeW50YXhFcnJvcihcIlRoZSB2YWx1ZSBwcm92aWRlZCAoXCIrU3RyaW5nKGEpK1wiKSBpcyBub3Qgb25lIG9mICdiZWZvcmViZWdpbicsICdhZnRlcmJlZ2luJywgJ2JlZm9yZWVuZCcsIG9yICdhZnRlcmVuZCcuXCIpO30pfVAmJnUoRWxlbWVudC5wcm90b3R5cGUsXCJhdHRhY2hTaGFkb3dcIixmdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fX0NFX3NoYWRvd1Jvb3Q9YT1QLmNhbGwodGhpcyxhKX0pO1EmJlEuZ2V0P2EoRWxlbWVudC5wcm90b3R5cGUsUSk6VyYmVy5nZXQ/YShIVE1MRWxlbWVudC5wcm90b3R5cGUsVyk6dyhiLGZ1bmN0aW9uKGIpe2EoYix7ZW51bWVyYWJsZTohMCxjb25maWd1cmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIEouY2FsbCh0aGlzLCEwKS5pbm5lckhUTUx9LHNldDpmdW5jdGlvbihhKXt2YXIgYj1cInRlbXBsYXRlXCI9PT10aGlzLmxvY2FsTmFtZSxlPWI/dGhpcy5jb250ZW50OnRoaXMsXG5jPUkuY2FsbChkb2N1bWVudCx0aGlzLm5hbWVzcGFjZVVSSSx0aGlzLmxvY2FsTmFtZSk7Zm9yKGMuaW5uZXJIVE1MPWE7MDxlLmNoaWxkTm9kZXMubGVuZ3RoOylNLmNhbGwoZSxlLmNoaWxkTm9kZXNbMF0pO2ZvcihhPWI/Yy5jb250ZW50OmM7MDxhLmNoaWxkTm9kZXMubGVuZ3RoOylLLmNhbGwoZSxhLmNoaWxkTm9kZXNbMF0pfX0pfSk7dShFbGVtZW50LnByb3RvdHlwZSxcInNldEF0dHJpYnV0ZVwiLGZ1bmN0aW9uKGEsYyl7aWYoMSE9PXRoaXMuX19DRV9zdGF0ZSlyZXR1cm4gUy5jYWxsKHRoaXMsYSxjKTt2YXIgZT1SLmNhbGwodGhpcyxhKTtTLmNhbGwodGhpcyxhLGMpO2M9Ui5jYWxsKHRoaXMsYSk7Yi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxhLGUsYyxudWxsKX0pO3UoRWxlbWVudC5wcm90b3R5cGUsXCJzZXRBdHRyaWJ1dGVOU1wiLGZ1bmN0aW9uKGEsYyxkKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBqYS5jYWxsKHRoaXMsYSxjLGQpO3ZhciBlPVUuY2FsbCh0aGlzLFxuYSxjKTtqYS5jYWxsKHRoaXMsYSxjLGQpO2Q9VS5jYWxsKHRoaXMsYSxjKTtiLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0aGlzLGMsZSxkLGEpfSk7dShFbGVtZW50LnByb3RvdHlwZSxcInJlbW92ZUF0dHJpYnV0ZVwiLGZ1bmN0aW9uKGEpe2lmKDEhPT10aGlzLl9fQ0Vfc3RhdGUpcmV0dXJuIFQuY2FsbCh0aGlzLGEpO3ZhciBjPVIuY2FsbCh0aGlzLGEpO1QuY2FsbCh0aGlzLGEpO251bGwhPT1jJiZiLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0aGlzLGEsYyxudWxsLG51bGwpfSk7dShFbGVtZW50LnByb3RvdHlwZSxcInJlbW92ZUF0dHJpYnV0ZU5TXCIsZnVuY3Rpb24oYSxjKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBrYS5jYWxsKHRoaXMsYSxjKTt2YXIgZD1VLmNhbGwodGhpcyxhLGMpO2thLmNhbGwodGhpcyxhLGMpO3ZhciBlPVUuY2FsbCh0aGlzLGEsYyk7ZCE9PWUmJmIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsYyxkLGUsYSl9KTt0YT9jKEhUTUxFbGVtZW50LnByb3RvdHlwZSxcbnRhKTpsYT9jKEVsZW1lbnQucHJvdG90eXBlLGxhKTpjb25zb2xlLndhcm4oXCJDdXN0b20gRWxlbWVudHM6IGBFbGVtZW50I2luc2VydEFkamFjZW50RWxlbWVudGAgd2FzIG5vdCBwYXRjaGVkLlwiKTt1YT9kKEhUTUxFbGVtZW50LnByb3RvdHlwZSx1YSk6bWE/ZChFbGVtZW50LnByb3RvdHlwZSxtYSk6Y29uc29sZS53YXJuKFwiQ3VzdG9tIEVsZW1lbnRzOiBgRWxlbWVudCNpbnNlcnRBZGphY2VudEhUTUxgIHdhcyBub3QgcGF0Y2hlZC5cIik7WShiLEVsZW1lbnQucHJvdG90eXBlLHtoOm5hLGFwcGVuZDpvYX0pO3lhKGIpfTsvKlxuXG4gQ29weXJpZ2h0IChjKSAyMDE2IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xudmFyIFo9d2luZG93LmN1c3RvbUVsZW1lbnRzO2lmKCFafHxaLmZvcmNlUG9seWZpbGx8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIFouZGVmaW5lfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBaLmdldCl7dmFyIFg9bmV3IHY7dmEoKTt3YSgpO1koWCxEb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZSx7aDpoYSxhcHBlbmQ6aWF9KTt4YSgpO3phKCk7ZG9jdW1lbnQuX19DRV9oYXNSZWdpc3RyeT0hMDt2YXIgY3VzdG9tRWxlbWVudHM9bmV3IEcoWCk7T2JqZWN0LmRlZmluZVByb3BlcnR5KHdpbmRvdyxcImN1c3RvbUVsZW1lbnRzXCIse2NvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiEwLHZhbHVlOmN1c3RvbUVsZW1lbnRzfSl9O1xufSkuY2FsbChzZWxmKTtcblxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y3VzdG9tLWVsZW1lbnRzLm1pbi5qcy5tYXBcblxuXG4vKioqLyB9KVxuLyoqKioqKi8gXSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHBvbHlmaWxsZWQuanMiLCIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbiBcdFx0XHRcdGNvbmZpZ3VyYWJsZTogZmFsc2UsXG4gXHRcdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbiBcdFx0XHR9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuIFx0XHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cbiBcdFx0XHRmdW5jdGlvbiBnZXREZWZhdWx0KCkgeyByZXR1cm4gbW9kdWxlWydkZWZhdWx0J107IH0gOlxuIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsICdhJywgZ2V0dGVyKTtcbiBcdFx0cmV0dXJuIGdldHRlcjtcbiBcdH07XG5cbiBcdC8vIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbFxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuXG4gXHQvLyBfX3dlYnBhY2tfcHVibGljX3BhdGhfX1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMSk7XG5cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gd2VicGFjay9ib290c3RyYXAgYThkYTQ1ZDNlMDk3MDk5M2RkYzMiLCIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7U3RvcmFnZURyaXZlcn0gZnJvbSBcIi4vaW50ZXJmYWNlc1wiO1xuXG5jb25zdCBwcm9wc01hcDogTWFwPGFueSwgYW55PiA9IG5ldyBNYXA7XG5cbmNvbnN0IGV2ZW50c01hcDogTWFwPGFueSwgYW55PiA9IG5ldyBNYXA7XG5cbmV4cG9ydCBjb25zdCBzdG9yYWdlS2V5cyA9IHtcbiAgICBQUk9QUzogXCJwcm9wc1wiLFxuICAgIEVWRU5UUzogXCJldmVudHNcIlxufTtcblxuY29uc3QgZHJpdmVyOiBTdG9yYWdlRHJpdmVyID0ge1xuICAgIGl0ZW1zOiBPYmplY3QuY3JlYXRlKHtcbiAgICAgICAgW3N0b3JhZ2VLZXlzLlBST1BTXTogcHJvcHNNYXAsXG4gICAgICAgIFtzdG9yYWdlS2V5cy5FVkVOVFNdOiBldmVudHNNYXAsXG4gICAgfSksXG4gICAgc2V0SXRlbShrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xuICAgICAgICB0aGlzLml0ZW1zW2tleV0gPSB2YWx1ZVxuICAgIH0sXG4gICAgZ2V0SXRlbShrZXk6IHN0cmluZykge1xuICAgICAgICByZXR1cm4gdGhpcy5pdGVtc1trZXldXG4gICAgfSxcbiAgICByZW1vdmVJdGVtKGtleTogc3RyaW5nKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLml0ZW1zW2tleV1cbiAgICB9LFxuICAgIG1pZ3JhdGUoZHJpdmVyOiBTdG9yYWdlRHJpdmVyKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMuaXRlbXMpIHtcbiAgICAgICAgICAgIGRyaXZlci5zZXRJdGVtKFxuICAgICAgICAgICAgICAgIGtleSxcbiAgICAgICAgICAgICAgICB0aGlzLml0ZW1zW2tleV1cbiAgICAgICAgICAgIClcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZHJpdmVyXG4gICAgfVxufTtcblxuZXhwb3J0IGNvbnN0IHN0b3JhZ2UgPSB7XG4gICAgZHJpdmVyXG59O1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0U3RvcmFnZURyaXZlcihkcml2ZXI6IFN0b3JhZ2VEcml2ZXIpOiB2b2lkIHtcbiAgICBzdG9yYWdlLmRyaXZlciA9IHN0b3JhZ2UuZHJpdmVyLm1pZ3JhdGUoZHJpdmVyKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0U3RvcmFnZShrZXk6IHN0cmluZyk6IGFueSB7XG4gICAgcmV0dXJuIHN0b3JhZ2UuZHJpdmVyLmdldEl0ZW0oa2V5KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkU3RvcmFnZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IHZvaWQge1xuICAgIHN0b3JhZ2UuZHJpdmVyLnNldEl0ZW0oa2V5LCB2YWx1ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHJlbW92ZVN0b3JhZ2Uoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBzdG9yYWdlLmRyaXZlci5yZW1vdmVJdGVtKGtleSlcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc3RvcmFnZS5qcyIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtXZWJDb21wb25lbnRzIGFzIEltcGxlbWVudGF0aW9ufSBmcm9tIFwiLi9pbnRlcmZhY2VzXCJcblxuY29uc3QgZGVmYXVsdEltcGxlbWVudGF0aW9uOiBJbXBsZW1lbnRhdGlvbiA9IHtcbiAgICByZWdpc3RlckNvbXBvbmVudChuYW1lOiBzdHJpbmcsIGNvbXBvbmVudDogQ2xhc3M8RWxlbWVudD4pIHtcbiAgICAgICAgaWYgKCdjdXN0b21FbGVtZW50cycgaW4gd2luZG93KSB7XG4gICAgICAgICAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUobmFtZSwgY29tcG9uZW50KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGN1cnJlbnRSZWFkeUNoZWNrKCkudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJDb21wb25lbnQobmFtZSwgY29tcG9uZW50KVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuICAgIH0sXG4gICAgaXNDdXN0b21Db21wb25lbnQobm9kZTogTm9kZSkge1xuICAgICAgICByZXR1cm4gbm9kZS5ub2RlTmFtZS5pbmNsdWRlcyhcIi1cIilcbiAgICB9XG59O1xuXG5sZXQgY3VycmVudEltcGxlbWVudGF0aW9uID0gZGVmYXVsdEltcGxlbWVudGF0aW9uO1xuXG5jb25zdCByZWdpc3RlckNvbXBvbmVudCA9IChuYW1lOiBzdHJpbmcsIGNvbXBvbmVudDogQ2xhc3M8RWxlbWVudD4pID0+IHtcbiAgICByZXR1cm4gY3VycmVudEltcGxlbWVudGF0aW9uLnJlZ2lzdGVyQ29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCk7XG59O1xuXG5leHBvcnQgY29uc3Qgc2V0SW1wbGVtZW50YXRpb24gPSAoaW1wbGVtZW50YXRpb246IEltcGxlbWVudGF0aW9uKSA9PiB7XG4gICAgY3VycmVudEltcGxlbWVudGF0aW9uID0gaW1wbGVtZW50YXRpb247XG59O1xuXG5sZXQgY3VycmVudFJlYWR5Q2hlY2sgPSAoKSA9PiBQcm9taXNlLnJlc29sdmUoKTtcblxuZXhwb3J0IGNvbnN0IGNvbXBvbmVudHNSZWFkeSA9ICgpID0+IHtcbiAgICByZXR1cm4gY3VycmVudFJlYWR5Q2hlY2soKVxufTtcblxuZXhwb3J0IGNvbnN0IHNldFJlYWR5Q2hlY2sgPSAocmVhZHlDaGVjazogRnVuY3Rpb24pID0+IHtcbiAgICBjdXJyZW50UmVhZHlDaGVjayA9IHJlYWR5Q2hlY2s7XG59O1xuXG5leHBvcnQgZGVmYXVsdCByZWdpc3RlckNvbXBvbmVudDtcblxuZXhwb3J0IGNvbnN0IGlzQ3VzdG9tQ29tcG9uZW50ID0gKG5vZGU6IE5vZGUpID0+IHtcbiAgICByZXR1cm4gY3VycmVudEltcGxlbWVudGF0aW9uLmlzQ3VzdG9tQ29tcG9uZW50KG5vZGUpXG59O1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy93ZWItY29tcG9uZW50cy5qcyIsIi8vIEBmbG93XG5cbmltcG9ydCB0eXBlIHtTdG9yZSwgUmVkdWNlcn0gZnJvbSBcIi4vaW50ZXJmYWNlc1wiXG5cbmNvbnN0IHN0dWJJbXBsZW1lbnRhdGlvbjogU3RvcmUgPSB7XG4gICAgcmVkdWNlcnM6IHt9LFxuICAgIHN1YnNjcmlwdGlvbnM6IHt9LFxuICAgIGFkZFJlZHVjZXIoa2V5OiBzdHJpbmcsIHJlZHVjZXI6IFJlZHVjZXIpIHtcbiAgICAgICAgdGhpcy5yZWR1Y2Vyc1trZXldID0gcmVkdWNlcjtcbiAgICB9LFxuICAgIHJlbW92ZVJlZHVjZXIoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgZGVsZXRlIHRoaXMucmVkdWNlcnNba2V5XTtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH0sXG4gICAgc3Vic2NyaWJlKGtleTogc3RyaW5nLCBjYjogRnVuY3Rpb24pIHtcbiAgICAgICAgaWYgKCF0aGlzLnN1YnNjcmlwdGlvbnNba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNba2V5XS5wdXNoKGNiKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiAoKSA9PiB7XG4gICAgICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2tleV0gPSB0aGlzLnN1YnNjcmlwdGlvbnNba2V5XS5maWx0ZXIoZWwgPT4gZWwgIT09IGNiKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSxcbiAgICBnZXRTdGF0ZShrZXk6IHN0cmluZykge30sXG4gICAgbWlncmF0ZShuZXdTdG9yZTogU3RvcmUpIHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5yZWR1Y2Vycykge1xuICAgICAgICAgICAgY29uc3QgcmVkdWNlciA9IHRoaXMucmVkdWNlcnNba2V5XTtcbiAgICAgICAgICAgIG5ld1N0b3JlLmFkZFJlZHVjZXIoa2V5LCByZWR1Y2VyKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLnN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgc3Vic2NyaXB0aW9uIG9mIHRoaXMuc3Vic2NyaXB0aW9uc1trZXldKSB7XG4gICAgICAgICAgICAgICAgbmV3U3RvcmUuc3Vic2NyaWJlKGtleSwgc3Vic2NyaXB0aW9uKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXdTdG9yZTtcbiAgICB9XG59O1xuXG5jb25zdCBzdG9yZSA9IHtcbiAgICBjdXJyZW50SW1wbGVtZW50YXRpb246IHN0dWJJbXBsZW1lbnRhdGlvblxufTtcblxuZXhwb3J0IGNvbnN0IHNldEltcGxlbWVudGF0aW9uID0gKGltcGxlbWVudGF0aW9uOiBTdG9yZSkgPT4ge1xuICAgIHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbiA9IHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbi5taWdyYXRlKGltcGxlbWVudGF0aW9uKVxufTtcblxuZXhwb3J0IGNvbnN0IHJlZ2lzdGVyUmVkdWNlciA9IChrZXk6IHN0cmluZywgcmVkdWNlcjogUmVkdWNlcikgPT4ge1xuICAgIHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbi5hZGRSZWR1Y2VyKGtleSwgcmVkdWNlcilcbn07XG5leHBvcnQgY29uc3QgcmVtb3ZlUmVkdWNlciA9IChrZXk6IHN0cmluZykgPT4ge1xuICAgIHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbi5yZW1vdmVSZWR1Y2VyKGtleSlcbn07XG5leHBvcnQgY29uc3Qgc3Vic2NyaWJlID0gKGtleTogc3RyaW5nLCBjYjogRnVuY3Rpb24pID0+IHtcbiAgICByZXR1cm4gc3RvcmUuY3VycmVudEltcGxlbWVudGF0aW9uLnN1YnNjcmliZShrZXksIGNiKVxufTtcbmV4cG9ydCBjb25zdCBnZXRTdGF0ZSA9IChrZXk6IHN0cmluZykgPT4ge1xuICAgIHJldHVybiBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24uZ2V0U3RhdGUoa2V5KVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc3RvcmUuanMiLCIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7VGVtcGxhdGVIYW5kbGVyfSBmcm9tIFwiLi9pbnRlcmZhY2VzXCJcbmltcG9ydCB7Z2V0U3RvcmFnZSwgc3RvcmFnZUtleXN9IGZyb20gXCIuL3N0b3JhZ2VcIlxuaW1wb3J0IHttYXRjaFRhZ0FyZywgcmVwbGFjZVRhZ0FyZywgdGFnTmFtZVRvUHJvcH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7aXNDdXN0b21Db21wb25lbnR9IGZyb20gXCIuL3dlYi1jb21wb25lbnRzXCI7XG5cbmNvbnN0IHByb3BzU3RvcmFnZSA9IGdldFN0b3JhZ2Uoc3RvcmFnZUtleXMuUFJPUFMpO1xuY29uc3QgZXZlbnRzU3RvcmFnZSA9IGdldFN0b3JhZ2Uoc3RvcmFnZUtleXMuRVZFTlRTKTtcblxuY29uc3QgRXZlbnRzVGFnSGFuZGxlcjogVGVtcGxhdGVIYW5kbGVyID0ge1xuICAgIGNhbGw6IChub2RlOiBhbnksIGFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpXTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubm9kZU5hbWUuc3RhcnRzV2l0aChcIm9uXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaFRhZ0FyZyhhdHRyaWJ1dGUubm9kZVZhbHVlKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBOdW1iZXIobWF0Y2hbMV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsaXN0ZW5lciA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGF0dHJpYnV0ZS5ub2RlTmFtZVxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGV2ZW50TmFtZSA9IGF0dHJpYnV0ZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpLnNsaWNlKDIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50TmFtZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsaXN0ZW5lclxuICAgICAgICAgICAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXJzID0gZXZlbnRzU3RvcmFnZS5nZXQobm9kZSkgfHwge307XG4gICAgICAgICAgICAgICAgICAgICAgICBldmVudHNTdG9yYWdlLnNldChcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLi4ubGlzdGVuZXJzLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBbZXZlbnROYW1lXTogbGlzdGVuZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5jb25zdCBNYXBIYW5kbGVyOiBUZW1wbGF0ZUhhbmRsZXIgPSB7XG4gICAgY2FsbDogKG5vZGU6IE5vZGUsIGFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgIGlmIChub2RlIGluc3RhbmNlb2YgSFRNTFRlbXBsYXRlRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlKFwibWFwXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBtYXRjaFRhZ0FyZyhTdHJpbmcobm9kZS5nZXRBdHRyaWJ1dGUoXCJtYXBcIikpKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaW5kZXggPSBOdW1iZXIobWF0Y2hbMV0pO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBhcnIgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdHBsID0gbm9kZS5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInRlbXBsYXRlXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBub2RlcyA9IGFyci5tYXAoZWwgPT4ge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHJlcGxhY2VUYWdBcmcodHBsLCAobWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJnID0gYXJnc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cGxDYWxsID0gYXJnKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRwbENhbGwgaW5zdGFuY2VvZiBIVE1MVGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHBsQ2FsbC5pbm5lckhUTUxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHRwbENhbGwpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRwbENhbGwuam9pbignJyk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cGxDYWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICBmcmFnbWVudC5pbm5lckhUTUwgPSBub2Rlcy5qb2luKCcnKTtcbiAgICAgICAgICAgICAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICAgICAgICAgICAgICBub2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKFxuICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuY29udGVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHNob3VsZFNldFByb3BUb1N0b3JhZ2UodmFsdWU6IGFueSwgbm9kZTogTm9kZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgfHwgaXNDdXN0b21Db21wb25lbnQobm9kZSlcbn1cblxuZnVuY3Rpb24gcGFyc2VBdHRyaWJ1dGUoYXR0cmlidXRlOiBOb2RlLCBub2RlOiBOb2RlLCBhcmdzOiBhbnlbXSkge1xuICAgIGNvbnN0IG1hdGNoID0gbWF0Y2hUYWdBcmcoYXR0cmlidXRlLm5vZGVWYWx1ZSk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XG4gICAgICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKG1hdGNoWzFdKTtcbiAgICAgICAgY29uc3Qgbm9kZU5hbWUgPSBhdHRyaWJ1dGUubm9kZU5hbWU7XG4gICAgICAgIGNvbnN0IHByb3BOYW1lID0gdGFnTmFtZVRvUHJvcChub2RlTmFtZSk7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gYXJnc1tpbmRleF07XG4gICAgICAgIHJldHVybiBbcHJvcE5hbWUsIHZhbHVlXVxuICAgIH1cbiAgICByZXR1cm4gW2F0dHJpYnV0ZS5ub2RlTmFtZSwgYXR0cmlidXRlLm5vZGVWYWx1ZV1cbn1cblxuY29uc3QgUHJvcHNIYW5kbGVyOiBUZW1wbGF0ZUhhbmRsZXIgPSB7XG4gICAgY2FsbDogKG5vZGU6IGFueSwgYXJnczogYW55W10pID0+IHtcbiAgICAgICAgY29uc3QgYXR0cmlidXRlcyA9IG5vZGUuYXR0cmlidXRlcyB8fCBbXTtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBjb25zdCBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2ldO1xuICAgICAgICAgICAgY29uc3QgW3Byb3BOYW1lLCB2YWx1ZV0gPSBwYXJzZUF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICBhdHRyaWJ1dGUsXG4gICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICBhcmdzXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgaWYgKHNob3VsZFNldFByb3BUb1N0b3JhZ2UodmFsdWUsIG5vZGUpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcHJvcHMgPSBwcm9wc1N0b3JhZ2UuZ2V0KG5vZGUpIHx8IHt9O1xuICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUubm9kZU5hbWUsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBwcm9wc1N0b3JhZ2Uuc2V0KFxuICAgICAgICAgICAgICAgICAgICBub2RlLFxuICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAuLi5wcm9wcyxcbiAgICAgICAgICAgICAgICAgICAgICAgIFtwcm9wTmFtZV06IHZhbHVlXG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG5jb25zdCBjb3JlSGFuZGxlcnMgPSB7XG4gICAgZXZlbnRzOiBFdmVudHNUYWdIYW5kbGVyLFxuICAgIG1hcDogTWFwSGFuZGxlcixcbiAgICBwcm9wczogUHJvcHNIYW5kbGVyXG59O1xuXG5jb25zdCBjdXN0b21IYW5kbGVycyA9IHt9O1xuXG5sZXQgaGFuZGxlcnM6IEFycmF5PEZ1bmN0aW9uPiA9IFtcbiAgICBjb3JlSGFuZGxlcnMubWFwLmNhbGwsXG4gICAgY29yZUhhbmRsZXJzLmV2ZW50cy5jYWxsLFxuICAgIGNvcmVIYW5kbGVycy5wcm9wcy5jYWxsLFxuXTtcblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGxIYW5kbGVycyhlbGVtZW50OiBEb2N1bWVudEZyYWdtZW50IHwgTm9kZSwgYXJnczogYW55W10pOiB2b2lkIHtcbiAgICBpZiAoKChlbGVtZW50OiBhbnkpLmF0dHJpYnV0ZXMgfHwgW10pLmxlbmd0aCkge1xuICAgICAgICBoYW5kbGVycy5mb3JFYWNoKGhhbmRsZXIgPT4ge1xuICAgICAgICAgICAgaGFuZGxlcihlbGVtZW50LCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIYW5kbGVycyhcbiAgICAgICAgICAgIGVsZW1lbnQuY2hpbGROb2Rlc1tpXSxcbiAgICAgICAgICAgIGFyZ3NcbiAgICAgICAgKVxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFRlbXBsYXRlSGFuZGxlcihrZXk6c3RyaW5nLCBoYW5kbGVyOiBUZW1wbGF0ZUhhbmRsZXIpOiB2b2lkIHtcbiAgICBjdXN0b21IYW5kbGVyc1trZXldID0gaGFuZGxlcjtcbiAgICAvLyAkRmxvd0ZpeE1lXG4gICAgaGFuZGxlcnMudW5zaGlmdChoYW5kbGVyLmNhbGwpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhY2Nlc3NIYW5kbGVyKGtleTogc3RyaW5nKTogVGVtcGxhdGVIYW5kbGVyIHtcbiAgICByZXR1cm4gY3VzdG9tSGFuZGxlcnNba2V5XVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdW5sb2FkSGFuZGxlcihrZXk6IHN0cmluZyk6IHZvaWQge1xuICAgIGNvbnN0IGhhbmRsZXIgPSBjdXN0b21IYW5kbGVyc1trZXldO1xuICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGVsID0+IGVsICE9PSBoYW5kbGVyLmNhbGwpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBzZXRDb3JlSGFuZGxlcihrZXk6IHN0cmluZywgaGFuZGxlcjogVGVtcGxhdGVIYW5kbGVyKTogdm9pZCB7XG4gICAgY29yZUhhbmRsZXJzW2tleV0gPSBoYW5kbGVyXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2hhbmRsZXJzLmpzIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtnZXRTdG9yYWdlLCBzdG9yYWdlS2V5c30gZnJvbSBcIi4vc3RvcmFnZVwiO1xuXG5jb25zdCBwcm9wc1N0b3JhZ2UgPSBnZXRTdG9yYWdlKHN0b3JhZ2VLZXlzLlBST1BTKTtcbmNvbnN0IGV2ZW50c1N0b3JhZ2UgPSBnZXRTdG9yYWdlKHN0b3JhZ2VLZXlzLkVWRU5UUyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhclByb3BzU3RvcmFnZSgpOiB2b2lkIHtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgZm9yIChjb25zdCBrZXkgb2YgcHJvcHNTdG9yYWdlLmtleXMoKSkge1xuICAgICAgICAgICAgaWYgKCFrZXkuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBwcm9wc1N0b3JhZ2UuZGVsZXRlKGtleSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjbGVhckV2ZW50c1N0b3JhZ2UoKTogdm9pZCB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIGV2ZW50c1N0b3JhZ2Uua2V5cygpKSB7XG4gICAgICAgICAgICBpZiAoIWtleS5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgIGV2ZW50c1N0b3JhZ2UuZGVsZXRlKGtleSlcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiB0YWdOYW1lVG9Qcm9wKG5vZGVOYW1lOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIHJldHVybiBub2RlTmFtZS5zcGxpdChcIi1cIikucmVkdWNlKFxuICAgICAgICAoYWNjLCBuZXh0KSA9PiB7XG4gICAgICAgICAgICBpZiAobmV4dCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBhY2MgKyBuZXh0WzBdLnRvVXBwZXJDYXNlKCkgKyBuZXh0LnNsaWNlKDEpXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gYWNjXG4gICAgICAgIH1cbiAgICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlVGFnQXJnKGluZGV4OiBudW1iZXIpOiBzdHJpbmcge1xuICAgIHJldHVybiBgPCEtLV9fQVJHX18ke2luZGV4fS0tPmBcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIG1hdGNoVGFnQXJnKHN0cjogc3RyaW5nKSB7XG4gICAgcmV0dXJuIHN0ci5tYXRjaCgvX19BUkdfXyhcXGQrKS8pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZXBsYWNlVGFnQXJnKHN0cjogc3RyaW5nLCBmbjogRnVuY3Rpb24pIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoLzwhLS1fX0FSR19fKFxcZCspLS0+LywgZm4pXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhdHRyaWJ1dGVTdGFydHMoc3RyOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICByZXR1cm4gc3RyLnRyaW0oKS5zbGljZSgtMikgPT09IGA9XCJgXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3V0aWxzLmpzIiwiLy8gQGZsb3dcblxuZXhwb3J0IHtcbiAgICBzZXRJbXBsZW1lbnRhdGlvbiBhcyBjaGFuZ2VXZWJDb21wb25lbnRzSW1wbGVtZW5hdGlvbixcbiAgICBjb21wb25lbnRzUmVhZHksXG4gICAgc2V0UmVhZHlDaGVjayBhcyBjaGFuZ2VXZWJDb21wb25lbnRzUmVhZHlDaGVjayxcbiAgICBkZWZhdWx0IGFzIHJlZ2lzdGVyQ29tcG9uZW50XG59IGZyb20gXCIuL3dlYi1jb21wb25lbnRzXCJcblxuZXhwb3J0IHtcbiAgICBzZXRJbXBsZW1lbnRhdGlvbiBhcyBjaGFuZ2VTdG9yZUltcGxlbWVudGF0aW9uLFxuICAgIHJlZ2lzdGVyUmVkdWNlcixcbiAgICByZW1vdmVSZWR1Y2VyLFxuICAgIHN1YnNjcmliZSxcbiAgICBnZXRTdGF0ZVxufSBmcm9tIFwiLi9zdG9yZVwiXG5cbmV4cG9ydCB7XG4gICAgYWRkVGVtcGxhdGVIYW5kbGVyLFxuICAgIHNldENvcmVIYW5kbGVyLFxuICAgIHVubG9hZEhhbmRsZXIsXG4gICAgYWNjZXNzSGFuZGxlcixcbn0gZnJvbSBcIi4vaGFuZGxlcnNcIlxuXG5leHBvcnQge1xuICAgIGh0bWwsXG4gICAgY3NzXG59IGZyb20gXCIuL3RhZ1wiXG5cbmV4cG9ydCB7XG4gICAgZ2V0U3RvcmFnZSxcbiAgICBhZGRTdG9yYWdlLFxuICAgIHJlbW92ZVN0b3JhZ2UsXG4gICAgc2V0U3RvcmFnZURyaXZlclxufSBmcm9tIFwiLi9zdG9yYWdlXCJcblxuZXhwb3J0IHtiaW5kfSBmcm9tIFwiLi9iaW5kXCJcblxuZXhwb3J0IHtcbiAgICBtYXRjaFRhZ0FyZyxcbiAgICByZXBsYWNlVGFnQXJnXG59IGZyb20gXCIuL3V0aWxzXCJcblxuZXhwb3J0IHtkZWZhdWx0IGFzIENvbXBvbmVudH0gZnJvbSBcIi4vQ29tcG9uZW50XCJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9pbmRleC5qcyIsIi8vIEBmbG93XG5cbmltcG9ydCB7Y2FsbEhhbmRsZXJzfSBmcm9tIFwiLi9oYW5kbGVyc1wiO1xuaW1wb3J0IHthdHRyaWJ1dGVTdGFydHMsIGNyZWF0ZVRhZ0FyZ30gZnJvbSBcIi4vdXRpbHNcIjtcblxuZXhwb3J0IGZ1bmN0aW9uIGh0bWwoc3RyaW5nczogc3RyaW5nW10sIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgaWYgKCFhcmdzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gc3RyaW5nc1swXVxuICAgIH1cblxuICAgIGxldCB0cGw6IHN0cmluZyA9IFwiXCI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHRwbCArPSBzdHJpbmdzW2ldO1xuICAgICAgICBpZiAoaSA8IHN0cmluZ3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYXJnc1tpXSkgJiYgYXR0cmlidXRlU3RhcnRzKHRwbCkgPT09IGZhbHNlKVxuICAgICAgICAgICAgICAgIHRwbCArPSBhcmdzW2ldLmpvaW4oJycpO1xuICAgICAgICAgICAgZWxzZSBpZiAodHlwZW9mIGFyZ3NbaV0gPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgYXJnc1tpXSA9PT0gXCJvYmplY3RcIilcbiAgICAgICAgICAgICAgICB0cGwgKz0gY3JlYXRlVGFnQXJnKGkpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRwbCArPSBhcmdzW2ldXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdHBsO1xuICAgIGNhbGxIYW5kbGVycyh0ZW1wbGF0ZS5jb250ZW50LCBhcmdzKTtcbiAgICByZXR1cm4gdGVtcGxhdGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNzcyhzdHJpbmdzOiBzdHJpbmdbXSwgLi4uYXJnczogYW55W10pIHtcbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzdHJpbmdzW2ldO1xuICAgICAgICBpZiAoaSA8IHN0cmluZ3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2ldID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGFyZ3NbaV0oKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gYXJnc1tpXVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdGFnLmpzIiwiLy8gQGZsb3dcblxuaW1wb3J0IHthZGRTdG9yYWdlLCBnZXRTdG9yYWdlfSBmcm9tIFwiLi9zdG9yYWdlXCJcblxuY29uc3QgS0VZID0gXCJCT1VORFNcIjtcbmNvbnN0IE1BWF9TVE9SQUdFX1NJWkUgPSAxMDA7XG5cbmFkZFN0b3JhZ2UoXG4gICAgS0VZLFxuICAgIG5ldyBNYXAoKVxuKTtcblxuZnVuY3Rpb24gYXBwZW5kVG9TdG9yYWdlKGZuOiBGdW5jdGlvbiwgdmFsdWU6IE1hcDxhbnksIEZ1bmN0aW9uPik6IHZvaWQge1xuICAgIGNvbnN0IHN0b3JhZ2U6IE1hcDxGdW5jdGlvbiwgTWFwPGFueSwgRnVuY3Rpb24+PiA9IGdldFN0b3JhZ2UoS0VZKTtcbiAgICBpZiAoc3RvcmFnZS5zaXplID09PSBNQVhfU1RPUkFHRV9TSVpFKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBzdG9yYWdlLmtleXMoKTtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICBzdG9yYWdlLmRlbGV0ZShrZXlzLm5leHQoKS52YWx1ZSk7XG4gICAgfVxuICAgIHN0b3JhZ2Uuc2V0KGZuLCB2YWx1ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmQoZm46IEZ1bmN0aW9uLCAuLi5hcmdzOiBhbnlbXSk6IEZ1bmN0aW9uIHtcbiAgICBjb25zdCBzdG9yYWdlOiBNYXA8RnVuY3Rpb24sIE1hcDxhbnksIEZ1bmN0aW9uPj4gPSBnZXRTdG9yYWdlKEtFWSk7XG4gICAgY29uc3QgYm91bmQgPSBzdG9yYWdlLmdldChmbik7XG4gICAgY29uc3QgZmlyc3RBcmcgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGJvdW5kRm4gPSBmbi5iaW5kKG51bGwsIC4uLmFyZ3MpO1xuICAgIGlmIChib3VuZCkge1xuICAgICAgICBpZiAoIWJvdW5kLmdldChmaXJzdEFyZykpIHtcbiAgICAgICAgICAgIGJvdW5kLnNldChcbiAgICAgICAgICAgICAgICBmaXJzdEFyZyxcbiAgICAgICAgICAgICAgICBib3VuZEZuXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGJvdW5kRm5cbiAgICAgICAgfVxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHJldHVybiBib3VuZC5nZXQoZmlyc3RBcmcpXG4gICAgfVxuXG4gICAgY29uc3QgZm5NYXAgPSBuZXcgTWFwKCk7XG4gICAgZm5NYXAuc2V0KFxuICAgICAgICBmaXJzdEFyZyxcbiAgICAgICAgYm91bmRGblxuICAgICk7XG4gICAgYXBwZW5kVG9TdG9yYWdlKFxuICAgICAgICBmbixcbiAgICAgICAgZm5NYXBcbiAgICApO1xuICAgIHJldHVybiBib3VuZEZuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JpbmQuanMiLCIvLyBAZmxvd1xuXG5pbXBvcnQge3N1YnNjcmliZSwgZ2V0U3RhdGV9IGZyb20gXCIuL3N0b3JlXCJcbmltcG9ydCB7cmVuZGVyfSBmcm9tIFwiLi9yZW5kZXJcIlxuaW1wb3J0IHtnZXRTdG9yYWdlLCBzdG9yYWdlS2V5c30gZnJvbSBcIi4vc3RvcmFnZVwiXG5pbXBvcnQge2NsZWFyRXZlbnRzU3RvcmFnZSwgY2xlYXJQcm9wc1N0b3JhZ2V9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmNvbnN0IHByb3BzU3RvcmFnZSA9IGdldFN0b3JhZ2Uoc3RvcmFnZUtleXMuUFJPUFMpO1xuXG5mdW5jdGlvbiBwYXJzZUF0dHJpYnV0ZXMoYXR0cmlidXRlczogTmFtZWROb2RlTWFwKTogT2JqZWN0IHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJlc3VsdFthdHRyaWJ1dGUubmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgfVxuXG4gICAgZ2V0IGlzU2hhZG93KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGdldCBwcm9wcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnRoaXMuX19kZWZhdWx0UHJvcHMsXG4gICAgICAgICAgICAuLi5wYXJzZUF0dHJpYnV0ZXModGhpcy5hdHRyaWJ1dGVzKSxcbiAgICAgICAgICAgIC4uLihwcm9wc1N0b3JhZ2UuZ2V0KHRoaXMpIHx8IHt9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0IHByb3BzKHByb3BzOiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5fX2RlZmF1bHRQcm9wcyA9IHByb3BzO1xuICAgIH1cblxuICAgIGdldCBrZXlzKCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICB9XG5cbiAgICBnZXQgc3R5bGVzKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlwiXG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZhYmxlUHJvcHMubWFwKChwcm9wOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgICAgICAgICAgbGV0IHJlcyA9IFwiXCI7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcFtpXSA9PT0gcHJvcFtpXS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSBcIi1cIitwcm9wW2ldLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXMgKz0gcHJvcFtpXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IG9ic2VydmFibGVQcm9wcygpIHtcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgX19kZWZhdWx0UHJvcHMgPSB7fTtcblxuICAgIHN1YnNjcmlwdGlvbnMgPSBbXTtcblxuICAgIHN0YXRlID0ge307XG5cbiAgICBtb3VudGVkID0gZmFsc2U7XG5cbiAgICBiZWZvcmVSZW5kZXIoKSB7fVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICBhZnRlclJlbmRlcigpIHt9XG5cbiAgICBzdWJzY3JpYmVUb1N0b3JlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmtleXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgICAgICAgICAgIHN1YnNjcmliZShrZXksIHN0YXRlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZVtrZXldID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlci5jYWxsKHRoaXMpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlW2tleV0gPSBnZXRTdGF0ZShrZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9TdG9yZSgpO1xuICAgICAgICByZW5kZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLmNvbm5lY3RlZCgpXG4gICAgfVxuXG4gICAgY29ubmVjdGVkKCkge31cblxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHN1YnNjcmlwdGlvbiBvZiB0aGlzLnN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJQcm9wc1N0b3JhZ2UoKTtcbiAgICAgICAgY2xlYXJFdmVudHNTdG9yYWdlKCk7XG5cbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQoKVxuICAgIH1cblxuICAgIGRpc2Nvbm5lY3RlZCgpIHt9XG5cbiAgICBhZG9wdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9TdG9yZSgpO1xuICAgICAgICByZW5kZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLmFkb3B0ZWQoKVxuICAgIH1cblxuICAgIGFkb3B0ZWQoKSB7fVxuXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgb2xkVmFsdWU6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5tb3VudGVkICYmIG9sZFZhbHVlICE9IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzQ2hhbmdlZChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgICAgIFthdHRyaWJ1dGVOYW1lXTogbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlbmRlci5jYWxsKHRoaXMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm9wc0NoYW5nZWQobmV3UHJvcHM6IE9iamVjdCkge31cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQ29tcG9uZW50LmpzIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtpc0N1c3RvbUNvbXBvbmVudH0gZnJvbSBcIi4vd2ViLWNvbXBvbmVudHNcIlxuaW1wb3J0IHtnZXRTdG9yYWdlLCBzdG9yYWdlS2V5c30gZnJvbSBcIi4vc3RvcmFnZVwiXG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gXCIuL3NoYWxsb3ctZXF1YWxcIjtcblxuY29uc3QgcHJvcHNTdG9yYWdlID0gZ2V0U3RvcmFnZShzdG9yYWdlS2V5cy5QUk9QUyk7XG5cbmZ1bmN0aW9uIG5vZGVFcXVhbHMoZWxlbWVudE5vZGU6IE5vZGUsIGZyYWdtZW50Tm9kZTogTm9kZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVsQ2xvbmUgPSBlbGVtZW50Tm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgIGNvbnN0IGZyQ2xvbmUgPSBmcmFnbWVudE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICBpZiAocHJvcHNTdG9yYWdlLmdldChmcmFnbWVudE5vZGUpKSB7XG4gICAgICAgIHJldHVybiBzaGFsbG93RXF1YWwoXG4gICAgICAgICAgICBwcm9wc1N0b3JhZ2UuZ2V0KGVsZW1lbnROb2RlKSxcbiAgICAgICAgICAgIHByb3BzU3RvcmFnZS5nZXQoZnJhZ21lbnROb2RlKVxuICAgICAgICApICYmIGVsQ2xvbmUuaXNFcXVhbE5vZGUoZnJDbG9uZSlcbiAgICB9XG4gICAgcmV0dXJuIGVsQ2xvbmUuaXNFcXVhbE5vZGUoZnJDbG9uZSlcbn1cblxuZnVuY3Rpb24gY29udGVudERpZmZlcihlbGVtZW50Tm9kZTogTm9kZSwgZnJhZ21lbnROb2RlOiBOb2RlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGVsZW1lbnROb2RlLmlzRXF1YWxOb2RlKGZyYWdtZW50Tm9kZSkgPT09IGZhbHNlXG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRzRGVsZXRlZChlbGVtZW50Tm9kZXM6IE5vZGVbXSwgZnJhZ21lbnROb2RlczogTm9kZVtdKTogQXJyYXk8Tm9kZT4ge1xuICAgIGlmIChlbGVtZW50Tm9kZXMubGVuZ3RoID4gZnJhZ21lbnROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50Tm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Tm9kZXNbaV0gJiYgIWZyYWdtZW50Tm9kZXNbaV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2VsZW1lbnROb2Rlc1tpXV0uY29uY2F0KFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50c0RlbGV0ZWQoXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGVsZW1lbnROb2Rlcykuc2xpY2UoaSArIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbShmcmFnbWVudE5vZGVzKS5zbGljZShpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFub2RlRXF1YWxzKGVsZW1lbnROb2Rlc1tpXSwgZnJhZ21lbnROb2Rlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWxldGVkID0gZWxlbWVudHNEZWxldGVkKFxuICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGVsZW1lbnROb2Rlcykuc2xpY2UoaSArIDEpLFxuICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGZyYWdtZW50Tm9kZXMpLnNsaWNlKGkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVsZXRlZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtlbGVtZW50Tm9kZXNbaV1dXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbXVxufVxuXG5mdW5jdGlvbiBjaGlsZHJlbkNoYW5nZWRDb3VudChlbGVtZW50Tm9kZXM6IE5vZGVbXSwgZnJhZ21lbnROb2RlczogTm9kZVtdKTogbnVtYmVyIHtcbiAgICBpZiAoZWxlbWVudE5vZGVzLmxlbmd0aCA+IGZyYWdtZW50Tm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmcmFnbWVudE5vZGVzLmxlbmd0aFxuICAgIH1cbiAgICBsZXQgY2hhbmdlZCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50Tm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZWxDbG9uZSA9IGVsZW1lbnROb2Rlc1tpXS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICBjb25zdCBmckNsb25lID0gZnJhZ21lbnROb2Rlc1tpXS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICBpZiAoIW5vZGVFcXVhbHMoZWxlbWVudE5vZGVzW2ldLCBmcmFnbWVudE5vZGVzW2ldKSkge1xuICAgICAgICAgICAgaWYgKCFpc0VtcHR5Tm9kZShlbENsb25lKSAmJiAhaXNFbXB0eU5vZGUoZnJDbG9uZSkpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkKytcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZFxufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZHJlbihlbGVtZW50Tm9kZTogTm9kZSwgZWxlbWVudENoaWxkcmVuOiBOb2RlW10sIGZyYWdtZW50Q2hpbGRyZW46IE5vZGVbXSk6IHZvaWQge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIGZvciAobGV0IGkgPSBlbGVtZW50Q2hpbGRyZW4ubGVuZ3RoOyBpIDwgZnJhZ21lbnRDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChcbiAgICAgICAgICAgIGZyYWdtZW50Q2hpbGRyZW5baV1cbiAgICAgICAgKVxuICAgIH1cbiAgICBlbGVtZW50Tm9kZS5hcHBlbmRDaGlsZChcbiAgICAgICAgZnJhZ21lbnRcbiAgICApXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJpYnV0ZXMoZWxlbWVudE5vZGU6IE5vZGUsIGZyYWdtZW50Tm9kZTogTm9kZSk6IHZvaWQge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSAoZnJhZ21lbnROb2RlOiBhbnkpLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgY29uc3QgZWxlbWVudEF0dHJpYnV0ZXMgPSAoZWxlbWVudE5vZGU6IGFueSkuYXR0cmlidXRlcyB8fCBbXTtcbiAgICBpZiAoZWxlbWVudEF0dHJpYnV0ZXMubGVuZ3RoID4gYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50QXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gZWxlbWVudEF0dHJpYnV0ZXNbaV07XG4gICAgICAgICAgICBpZiAoIShmcmFnbWVudE5vZGU6IGFueSkuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZS5ub2RlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAoZWxlbWVudE5vZGU6IGFueSkucmVtb3ZlQXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUubm9kZU5hbWVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgICAgIChlbGVtZW50Tm9kZTogYW55KS5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICBhdHRyaWJ1dGUubm9kZU5hbWUsXG4gICAgICAgICAgICBhdHRyaWJ1dGUubm9kZVZhbHVlXG4gICAgICAgICk7XG4gICAgfVxuICAgIGlmIChwcm9wc1N0b3JhZ2UuZ2V0KGZyYWdtZW50Tm9kZSkpIHtcbiAgICAgICAgY29uc3QgZWxQcm9wcyA9IHByb3BzU3RvcmFnZS5nZXQoZWxlbWVudE5vZGUpO1xuICAgICAgICBjb25zdCBmclByb3BzID0gcHJvcHNTdG9yYWdlLmdldChmcmFnbWVudE5vZGUpO1xuICAgICAgICBwcm9wc1N0b3JhZ2Uuc2V0KFxuICAgICAgICAgICAgZWxlbWVudE5vZGUsXG4gICAgICAgICAgICBmclByb3BzXG4gICAgICAgICk7XG4gICAgICAgIGlmICghc2hhbGxvd0VxdWFsKGVsUHJvcHMsIGZyUHJvcHMpKSB7XG4gICAgICAgICAgICBpZiAoaXNDdXN0b21Db21wb25lbnQoZWxlbWVudE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyLmNhbGwoKGVsZW1lbnROb2RlOiBhbnkpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVFbGVtZW50KGVsZW1lbnROb2RlOiBOb2RlLCBmcmFnbWVudE5vZGU6IE5vZGUpOiB2b2lkIHtcbiAgICBpZiAoaXNDdXN0b21Db21wb25lbnQoZWxlbWVudE5vZGUpKSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVBdHRyaWJ1dGVzKFxuICAgICAgICAgICAgZWxlbWVudE5vZGUsXG4gICAgICAgICAgICBmcmFnbWVudE5vZGVcbiAgICAgICAgKVxuICAgIH1cbiAgICBpZiAoIW5vZGVFcXVhbHMoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSkpIHtcbiAgICAgICAgdXBkYXRlQXR0cmlidXRlcyhcbiAgICAgICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICAgICAgZnJhZ21lbnROb2RlXG4gICAgICAgIClcbiAgICB9XG4gICAgdXBkYXRlQ2hpbGRyZW4oXG4gICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICBmcmFnbWVudE5vZGVcbiAgICApXG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlOb2RlKG5vZGU6IE5vZGUpOiBib29sZWFuIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobm9kZS5pbm5lclRleHQpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4obm9kZS5pbm5lclRleHQudHJpbSgpKSA9PT0gZmFsc2VcbiAgICB9XG4gICAgaWYgKChub2RlOiBhbnkpLmlubmVySFRNTCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbigobm9kZTogYW55KS5pbm5lckhUTUwudHJpbSgpKSA9PT0gZmFsc2VcbiAgICB9XG4gICAgaWYgKChub2RlOiBhbnkpLnRleHRDb250ZW50KSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKChub2RlOiBhbnkpLnRleHRDb250ZW50LnRyaW0oKSkgPT09IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIG5vZGVGaWx0ZXIobm9kZTogTm9kZSk6IGJvb2xlYW4ge1xuICAgIGlmIChub2RlKSB7XG4gICAgICAgIHJldHVybiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgfHxcbiAgICAgICAgICAgIG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSAmJlxuICAgICAgICAgICAgbm9kZS5ub2RlTmFtZSAhPT0gXCJTVFlMRVwiICYmXG4gICAgICAgICAgICAhaXNFbXB0eU5vZGUobm9kZSlcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGhhbmRsZUNoaWxkcmVuQ291bnRDaGFuZ2VkKGVsZW1lbnROb2RlOiBOb2RlLCBmcmFnbWVudE5vZGU6IE5vZGUsIGVsZW1lbnROb2RlczogTm9kZVtdLCBmcmFnbWVudE5vZGVzOiBOb2RlW10pOiB2b2lkIHtcbiAgICBjb25zdCBkZWxldGVkID0gZWxlbWVudHNEZWxldGVkKFxuICAgICAgICBlbGVtZW50Tm9kZXMsXG4gICAgICAgIGZyYWdtZW50Tm9kZXMsXG4gICAgKTtcbiAgICBpZiAoZnJhZ21lbnROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIChlbGVtZW50Tm9kZS5wYXJlbnROb2RlOiBhbnkpLnJlcGxhY2VDaGlsZChcbiAgICAgICAgICAgIGZyYWdtZW50Tm9kZSxcbiAgICAgICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICApO1xuICAgIH1cbiAgICBpZiAoZGVsZXRlZC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgKGRlbGV0ZWRbMF0ucGFyZW50Tm9kZTogYW55KS5yZW1vdmVDaGlsZChkZWxldGVkWzBdKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUNoaWxkcmVuKFxuICAgICAgICAgICAgZWxlbWVudE5vZGUsXG4gICAgICAgICAgICBmcmFnbWVudE5vZGVcbiAgICAgICAgKVxuICAgIH1cbiAgICBpZiAoY2hpbGRyZW5DaGFuZ2VkQ291bnQoZWxlbWVudE5vZGVzLCBmcmFnbWVudE5vZGVzKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIChlbGVtZW50Tm9kZS5wYXJlbnROb2RlOiBhbnkpLnJlcGxhY2VDaGlsZChcbiAgICAgICAgICAgIGZyYWdtZW50Tm9kZSxcbiAgICAgICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXBwZW5kQ2hpbGRyZW4oXG4gICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICBlbGVtZW50Tm9kZXMsXG4gICAgICAgIGZyYWdtZW50Tm9kZXMsXG4gICAgKVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZHJlbihlbGVtZW50Tm9kZTogTm9kZSwgZnJhZ21lbnROb2RlOiBOb2RlKTogdm9pZCB7XG4gICAgY29uc3QgZWxlbWVudE5vZGVzID0gQXJyYXkuZnJvbShlbGVtZW50Tm9kZS5jaGlsZE5vZGVzKS5maWx0ZXIobm9kZUZpbHRlcik7XG4gICAgY29uc3QgZnJhZ21lbnROb2RlcyA9IEFycmF5LmZyb20oZnJhZ21lbnROb2RlLmNoaWxkTm9kZXMpLmZpbHRlcihub2RlRmlsdGVyKTtcbiAgICBpZiAoZWxlbWVudE5vZGVzLmxlbmd0aCAhPT0gZnJhZ21lbnROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNoaWxkcmVuQ291bnRDaGFuZ2VkKFxuICAgICAgICAgICAgZWxlbWVudE5vZGUsXG4gICAgICAgICAgICBmcmFnbWVudE5vZGUsXG4gICAgICAgICAgICBlbGVtZW50Tm9kZXMsXG4gICAgICAgICAgICBmcmFnbWVudE5vZGVzXG4gICAgICAgIClcbiAgICB9XG4gICAgaWYgKGVsZW1lbnROb2Rlcy5sZW5ndGggPT09IDAgJiYgZnJhZ21lbnROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKGNvbnRlbnREaWZmZXIoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoZWxlbWVudE5vZGUucGFyZW50Tm9kZTogYW55KS5yZXBsYWNlQ2hpbGQoXG4gICAgICAgICAgICAgICAgZnJhZ21lbnROb2RlLFxuICAgICAgICAgICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB1cGRhdGVFbGVtZW50KFxuICAgICAgICAgICAgZWxlbWVudE5vZGVzW2ldLFxuICAgICAgICAgICAgZnJhZ21lbnROb2Rlc1tpXVxuICAgICAgICApXG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21TdHIodHBsOiBzdHJpbmcpOiBIVE1MVGVtcGxhdGVFbGVtZW50IHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSB0cGw7XG4gICAgcmV0dXJuIHRlbXBsYXRlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IHN0YXJ0IHJlbmRlcmluZycpO1xuICAgIHRoaXMuYmVmb3JlUmVuZGVyKCk7XG5cbiAgICBpZiAodGhpcy5pc1NoYWRvdyAmJiAhdGhpcy5zaGFkb3dSb290KSB7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBhdHRhY2hpbmcgcm9vdCcpO1xuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTogJ29wZW4nfSk7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCByb290IGF0dGFjaGVkJyk7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXG4gICAgICAgICAgICBcIm11c2tvdCBhdHRhY2ggcm9vdFwiLFxuICAgICAgICAgICAgJ211c2tvdCBhdHRhY2hpbmcgcm9vdCcsXG4gICAgICAgICAgICAnbXVza290IHJvb3QgYXR0YWNoZWQnXG4gICAgICAgICk7XG4gICAgfVxuICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBjcmVhdGUgcmVuZGVyIERPTScpO1xuICAgIGNvbnN0IHJlbmRlclJlcyA9IHRoaXMucmVuZGVyKCk7XG4gICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IHJlbmRlciBET00gY3JlYXRlZCcpO1xuICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXG4gICAgICAgIFwibXVza290IGNvbXBvbmVudCByZW5kZXIgcmVzdWx0XCIsXG4gICAgICAgICdtdXNrb3QgY3JlYXRlIHJlbmRlciBET00nLFxuICAgICAgICAnbXVza290IHJlbmRlciBET00gY3JlYXRlZCdcbiAgICApO1xuXG4gICAgY29uc3Qgcm9vdCA9IHRoaXMuaXNTaGFkb3cgPyAodGhpcy5zaGFkb3dSb290OiBhbnkpIDogdGhpcztcbiAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgY3JlYXRlIGZyYWdtZW50Jyk7XG4gICAgY29uc3QgZnJhZ21lbnQgPSB0eXBlb2YgcmVuZGVyUmVzID09PSBcInN0cmluZ1wiID8gY3JlYXRlRnJhZ21lbnRGcm9tU3RyKHJlbmRlclJlcykgOiByZW5kZXJSZXM7XG4gICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGZyYWdtZW50IGNyZWF0ZWQnKTtcbiAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKFxuICAgICAgICBcIm11c2tvdCBmcmFnbWVudCBjcmVhdGlvblwiLFxuICAgICAgICAnbXVza290IGNyZWF0ZSBmcmFnbWVudCcsXG4gICAgICAgICdtdXNrb3QgZnJhZ21lbnQgY3JlYXRlZCdcbiAgICApO1xuXG4gICAgaWYgKCF0aGlzLm1vdW50ZWQpIHtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGluc2VydCBzdHlsZSBpbnRvIGNvbXBvbmVudCcpO1xuICAgICAgICByb290LmlubmVySFRNTCA9IGA8c3R5bGU+JHt0aGlzLnN0eWxlc308L3N0eWxlPmA7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBzdHlsZSBpbnNlcnRlZCcpO1xuICAgICAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKFxuICAgICAgICAgICAgXCJtdXNrb3Qgc3R5bGUgY3JlYXRpb24gJiBpbnNlcnQgYnkgaW5uZXJIVE1MXCIsXG4gICAgICAgICAgICAnbXVza290IGluc2VydCBzdHlsZSBpbnRvIGNvbXBvbmVudCcsXG4gICAgICAgICAgICAnbXVza290IHN0eWxlIGluc2VydGVkJ1xuICAgICAgICApO1xuXG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBhcHBlbmQgY2hpbGQgd2l0aCBjb250ZW50Jyk7XG4gICAgICAgIHJvb3QuYXBwZW5kQ2hpbGQoZnJhZ21lbnQuY29udGVudCk7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBjb250ZW50IGFwcGVuZGVkJyk7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXG4gICAgICAgICAgICBcIm11c2tvdCBhcHBlbmQgY29udGVudCBvbiBpbml0aWFsIHJlbmRlclwiLFxuICAgICAgICAgICAgJ211c2tvdCBhcHBlbmQgY2hpbGQgd2l0aCBjb250ZW50JyxcbiAgICAgICAgICAgICdtdXNrb3QgY29udGVudCBhcHBlbmRlZCdcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBpbnNlcnQgc3R5bGVzIGJlZm9yZSBjb250ZW50IG9uIHVwZGF0ZScpO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgc3R5bGUuaW5uZXJIVE1MID0gdGhpcy5zdHlsZXM7XG4gICAgICAgIGZyYWdtZW50LmNvbnRlbnQuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBmcmFnbWVudC5jb250ZW50LmZpcnN0Q2hpbGRcbiAgICAgICAgKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IHN0eWxlcyBpbnNlcnRlZCBvbiB1cGRhdGUnKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShcbiAgICAgICAgICAgIFwibXVza290IGFkZCBzdHlsZXMgYnkgaW5zZXJ0QmVmb3JlXCIsXG4gICAgICAgICAgICAnbXVza290IGluc2VydCBzdHlsZXMgYmVmb3JlIGNvbnRlbnQgb24gdXBkYXRlJyxcbiAgICAgICAgICAgICdtdXNrb3Qgc3R5bGVzIGluc2VydGVkIG9uIHVwZGF0ZSdcbiAgICAgICAgKTtcblxuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgdXBkYXRlIGNoaWxkcmVuJyk7XG4gICAgICAgIHVwZGF0ZUNoaWxkcmVuKFxuICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgIGZyYWdtZW50LmNvbnRlbnRcbiAgICAgICAgKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGNoaWxkcmVuIHVwZGF0ZWQnKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShcbiAgICAgICAgICAgIFwibXVza290IHVwZGF0ZSBjb21wb25lbnQncyBjaGlsZHJlblwiLFxuICAgICAgICAgICAgJ211c2tvdCB1cGRhdGUgY2hpbGRyZW4nLFxuICAgICAgICAgICAgJ211c2tvdCBjaGlsZHJlbiB1cGRhdGVkJ1xuICAgICAgICApO1xuICAgIH1cbiAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgZmluaXNoIHJlbmRlcmluZycpO1xuICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXG4gICAgICAgIFwibXVza290IGZ1bGwgcmVuZGVyXCIsXG4gICAgICAgICdtdXNrb3Qgc3RhcnQgcmVuZGVyaW5nJyxcbiAgICAgICAgJ211c2tvdCBmaW5pc2ggcmVuZGVyaW5nJ1xuICAgICk7XG5cbiAgICB0aGlzLmFmdGVyUmVuZGVyKCk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3JlbmRlci5qcyIsImNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAgICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAgICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICAgICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakE6IG1peGVkLCBvYmpCOiBtaXhlZCk6IGJvb2xlYW4ge1xuICAgIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICBvYmpBID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICBvYmpCID09PSBudWxsXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICAgIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHxcbiAgICAgICAgICAgICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNoYWxsb3dFcXVhbDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2hhbGxvdy1lcXVhbC5qcyIsImltcG9ydCB7Y2hhbmdlV2ViQ29tcG9uZW50c1JlYWR5Q2hlY2t9IGZyb20gXCIuL2luZGV4XCJcblxuY2hhbmdlV2ViQ29tcG9uZW50c1JlYWR5Q2hlY2soXG4gICAgKCkgPT4ge1xuICAgICAgICBpZiAoJ2N1c3RvbUVsZW1lbnRzJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxudWxsPigocmVzb2x2ZTogRnVuY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHJlcXVpcmUoXCJAd2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHNcIikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ1dlYkNvbXBvbmVudHNSZWFkeScsIHJlc29sdmUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG4pO1xuXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleFwiXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3dpdGgtcG9seWZpbGwuanMiLCIoZnVuY3Rpb24oKXtcbid1c2Ugc3RyaWN0Jzt2YXIgaD1uZXcgZnVuY3Rpb24oKXt9O3ZhciBhYT1uZXcgU2V0KFwiYW5ub3RhdGlvbi14bWwgY29sb3ItcHJvZmlsZSBmb250LWZhY2UgZm9udC1mYWNlLXNyYyBmb250LWZhY2UtdXJpIGZvbnQtZmFjZS1mb3JtYXQgZm9udC1mYWNlLW5hbWUgbWlzc2luZy1nbHlwaFwiLnNwbGl0KFwiIFwiKSk7ZnVuY3Rpb24gbShiKXt2YXIgYT1hYS5oYXMoYik7Yj0vXlthLXpdWy4wLTlfYS16XSotW1xcLS4wLTlfYS16XSokLy50ZXN0KGIpO3JldHVybiFhJiZifWZ1bmN0aW9uIG4oYil7dmFyIGE9Yi5pc0Nvbm5lY3RlZDtpZih2b2lkIDAhPT1hKXJldHVybiBhO2Zvcig7YiYmIShiLl9fQ0VfaXNJbXBvcnREb2N1bWVudHx8YiBpbnN0YW5jZW9mIERvY3VtZW50KTspYj1iLnBhcmVudE5vZGV8fCh3aW5kb3cuU2hhZG93Um9vdCYmYiBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q/Yi5ob3N0OnZvaWQgMCk7cmV0dXJuISghYnx8IShiLl9fQ0VfaXNJbXBvcnREb2N1bWVudHx8YiBpbnN0YW5jZW9mIERvY3VtZW50KSl9XG5mdW5jdGlvbiBwKGIsYSl7Zm9yKDthJiZhIT09YiYmIWEubmV4dFNpYmxpbmc7KWE9YS5wYXJlbnROb2RlO3JldHVybiBhJiZhIT09Yj9hLm5leHRTaWJsaW5nOm51bGx9XG5mdW5jdGlvbiB0KGIsYSxjKXtjPWM/YzpuZXcgU2V0O2Zvcih2YXIgZD1iO2Q7KXtpZihkLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpe3ZhciBlPWQ7YShlKTt2YXIgZj1lLmxvY2FsTmFtZTtpZihcImxpbmtcIj09PWYmJlwiaW1wb3J0XCI9PT1lLmdldEF0dHJpYnV0ZShcInJlbFwiKSl7ZD1lLmltcG9ydDtpZihkIGluc3RhbmNlb2YgTm9kZSYmIWMuaGFzKGQpKWZvcihjLmFkZChkKSxkPWQuZmlyc3RDaGlsZDtkO2Q9ZC5uZXh0U2libGluZyl0KGQsYSxjKTtkPXAoYixlKTtjb250aW51ZX1lbHNlIGlmKFwidGVtcGxhdGVcIj09PWYpe2Q9cChiLGUpO2NvbnRpbnVlfWlmKGU9ZS5fX0NFX3NoYWRvd1Jvb3QpZm9yKGU9ZS5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKXQoZSxhLGMpfWQ9ZC5maXJzdENoaWxkP2QuZmlyc3RDaGlsZDpwKGIsZCl9fWZ1bmN0aW9uIHUoYixhLGMpe2JbYV09Y307ZnVuY3Rpb24gdigpe3RoaXMuYT1uZXcgTWFwO3RoaXMucz1uZXcgTWFwO3RoaXMuZj1bXTt0aGlzLmI9ITF9ZnVuY3Rpb24gYmEoYixhLGMpe2IuYS5zZXQoYSxjKTtiLnMuc2V0KGMuY29uc3RydWN0b3IsYyl9ZnVuY3Rpb24gdyhiLGEpe2IuYj0hMDtiLmYucHVzaChhKX1mdW5jdGlvbiB4KGIsYSl7Yi5iJiZ0KGEsZnVuY3Rpb24oYSl7cmV0dXJuIHkoYixhKX0pfWZ1bmN0aW9uIHkoYixhKXtpZihiLmImJiFhLl9fQ0VfcGF0Y2hlZCl7YS5fX0NFX3BhdGNoZWQ9ITA7Zm9yKHZhciBjPTA7YzxiLmYubGVuZ3RoO2MrKyliLmZbY10oYSl9fWZ1bmN0aW9uIHooYixhKXt2YXIgYz1bXTt0KGEsZnVuY3Rpb24oYil7cmV0dXJuIGMucHVzaChiKX0pO2ZvcihhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07MT09PWQuX19DRV9zdGF0ZT9iLmNvbm5lY3RlZENhbGxiYWNrKGQpOkEoYixkKX19XG5mdW5jdGlvbiBCKGIsYSl7dmFyIGM9W107dChhLGZ1bmN0aW9uKGIpe3JldHVybiBjLnB1c2goYil9KTtmb3IoYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdOzE9PT1kLl9fQ0Vfc3RhdGUmJmIuZGlzY29ubmVjdGVkQ2FsbGJhY2soZCl9fVxuZnVuY3Rpb24gQyhiLGEsYyl7Yz1jP2M6e307dmFyIGQ9Yy53fHxuZXcgU2V0LGU9Yy5pfHxmdW5jdGlvbihhKXtyZXR1cm4gQShiLGEpfSxmPVtdO3QoYSxmdW5jdGlvbihhKXtpZihcImxpbmtcIj09PWEubG9jYWxOYW1lJiZcImltcG9ydFwiPT09YS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikpe3ZhciBjPWEuaW1wb3J0O2MgaW5zdGFuY2VvZiBOb2RlJiYoYy5fX0NFX2lzSW1wb3J0RG9jdW1lbnQ9ITAsYy5fX0NFX2hhc1JlZ2lzdHJ5PSEwKTtjJiZcImNvbXBsZXRlXCI9PT1jLnJlYWR5U3RhdGU/Yy5fX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQ9ITA6YS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKCl7dmFyIGM9YS5pbXBvcnQ7aWYoIWMuX19DRV9kb2N1bWVudExvYWRIYW5kbGVkKXtjLl9fQ0VfZG9jdW1lbnRMb2FkSGFuZGxlZD0hMDt2YXIgZj1uZXcgU2V0KGQpO2YuZGVsZXRlKGMpO0MoYixjLHt3OmYsaTplfSl9fSl9ZWxzZSBmLnB1c2goYSl9LGQpO2lmKGIuYilmb3IoYT0wO2E8XG5mLmxlbmd0aDthKyspeShiLGZbYV0pO2ZvcihhPTA7YTxmLmxlbmd0aDthKyspZShmW2FdKX1cbmZ1bmN0aW9uIEEoYixhKXtpZih2b2lkIDA9PT1hLl9fQ0Vfc3RhdGUpe3ZhciBjPWEub3duZXJEb2N1bWVudDtpZihjLmRlZmF1bHRWaWV3fHxjLl9fQ0VfaXNJbXBvcnREb2N1bWVudCYmYy5fX0NFX2hhc1JlZ2lzdHJ5KWlmKGM9Yi5hLmdldChhLmxvY2FsTmFtZSkpe2MuY29uc3RydWN0aW9uU3RhY2sucHVzaChhKTt2YXIgZD1jLmNvbnN0cnVjdG9yO3RyeXt0cnl7aWYobmV3IGQhPT1hKXRocm93IEVycm9yKFwiVGhlIGN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9yIGRpZCBub3QgcHJvZHVjZSB0aGUgZWxlbWVudCBiZWluZyB1cGdyYWRlZC5cIik7fWZpbmFsbHl7Yy5jb25zdHJ1Y3Rpb25TdGFjay5wb3AoKX19Y2F0Y2gocil7dGhyb3cgYS5fX0NFX3N0YXRlPTIscjt9YS5fX0NFX3N0YXRlPTE7YS5fX0NFX2RlZmluaXRpb249YztpZihjLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaylmb3IoYz1jLm9ic2VydmVkQXR0cmlidXRlcyxkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sXG5mPWEuZ2V0QXR0cmlidXRlKGUpO251bGwhPT1mJiZiLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhLGUsbnVsbCxmLG51bGwpfW4oYSkmJmIuY29ubmVjdGVkQ2FsbGJhY2soYSl9fX12LnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjaz1mdW5jdGlvbihiKXt2YXIgYT1iLl9fQ0VfZGVmaW5pdGlvbjthLmNvbm5lY3RlZENhbGxiYWNrJiZhLmNvbm5lY3RlZENhbGxiYWNrLmNhbGwoYil9O3YucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrPWZ1bmN0aW9uKGIpe3ZhciBhPWIuX19DRV9kZWZpbml0aW9uO2EuZGlzY29ubmVjdGVkQ2FsbGJhY2smJmEuZGlzY29ubmVjdGVkQ2FsbGJhY2suY2FsbChiKX07XG52LnByb3RvdHlwZS5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s9ZnVuY3Rpb24oYixhLGMsZCxlKXt2YXIgZj1iLl9fQ0VfZGVmaW5pdGlvbjtmLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayYmLTE8Zi5vYnNlcnZlZEF0dHJpYnV0ZXMuaW5kZXhPZihhKSYmZi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2suY2FsbChiLGEsYyxkLGUpfTtmdW5jdGlvbiBEKGIsYSl7dGhpcy5jPWI7dGhpcy5hPWE7dGhpcy5iPXZvaWQgMDtDKHRoaXMuYyx0aGlzLmEpO1wibG9hZGluZ1wiPT09dGhpcy5hLnJlYWR5U3RhdGUmJih0aGlzLmI9bmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5mLmJpbmQodGhpcykpLHRoaXMuYi5vYnNlcnZlKHRoaXMuYSx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KSl9ZnVuY3Rpb24gRShiKXtiLmImJmIuYi5kaXNjb25uZWN0KCl9RC5wcm90b3R5cGUuZj1mdW5jdGlvbihiKXt2YXIgYT10aGlzLmEucmVhZHlTdGF0ZTtcImludGVyYWN0aXZlXCIhPT1hJiZcImNvbXBsZXRlXCIhPT1hfHxFKHRoaXMpO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZm9yKHZhciBjPWJbYV0uYWRkZWROb2RlcyxkPTA7ZDxjLmxlbmd0aDtkKyspQyh0aGlzLmMsY1tkXSl9O2Z1bmN0aW9uIGNhKCl7dmFyIGI9dGhpczt0aGlzLmI9dGhpcy5hPXZvaWQgMDt0aGlzLmY9bmV3IFByb21pc2UoZnVuY3Rpb24oYSl7Yi5iPWE7Yi5hJiZhKGIuYSl9KX1mdW5jdGlvbiBGKGIpe2lmKGIuYSl0aHJvdyBFcnJvcihcIkFscmVhZHkgcmVzb2x2ZWQuXCIpO2IuYT12b2lkIDA7Yi5iJiZiLmIodm9pZCAwKX07ZnVuY3Rpb24gRyhiKXt0aGlzLmo9ITE7dGhpcy5jPWI7dGhpcy5vPW5ldyBNYXA7dGhpcy5sPWZ1bmN0aW9uKGIpe3JldHVybiBiKCl9O3RoaXMuZz0hMTt0aGlzLm09W107dGhpcy51PW5ldyBEKGIsZG9jdW1lbnQpfVxuRy5wcm90b3R5cGUuZGVmaW5lPWZ1bmN0aW9uKGIsYSl7dmFyIGM9dGhpcztpZighKGEgaW5zdGFuY2VvZiBGdW5jdGlvbikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9ycyBtdXN0IGJlIGZ1bmN0aW9ucy5cIik7aWYoIW0oYikpdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIGVsZW1lbnQgbmFtZSAnXCIrYitcIicgaXMgbm90IHZhbGlkLlwiKTtpZih0aGlzLmMuYS5nZXQoYikpdGhyb3cgRXJyb3IoXCJBIGN1c3RvbSBlbGVtZW50IHdpdGggbmFtZSAnXCIrYitcIicgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLlwiKTtpZih0aGlzLmopdGhyb3cgRXJyb3IoXCJBIGN1c3RvbSBlbGVtZW50IGlzIGFscmVhZHkgYmVpbmcgZGVmaW5lZC5cIik7dGhpcy5qPSEwO3ZhciBkLGUsZixyLGs7dHJ5e3ZhciBnPWZ1bmN0aW9uKGIpe3ZhciBhPWxbYl07aWYodm9pZCAwIT09YSYmIShhIGluc3RhbmNlb2YgRnVuY3Rpb24pKXRocm93IEVycm9yKFwiVGhlICdcIitiK1wiJyBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24uXCIpO1xucmV0dXJuIGF9LGw9YS5wcm90b3R5cGU7aWYoIShsIGluc3RhbmNlb2YgT2JqZWN0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9yJ3MgcHJvdG90eXBlIGlzIG5vdCBhbiBvYmplY3QuXCIpO2Q9ZyhcImNvbm5lY3RlZENhbGxiYWNrXCIpO2U9ZyhcImRpc2Nvbm5lY3RlZENhbGxiYWNrXCIpO2Y9ZyhcImFkb3B0ZWRDYWxsYmFja1wiKTtyPWcoXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIik7az1hLm9ic2VydmVkQXR0cmlidXRlc3x8W119Y2F0Y2gocSl7cmV0dXJufWZpbmFsbHl7dGhpcy5qPSExfWE9e2xvY2FsTmFtZTpiLGNvbnN0cnVjdG9yOmEsY29ubmVjdGVkQ2FsbGJhY2s6ZCxkaXNjb25uZWN0ZWRDYWxsYmFjazplLGFkb3B0ZWRDYWxsYmFjazpmLGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjazpyLG9ic2VydmVkQXR0cmlidXRlczprLGNvbnN0cnVjdGlvblN0YWNrOltdfTtiYSh0aGlzLmMsYixhKTt0aGlzLm0ucHVzaChhKTt0aGlzLmd8fFxuKHRoaXMuZz0hMCx0aGlzLmwoZnVuY3Rpb24oKXtyZXR1cm4gZGEoYyl9KSl9O0cucHJvdG90eXBlLmk9ZnVuY3Rpb24oYil7Qyh0aGlzLmMsYil9O2Z1bmN0aW9uIGRhKGIpe2lmKCExIT09Yi5nKXtiLmc9ITE7Zm9yKHZhciBhPWIubSxjPVtdLGQ9bmV3IE1hcCxlPTA7ZTxhLmxlbmd0aDtlKyspZC5zZXQoYVtlXS5sb2NhbE5hbWUsW10pO0MoYi5jLGRvY3VtZW50LHtpOmZ1bmN0aW9uKGEpe2lmKHZvaWQgMD09PWEuX19DRV9zdGF0ZSl7dmFyIGU9YS5sb2NhbE5hbWUsZj1kLmdldChlKTtmP2YucHVzaChhKTpiLmMuYS5nZXQoZSkmJmMucHVzaChhKX19fSk7Zm9yKGU9MDtlPGMubGVuZ3RoO2UrKylBKGIuYyxjW2VdKTtmb3IoOzA8YS5sZW5ndGg7KXtmb3IodmFyIGY9YS5zaGlmdCgpLGU9Zi5sb2NhbE5hbWUsZj1kLmdldChmLmxvY2FsTmFtZSkscj0wO3I8Zi5sZW5ndGg7cisrKUEoYi5jLGZbcl0pOyhlPWIuby5nZXQoZSkpJiZGKGUpfX19XG5HLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oYil7aWYoYj10aGlzLmMuYS5nZXQoYikpcmV0dXJuIGIuY29uc3RydWN0b3J9O0cucHJvdG90eXBlLndoZW5EZWZpbmVkPWZ1bmN0aW9uKGIpe2lmKCFtKGIpKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgU3ludGF4RXJyb3IoXCInXCIrYitcIicgaXMgbm90IGEgdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZS5cIikpO3ZhciBhPXRoaXMuby5nZXQoYik7aWYoYSlyZXR1cm4gYS5mO2E9bmV3IGNhO3RoaXMuby5zZXQoYixhKTt0aGlzLmMuYS5nZXQoYikmJiF0aGlzLm0uc29tZShmdW5jdGlvbihhKXtyZXR1cm4gYS5sb2NhbE5hbWU9PT1ifSkmJkYoYSk7cmV0dXJuIGEuZn07Ry5wcm90b3R5cGUudj1mdW5jdGlvbihiKXtFKHRoaXMudSk7dmFyIGE9dGhpcy5sO3RoaXMubD1mdW5jdGlvbihjKXtyZXR1cm4gYihmdW5jdGlvbigpe3JldHVybiBhKGMpfSl9fTt3aW5kb3cuQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5PUc7XG5HLnByb3RvdHlwZS5kZWZpbmU9Ry5wcm90b3R5cGUuZGVmaW5lO0cucHJvdG90eXBlLnVwZ3JhZGU9Ry5wcm90b3R5cGUuaTtHLnByb3RvdHlwZS5nZXQ9Ry5wcm90b3R5cGUuZ2V0O0cucHJvdG90eXBlLndoZW5EZWZpbmVkPUcucHJvdG90eXBlLndoZW5EZWZpbmVkO0cucHJvdG90eXBlLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2s9Ry5wcm90b3R5cGUudjt2YXIgSD13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQsST13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnROUyxlYT13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGUsZmE9d2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5wcmVwZW5kLGdhPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuYXBwZW5kLGhhPXdpbmRvdy5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5wcmVwZW5kLGlhPXdpbmRvdy5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5hcHBlbmQsSj13aW5kb3cuTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlLEs9d2luZG93Lk5vZGUucHJvdG90eXBlLmFwcGVuZENoaWxkLEw9d2luZG93Lk5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSxNPXdpbmRvdy5Ob2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCxOPXdpbmRvdy5Ob2RlLnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQsTz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdy5Ob2RlLnByb3RvdHlwZSxcblwidGV4dENvbnRlbnRcIiksUD13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYXR0YWNoU2hhZG93LFE9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUsXCJpbm5lckhUTUxcIiksUj13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlLFM9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZSxUPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGUsVT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTlMsamE9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TLGthPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGVOUyxsYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50LG1hPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5pbnNlcnRBZGphY2VudEhUTUwsbmE9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnByZXBlbmQsXG5vYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYXBwZW5kLFY9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmJlZm9yZSxwYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYWZ0ZXIscWE9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VXaXRoLHJhPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmUsc2E9d2luZG93LkhUTUxFbGVtZW50LFc9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLFwiaW5uZXJIVE1MXCIpLHRhPXdpbmRvdy5IVE1MRWxlbWVudC5wcm90b3R5cGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50LHVhPXdpbmRvdy5IVE1MRWxlbWVudC5wcm90b3R5cGUuaW5zZXJ0QWRqYWNlbnRIVE1MO2Z1bmN0aW9uIHZhKCl7dmFyIGI9WDt3aW5kb3cuSFRNTEVsZW1lbnQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3RvcixkPWIucy5nZXQoYSk7aWYoIWQpdGhyb3cgRXJyb3IoXCJUaGUgY3VzdG9tIGVsZW1lbnQgYmVpbmcgY29uc3RydWN0ZWQgd2FzIG5vdCByZWdpc3RlcmVkIHdpdGggYGN1c3RvbUVsZW1lbnRzYC5cIik7dmFyIGU9ZC5jb25zdHJ1Y3Rpb25TdGFjaztpZighZS5sZW5ndGgpcmV0dXJuIGU9SC5jYWxsKGRvY3VtZW50LGQubG9jYWxOYW1lKSxPYmplY3Quc2V0UHJvdG90eXBlT2YoZSxhLnByb3RvdHlwZSksZS5fX0NFX3N0YXRlPTEsZS5fX0NFX2RlZmluaXRpb249ZCx5KGIsZSksZTt2YXIgZD1lLmxlbmd0aC0xLGY9ZVtkXTtpZihmPT09aCl0aHJvdyBFcnJvcihcIlRoZSBIVE1MRWxlbWVudCBjb25zdHJ1Y3RvciB3YXMgZWl0aGVyIGNhbGxlZCByZWVudHJhbnRseSBmb3IgdGhpcyBjb25zdHJ1Y3RvciBvciBjYWxsZWQgbXVsdGlwbGUgdGltZXMuXCIpO1xuZVtkXT1oO09iamVjdC5zZXRQcm90b3R5cGVPZihmLGEucHJvdG90eXBlKTt5KGIsZik7cmV0dXJuIGZ9YS5wcm90b3R5cGU9c2EucHJvdG90eXBlO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcImNvbnN0cnVjdG9yXCIse3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLHZhbHVlOmF9KTtyZXR1cm4gYX0oKX07ZnVuY3Rpb24gWShiLGEsYyl7ZnVuY3Rpb24gZChhKXtyZXR1cm4gZnVuY3Rpb24oYyl7Zm9yKHZhciBlPVtdLGQ9MDtkPGFyZ3VtZW50cy5sZW5ndGg7KytkKWVbZC0wXT1hcmd1bWVudHNbZF07Zm9yKHZhciBkPVtdLGY9W10sbD0wO2w8ZS5sZW5ndGg7bCsrKXt2YXIgcT1lW2xdO3EgaW5zdGFuY2VvZiBFbGVtZW50JiZuKHEpJiZmLnB1c2gocSk7aWYocSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpZm9yKHE9cS5maXJzdENoaWxkO3E7cT1xLm5leHRTaWJsaW5nKWQucHVzaChxKTtlbHNlIGQucHVzaChxKX1hLmFwcGx5KHRoaXMsZSk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrKylCKGIsZltlXSk7aWYobih0aGlzKSlmb3IoZT0wO2U8ZC5sZW5ndGg7ZSsrKWY9ZFtlXSxmIGluc3RhbmNlb2YgRWxlbWVudCYmeihiLGYpfX1jLmgmJihhLnByZXBlbmQ9ZChjLmgpKTtjLmFwcGVuZCYmKGEuYXBwZW5kPWQoYy5hcHBlbmQpKX07ZnVuY3Rpb24gd2EoKXt2YXIgYj1YO3UoRG9jdW1lbnQucHJvdG90eXBlLFwiY3JlYXRlRWxlbWVudFwiLGZ1bmN0aW9uKGEpe2lmKHRoaXMuX19DRV9oYXNSZWdpc3RyeSl7dmFyIGM9Yi5hLmdldChhKTtpZihjKXJldHVybiBuZXcgYy5jb25zdHJ1Y3Rvcn1hPUguY2FsbCh0aGlzLGEpO3koYixhKTtyZXR1cm4gYX0pO3UoRG9jdW1lbnQucHJvdG90eXBlLFwiaW1wb3J0Tm9kZVwiLGZ1bmN0aW9uKGEsYyl7YT1lYS5jYWxsKHRoaXMsYSxjKTt0aGlzLl9fQ0VfaGFzUmVnaXN0cnk/QyhiLGEpOngoYixhKTtyZXR1cm4gYX0pO3UoRG9jdW1lbnQucHJvdG90eXBlLFwiY3JlYXRlRWxlbWVudE5TXCIsZnVuY3Rpb24oYSxjKXtpZih0aGlzLl9fQ0VfaGFzUmVnaXN0cnkmJihudWxsPT09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hKSl7dmFyIGQ9Yi5hLmdldChjKTtpZihkKXJldHVybiBuZXcgZC5jb25zdHJ1Y3Rvcn1hPUkuY2FsbCh0aGlzLGEsYyk7eShiLGEpO3JldHVybiBhfSk7XG5ZKGIsRG9jdW1lbnQucHJvdG90eXBlLHtoOmZhLGFwcGVuZDpnYX0pfTtmdW5jdGlvbiB4YSgpe3ZhciBiPVg7ZnVuY3Rpb24gYShhLGQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwidGV4dENvbnRlbnRcIix7ZW51bWVyYWJsZTpkLmVudW1lcmFibGUsY29uZmlndXJhYmxlOiEwLGdldDpkLmdldCxzZXQ6ZnVuY3Rpb24oYSl7aWYodGhpcy5ub2RlVHlwZT09PU5vZGUuVEVYVF9OT0RFKWQuc2V0LmNhbGwodGhpcyxhKTtlbHNle3ZhciBlPXZvaWQgMDtpZih0aGlzLmZpcnN0Q2hpbGQpe3ZhciBjPXRoaXMuY2hpbGROb2RlcyxrPWMubGVuZ3RoO2lmKDA8ayYmbih0aGlzKSlmb3IodmFyIGU9QXJyYXkoayksZz0wO2c8aztnKyspZVtnXT1jW2ddfWQuc2V0LmNhbGwodGhpcyxhKTtpZihlKWZvcihhPTA7YTxlLmxlbmd0aDthKyspQihiLGVbYV0pfX19KX11KE5vZGUucHJvdG90eXBlLFwiaW5zZXJ0QmVmb3JlXCIsZnVuY3Rpb24oYSxkKXtpZihhIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGEuY2hpbGROb2Rlcyk7XG5hPUwuY2FsbCh0aGlzLGEsZCk7aWYobih0aGlzKSlmb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKXooYixlW2RdKTtyZXR1cm4gYX1lPW4oYSk7ZD1MLmNhbGwodGhpcyxhLGQpO2UmJkIoYixhKTtuKHRoaXMpJiZ6KGIsYSk7cmV0dXJuIGR9KTt1KE5vZGUucHJvdG90eXBlLFwiYXBwZW5kQ2hpbGRcIixmdW5jdGlvbihhKXtpZihhIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCl7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGEuY2hpbGROb2Rlcyk7YT1LLmNhbGwodGhpcyxhKTtpZihuKHRoaXMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKXooYixjW2VdKTtyZXR1cm4gYX1jPW4oYSk7ZT1LLmNhbGwodGhpcyxhKTtjJiZCKGIsYSk7bih0aGlzKSYmeihiLGEpO3JldHVybiBlfSk7dShOb2RlLnByb3RvdHlwZSxcImNsb25lTm9kZVwiLGZ1bmN0aW9uKGEpe2E9Si5jYWxsKHRoaXMsYSk7dGhpcy5vd25lckRvY3VtZW50Ll9fQ0VfaGFzUmVnaXN0cnk/QyhiLGEpOngoYixhKTtcbnJldHVybiBhfSk7dShOb2RlLnByb3RvdHlwZSxcInJlbW92ZUNoaWxkXCIsZnVuY3Rpb24oYSl7dmFyIGM9bihhKSxlPU0uY2FsbCh0aGlzLGEpO2MmJkIoYixhKTtyZXR1cm4gZX0pO3UoTm9kZS5wcm90b3R5cGUsXCJyZXBsYWNlQ2hpbGRcIixmdW5jdGlvbihhLGQpe2lmKGEgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYS5jaGlsZE5vZGVzKTthPU4uY2FsbCh0aGlzLGEsZCk7aWYobih0aGlzKSlmb3IoQihiLGQpLGQ9MDtkPGUubGVuZ3RoO2QrKyl6KGIsZVtkXSk7cmV0dXJuIGF9dmFyIGU9bihhKSxmPU4uY2FsbCh0aGlzLGEsZCksYz1uKHRoaXMpO2MmJkIoYixkKTtlJiZCKGIsYSk7YyYmeihiLGEpO3JldHVybiBmfSk7TyYmTy5nZXQ/YShOb2RlLnByb3RvdHlwZSxPKTp3KGIsZnVuY3Rpb24oYil7YShiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9W10sYj1cbjA7Yjx0aGlzLmNoaWxkTm9kZXMubGVuZ3RoO2IrKylhLnB1c2godGhpcy5jaGlsZE5vZGVzW2JdLnRleHRDb250ZW50KTtyZXR1cm4gYS5qb2luKFwiXCIpfSxzZXQ6ZnVuY3Rpb24oYSl7Zm9yKDt0aGlzLmZpcnN0Q2hpbGQ7KU0uY2FsbCh0aGlzLHRoaXMuZmlyc3RDaGlsZCk7Sy5jYWxsKHRoaXMsZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYSkpfX0pfSl9O2Z1bmN0aW9uIHlhKGIpe3ZhciBhPUVsZW1lbnQucHJvdG90eXBlO2Z1bmN0aW9uIGMoYSl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhcmd1bWVudHMubGVuZ3RoOysrZCljW2QtMF09YXJndW1lbnRzW2RdO2Zvcih2YXIgZD1bXSxrPVtdLGc9MDtnPGMubGVuZ3RoO2crKyl7dmFyIGw9Y1tnXTtsIGluc3RhbmNlb2YgRWxlbWVudCYmbihsKSYmay5wdXNoKGwpO2lmKGwgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KWZvcihsPWwuZmlyc3RDaGlsZDtsO2w9bC5uZXh0U2libGluZylkLnB1c2gobCk7ZWxzZSBkLnB1c2gobCl9YS5hcHBseSh0aGlzLGMpO2ZvcihjPTA7YzxrLmxlbmd0aDtjKyspQihiLGtbY10pO2lmKG4odGhpcykpZm9yKGM9MDtjPGQubGVuZ3RoO2MrKylrPWRbY10sayBpbnN0YW5jZW9mIEVsZW1lbnQmJnooYixrKX19ViYmKGEuYmVmb3JlPWMoVikpO1YmJihhLmFmdGVyPWMocGEpKTtxYSYmdShhLFwicmVwbGFjZVdpdGhcIixmdW5jdGlvbihhKXtmb3IodmFyIGU9XG5bXSxjPTA7Yzxhcmd1bWVudHMubGVuZ3RoOysrYyllW2MtMF09YXJndW1lbnRzW2NdO2Zvcih2YXIgYz1bXSxkPVtdLGs9MDtrPGUubGVuZ3RoO2srKyl7dmFyIGc9ZVtrXTtnIGluc3RhbmNlb2YgRWxlbWVudCYmbihnKSYmZC5wdXNoKGcpO2lmKGcgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KWZvcihnPWcuZmlyc3RDaGlsZDtnO2c9Zy5uZXh0U2libGluZyljLnB1c2goZyk7ZWxzZSBjLnB1c2goZyl9az1uKHRoaXMpO3FhLmFwcGx5KHRoaXMsZSk7Zm9yKGU9MDtlPGQubGVuZ3RoO2UrKylCKGIsZFtlXSk7aWYoaylmb3IoQihiLHRoaXMpLGU9MDtlPGMubGVuZ3RoO2UrKylkPWNbZV0sZCBpbnN0YW5jZW9mIEVsZW1lbnQmJnooYixkKX0pO3JhJiZ1KGEsXCJyZW1vdmVcIixmdW5jdGlvbigpe3ZhciBhPW4odGhpcyk7cmEuY2FsbCh0aGlzKTthJiZCKGIsdGhpcyl9KX07ZnVuY3Rpb24gemEoKXt2YXIgYj1YO2Z1bmN0aW9uIGEoYSxjKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcImlubmVySFRNTFwiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZSxjb25maWd1cmFibGU6ITAsZ2V0OmMuZ2V0LHNldDpmdW5jdGlvbihhKXt2YXIgZT10aGlzLGQ9dm9pZCAwO24odGhpcykmJihkPVtdLHQodGhpcyxmdW5jdGlvbihhKXthIT09ZSYmZC5wdXNoKGEpfSkpO2Muc2V0LmNhbGwodGhpcyxhKTtpZihkKWZvcih2YXIgZj0wO2Y8ZC5sZW5ndGg7ZisrKXt2YXIgcj1kW2ZdOzE9PT1yLl9fQ0Vfc3RhdGUmJmIuZGlzY29ubmVjdGVkQ2FsbGJhY2socil9dGhpcy5vd25lckRvY3VtZW50Ll9fQ0VfaGFzUmVnaXN0cnk/QyhiLHRoaXMpOngoYix0aGlzKTtyZXR1cm4gYX19KX1mdW5jdGlvbiBjKGEsYyl7dShhLFwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50XCIsZnVuY3Rpb24oYSxlKXt2YXIgZD1uKGUpO2E9Yy5jYWxsKHRoaXMsYSxlKTtkJiZCKGIsZSk7bihhKSYmeihiLGUpO1xucmV0dXJuIGF9KX1mdW5jdGlvbiBkKGEsYyl7ZnVuY3Rpb24gZShhLGUpe2Zvcih2YXIgYz1bXTthIT09ZTthPWEubmV4dFNpYmxpbmcpYy5wdXNoKGEpO2ZvcihlPTA7ZTxjLmxlbmd0aDtlKyspQyhiLGNbZV0pfXUoYSxcImluc2VydEFkamFjZW50SFRNTFwiLGZ1bmN0aW9uKGEsYil7YT1hLnRvTG93ZXJDYXNlKCk7aWYoXCJiZWZvcmViZWdpblwiPT09YSl7dmFyIGQ9dGhpcy5wcmV2aW91c1NpYmxpbmc7Yy5jYWxsKHRoaXMsYSxiKTtlKGR8fHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkLHRoaXMpfWVsc2UgaWYoXCJhZnRlcmJlZ2luXCI9PT1hKWQ9dGhpcy5maXJzdENoaWxkLGMuY2FsbCh0aGlzLGEsYiksZSh0aGlzLmZpcnN0Q2hpbGQsZCk7ZWxzZSBpZihcImJlZm9yZWVuZFwiPT09YSlkPXRoaXMubGFzdENoaWxkLGMuY2FsbCh0aGlzLGEsYiksZShkfHx0aGlzLmZpcnN0Q2hpbGQsbnVsbCk7ZWxzZSBpZihcImFmdGVyZW5kXCI9PT1hKWQ9dGhpcy5uZXh0U2libGluZyxjLmNhbGwodGhpcyxcbmEsYiksZSh0aGlzLm5leHRTaWJsaW5nLGQpO2Vsc2UgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIHZhbHVlIHByb3ZpZGVkIChcIitTdHJpbmcoYSkrXCIpIGlzIG5vdCBvbmUgb2YgJ2JlZm9yZWJlZ2luJywgJ2FmdGVyYmVnaW4nLCAnYmVmb3JlZW5kJywgb3IgJ2FmdGVyZW5kJy5cIik7fSl9UCYmdShFbGVtZW50LnByb3RvdHlwZSxcImF0dGFjaFNoYWRvd1wiLGZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl9fQ0Vfc2hhZG93Um9vdD1hPVAuY2FsbCh0aGlzLGEpfSk7USYmUS5nZXQ/YShFbGVtZW50LnByb3RvdHlwZSxRKTpXJiZXLmdldD9hKEhUTUxFbGVtZW50LnByb3RvdHlwZSxXKTp3KGIsZnVuY3Rpb24oYil7YShiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSi5jYWxsKHRoaXMsITApLmlubmVySFRNTH0sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPVwidGVtcGxhdGVcIj09PXRoaXMubG9jYWxOYW1lLGU9Yj90aGlzLmNvbnRlbnQ6dGhpcyxcbmM9SS5jYWxsKGRvY3VtZW50LHRoaXMubmFtZXNwYWNlVVJJLHRoaXMubG9jYWxOYW1lKTtmb3IoYy5pbm5lckhUTUw9YTswPGUuY2hpbGROb2Rlcy5sZW5ndGg7KU0uY2FsbChlLGUuY2hpbGROb2Rlc1swXSk7Zm9yKGE9Yj9jLmNvbnRlbnQ6YzswPGEuY2hpbGROb2Rlcy5sZW5ndGg7KUsuY2FsbChlLGEuY2hpbGROb2Rlc1swXSl9fSl9KTt1KEVsZW1lbnQucHJvdG90eXBlLFwic2V0QXR0cmlidXRlXCIsZnVuY3Rpb24oYSxjKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBTLmNhbGwodGhpcyxhLGMpO3ZhciBlPVIuY2FsbCh0aGlzLGEpO1MuY2FsbCh0aGlzLGEsYyk7Yz1SLmNhbGwodGhpcyxhKTtiLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0aGlzLGEsZSxjLG51bGwpfSk7dShFbGVtZW50LnByb3RvdHlwZSxcInNldEF0dHJpYnV0ZU5TXCIsZnVuY3Rpb24oYSxjLGQpe2lmKDEhPT10aGlzLl9fQ0Vfc3RhdGUpcmV0dXJuIGphLmNhbGwodGhpcyxhLGMsZCk7dmFyIGU9VS5jYWxsKHRoaXMsXG5hLGMpO2phLmNhbGwodGhpcyxhLGMsZCk7ZD1VLmNhbGwodGhpcyxhLGMpO2IuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsYyxlLGQsYSl9KTt1KEVsZW1lbnQucHJvdG90eXBlLFwicmVtb3ZlQXR0cmlidXRlXCIsZnVuY3Rpb24oYSl7aWYoMSE9PXRoaXMuX19DRV9zdGF0ZSlyZXR1cm4gVC5jYWxsKHRoaXMsYSk7dmFyIGM9Ui5jYWxsKHRoaXMsYSk7VC5jYWxsKHRoaXMsYSk7bnVsbCE9PWMmJmIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsYSxjLG51bGwsbnVsbCl9KTt1KEVsZW1lbnQucHJvdG90eXBlLFwicmVtb3ZlQXR0cmlidXRlTlNcIixmdW5jdGlvbihhLGMpe2lmKDEhPT10aGlzLl9fQ0Vfc3RhdGUpcmV0dXJuIGthLmNhbGwodGhpcyxhLGMpO3ZhciBkPVUuY2FsbCh0aGlzLGEsYyk7a2EuY2FsbCh0aGlzLGEsYyk7dmFyIGU9VS5jYWxsKHRoaXMsYSxjKTtkIT09ZSYmYi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxjLGQsZSxhKX0pO3RhP2MoSFRNTEVsZW1lbnQucHJvdG90eXBlLFxudGEpOmxhP2MoRWxlbWVudC5wcm90b3R5cGUsbGEpOmNvbnNvbGUud2FybihcIkN1c3RvbSBFbGVtZW50czogYEVsZW1lbnQjaW5zZXJ0QWRqYWNlbnRFbGVtZW50YCB3YXMgbm90IHBhdGNoZWQuXCIpO3VhP2QoSFRNTEVsZW1lbnQucHJvdG90eXBlLHVhKTptYT9kKEVsZW1lbnQucHJvdG90eXBlLG1hKTpjb25zb2xlLndhcm4oXCJDdXN0b20gRWxlbWVudHM6IGBFbGVtZW50I2luc2VydEFkamFjZW50SFRNTGAgd2FzIG5vdCBwYXRjaGVkLlwiKTtZKGIsRWxlbWVudC5wcm90b3R5cGUse2g6bmEsYXBwZW5kOm9hfSk7eWEoYil9Oy8qXG5cbiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG52YXIgWj13aW5kb3cuY3VzdG9tRWxlbWVudHM7aWYoIVp8fFouZm9yY2VQb2x5ZmlsbHx8XCJmdW5jdGlvblwiIT10eXBlb2YgWi5kZWZpbmV8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIFouZ2V0KXt2YXIgWD1uZXcgdjt2YSgpO3dhKCk7WShYLERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLHtoOmhhLGFwcGVuZDppYX0pO3hhKCk7emEoKTtkb2N1bWVudC5fX0NFX2hhc1JlZ2lzdHJ5PSEwO3ZhciBjdXN0b21FbGVtZW50cz1uZXcgRyhYKTtPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LFwiY3VzdG9tRWxlbWVudHNcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6Y3VzdG9tRWxlbWVudHN9KX07XG59KS5jYWxsKHNlbGYpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXN0b20tZWxlbWVudHMubWluLmpzLm1hcFxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL2N1c3RvbS1lbGVtZW50cy5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=