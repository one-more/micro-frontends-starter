module.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=11)}([function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e){p.driver=p.driver.migrate(e)}function i(e){return p.driver.getItem(e)}function a(e,t){p.driver.setItem(e,t)}function c(e){p.driver.removeItem(e)}Object.defineProperty(t,"__esModule",{value:!0});var u;t.setStorageDriver=o,t.getStorage=i,t.addStorage=a,t.removeStorage=c;var l=new Map,s=new Map,f=t.storageKeys={PROPS:"props",EVENTS:"events"},d={items:Object.create((u={},r(u,f.PROPS,l),r(u,f.EVENTS,s),u)),setItem:function(e,t){this.items[e]=t},getItem:function(e){return this.items[e]},removeItem:function(e){delete this.items[e]},migrate:function(e){for(var t in this.items)e.setItem(t,this.items[t]);return e}},p=t.storage={driver:d}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={registerComponent:function(e,t){"customElements"in window?customElements.define(e,t):a().then(function(){i(e,t)})},isCustomComponent:function(e){return e.nodeName.includes("-")}},o=r,i=function(e,t){return o.registerComponent(e,t)},a=(t.setImplementation=function(e){o=e},function(){return Promise.resolve()});t.componentsReady=function(){return a()},t.setReadyCheck=function(e){a=e};t.default=i;t.isCustomComponent=function(e){return o.isCustomComponent(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={reducers:{},subscriptions:{},addReducer:function(e,t){this.reducers[e]=t},removeReducer:function(e){return delete this.reducers[e],!1},subscribe:function(e,t){var n=this;return this.subscriptions[e]||(this.subscriptions[e]=[]),this.subscriptions[e].push(t),{unsubscribe:function(){n.subscriptions[e]=n.subscriptions[e].filter(function(e){return e!==t})}}},getState:function(e){},migrate:function(e){for(var t in this.reducers){var n=this.reducers[t];e.addReducer(t,n)}for(var r in this.subscriptions){var o=!0,i=!1,a=void 0;try{for(var c,u=this.subscriptions[r][Symbol.iterator]();!(o=(c=u.next()).done);o=!0){var l=c.value;e.subscribe(r,l)}}catch(e){i=!0,a=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw a}}}return e}},o={currentImplementation:r};t.setImplementation=function(e){o.currentImplementation=o.currentImplementation.migrate(e)},t.registerReducer=function(e,t){o.currentImplementation.addReducer(e,t)},t.removeReducer=function(e){o.currentImplementation.removeReducer(e)},t.subscribe=function(e,t){return o.currentImplementation.subscribe(e,t)},t.getState=function(e){return o.currentImplementation.getState(e)}},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){return"function"==typeof e||"object"===(void 0===e?"undefined":d(e))||(0,y.isCustomComponent)(t)}function i(e,t,n){var r=e.nodeValue.match(/__ARG__(\d+)/);if(r&&r[1]){var o=Number(r[1]),i=e.nodeName;return[(0,h.tagNameToProp)(i),n[o]]}return[e.nodeName,e.nodeValue]}function a(e,t){(e.attributes||[]).length&&k.forEach(function(n){n(e,t)});for(var n=0;n<e.childNodes.length;n++)a(e.childNodes[n],t)}function c(e,t){E[e]=t,k.unshift(t.call)}function u(e){return E[e]}function l(e){var t=E[e];k=k.filter(function(e){return e!==t.call})}function s(e,t){C[e]=t}Object.defineProperty(t,"__esModule",{value:!0});var f=function(){function e(e,t){var n=[],r=!0,o=!1,i=void 0;try{for(var a,c=e[Symbol.iterator]();!(r=(a=c.next()).done)&&(n.push(a.value),!t||n.length!==t);r=!0);}catch(e){o=!0,i=e}finally{try{!r&&c.return&&c.return()}finally{if(o)throw i}}return n}return function(t,n){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return e(t,n);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),d="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e};t.callHandlers=a,t.addTemplateHandler=c,t.accessHandler=u,t.unloadHandler=l,t.setCoreHandler=s;var m=n(0),h=n(4),y=n(1),b=(0,m.getStorage)(m.storageKeys.PROPS),g=(0,m.getStorage)(m.storageKeys.EVENTS),v={call:function(e,t){for(var n=e.attributes||[],o=0;o<n.length;o++){var i=n[o];if(i.nodeName.startsWith("on")){var a=i.nodeValue.match(/__ARG__(\d+)/);if(a&&a[1]){var c=Number(a[1]),u=t[c];if("function"==typeof u){e.removeAttribute(i.nodeName);var l=i.nodeName.toLowerCase().slice(2);e.addEventListener(l,u);var s=g.get(e)||{};g.set(e,p({},s,r({},l,u)))}}}}}},w={call:function(e,t){if(e instanceof HTMLTemplateElement&&e.hasAttribute("map")){var n=String(e.getAttribute("map")).match(/__ARG__(\d+)/);if(n&&n[1]){var r=Number(n[1]),o=t[r],i=e.innerHTML,a=document.createDocumentFragment();o.forEach(function(e){return i.replace(/__ARG__(\d+)/g,function(n,r){var o=t[r];if("function"==typeof o){var i=o(e);if(i instanceof HTMLTemplateElement)a.appendChild(i.content);else{var c=document.createElement("template");c.innerHTML=i,a.appendChild(c.content)}}return o})}),e.parentNode.replaceChild(a,e)}}}},_={call:function(e,t){for(var n=e.attributes||[],a=0;a<n.length;a++){var c=n[a],u=i(c,e,t),l=f(u,2),s=l[0],d=l[1];if(o(d,e)){var m=b.get(e)||{};e.removeAttribute(c.nodeName),b.set(e,p({},m,r({},s,d)))}}}},C={events:v,map:w,props:_},E={},k=[C.map.call,C.events.call,C.props.call]},function(e,t,n){"use strict";function r(){setTimeout(function(){var e=!0,t=!1,n=void 0;try{for(var r,o=c.keys()[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){var i=r.value;i.isConnected||c.delete(i)}}catch(e){t=!0,n=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw n}}})}function o(){setTimeout(function(){var e=!0,t=!1,n=void 0;try{for(var r,o=u.keys()[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){var i=r.value;i.isConnected||u.delete(i)}}catch(e){t=!0,n=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw n}}})}function i(e){return e.split("-").reduce(function(e,t){return t?e+t[0].toUpperCase()+t.slice(1):e})}Object.defineProperty(t,"__esModule",{value:!0}),t.clearPropsStorage=r,t.clearEventsStorage=o,t.tagNameToProp=i;var a=n(0),c=(0,a.getStorage)(a.storageKeys.PROPS),u=(0,a.getStorage)(a.storageKeys.EVENTS)},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(1);Object.defineProperty(t,"changeWebComponentsImplemenation",{enumerable:!0,get:function(){return o.setImplementation}}),Object.defineProperty(t,"componentsReady",{enumerable:!0,get:function(){return o.componentsReady}}),Object.defineProperty(t,"changeWebComponentsReadyCheck",{enumerable:!0,get:function(){return o.setReadyCheck}}),Object.defineProperty(t,"registerComponent",{enumerable:!0,get:function(){return r(o).default}});var i=n(2);Object.defineProperty(t,"changeStoreImplementation",{enumerable:!0,get:function(){return i.setImplementation}}),Object.defineProperty(t,"registerReducer",{enumerable:!0,get:function(){return i.registerReducer}}),Object.defineProperty(t,"removeReducer",{enumerable:!0,get:function(){return i.removeReducer}}),Object.defineProperty(t,"subscribe",{enumerable:!0,get:function(){return i.subscribe}}),Object.defineProperty(t,"getState",{enumerable:!0,get:function(){return i.getState}});var a=n(3);Object.defineProperty(t,"addTemplateHandler",{enumerable:!0,get:function(){return a.addTemplateHandler}}),Object.defineProperty(t,"setCoreHandler",{enumerable:!0,get:function(){return a.setCoreHandler}}),Object.defineProperty(t,"unloadHandler",{enumerable:!0,get:function(){return a.unloadHandler}}),Object.defineProperty(t,"accessHandler",{enumerable:!0,get:function(){return a.accessHandler}});var c=n(6);Object.defineProperty(t,"html",{enumerable:!0,get:function(){return c.html}}),Object.defineProperty(t,"css",{enumerable:!0,get:function(){return c.css}});var u=n(0);Object.defineProperty(t,"getStorage",{enumerable:!0,get:function(){return u.getStorage}}),Object.defineProperty(t,"addStorage",{enumerable:!0,get:function(){return u.addStorage}}),Object.defineProperty(t,"removeStorage",{enumerable:!0,get:function(){return u.removeStorage}}),Object.defineProperty(t,"setStorageDriver",{enumerable:!0,get:function(){return u.setStorageDriver}});var l=n(7);Object.defineProperty(t,"bind",{enumerable:!0,get:function(){return l.bind}});var s=n(8);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return r(s).default}})},function(e,t,n){"use strict";function r(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];if(!n.length)return e[0];for(var o="",c=0;c<e.length;c++)o+=e[c],c<e.length-1&&("function"==typeof n[c]||"object"===i(n[c])?o+="__ARG__"+c:o+=n[c]);var u=document.createElement("template");return u.innerHTML=o,(0,a.callHandlers)(u.content,n),u}function o(e){for(var t="",n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];for(var i=0;i<e.length;i++)t+=e[i],i<e.length-1&&("function"==typeof r[i]?t+=r[i]():t+=r[i]);return t}Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.html=r,t.css=o;var a=n(3)},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t){var n=(0,a.getStorage)(c);if(n.size===u){var r=n.keys();n.delete(r.next().value)}n.set(e,t)}function i(e){for(var t=(0,a.getStorage)(c),n=t.get(e),i=arguments.length,u=Array(i>1?i-1:0),l=1;l<i;l++)u[l-1]=arguments[l];var s=u[0],f=e.bind.apply(e,[null].concat(r(u)));if(n)return n.get(s)?n.get(s):(n.set(s,f),f);var d=new Map;return d.set(s,f),o(e,d),f}Object.defineProperty(t,"__esModule",{value:!0}),t.bind=i;var a=n(0),c="BOUNDS",u=100;(0,a.addStorage)(c,new Map)},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function c(e){var t={},n=!0,r=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var c=i.value;t[c.name]=c.value}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}return t}Object.defineProperty(t,"__esModule",{value:!0});var u="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},l=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},s=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}(),f=n(2),d=n(9),p=n(0),m=n(4),h=function(e){var t=e.getPrototypeOf||function(e){return e.__proto__},n=e.setPrototypeOf||function(e,t){return e.__proto__=t,e},r="object"===("undefined"==typeof Reflect?"undefined":u(Reflect))?Reflect.construct:function(e,t,r){var o,i=[null];return i.push.apply(i,t),o=e.bind.apply(e,i),n(new o,r.prototype)};return function(e){var o=t(e);return n(e,n(function(){return r(o,arguments,t(this).constructor)},o))}}(Object),y=(0,p.getStorage)(p.storageKeys.PROPS),b=h(function(e){function t(){var e,n,r,a;o(this,t);for(var c=arguments.length,u=Array(c),l=0;l<c;l++)u[l]=arguments[l];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),r.__defaultProps={},r.subscriptions=[],r.state={},r.mounted=!1,a=n,i(r,a)}return a(t,e),s(t,[{key:"beforeRender",value:function(){}},{key:"render",value:function(){return""}},{key:"afterRender",value:function(){}},{key:"subscribeToStore",value:function(){var e=this,t=!0,n=!1,r=void 0;try{for(var o,i=this.keys[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;!function(t){e.subscriptions.push((0,f.subscribe)(t,function(n){e.state[t]=n,d.render.call(e)})),e.state[t]=(0,f.getState)(t)}(a)}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}}},{key:"connectedCallback",value:function(){this.subscribeToStore(),d.render.call(this),this.connected()}},{key:"connected",value:function(){}},{key:"disconnectedCallback",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,o=this.subscriptions[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){r.value.unsubscribe()}}catch(e){t=!0,n=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw n}}(0,m.clearPropsStorage)(),(0,m.clearEventsStorage)(),this.disconnected()}},{key:"disconnected",value:function(){}},{key:"adoptedCallback",value:function(){this.subscribeToStore(),d.render.call(this),this.adopted()}},{key:"adopted",value:function(){}},{key:"attributeChangedCallback",value:function(e,t,n){this.mounted&&t!=n&&(this.propsChanged(l({},this.props,r({},e,n))),d.render.call(this))}},{key:"propsChanged",value:function(e){}},{key:"name",get:function(){return Object.getPrototypeOf(this).constructor.name}},{key:"isShadow",get:function(){return!0}},{key:"props",get:function(){return l({},this.__defaultProps,c(this.attributes),y.get(this)||{})},set:function(e){this.__defaultProps=e}},{key:"keys",get:function(){return[]}},{key:"styles",get:function(){return""}}],[{key:"observedAttributes",get:function(){return this.observableProps.map(function(e){for(var t="",n=0;n<e.length;n++)e[n]===e[n].toUpperCase()?t+="-"+e[n].toLowerCase():t+=e[n];return t})}},{key:"observableProps",get:function(){return[]}}]),t}(HTMLElement));t.default=b},function(e,t,n){"use strict";function r(e,t){var n=e.cloneNode(!1),r=t.cloneNode(!1);return w.get(t)?(0,v.default)(w.get(e),w.get(t))&&n.isEqualNode(r):n.isEqualNode(r)}function o(e,t){return!1===e.isEqualNode(t)}function i(e,t){if(e.length>t.length)for(var n=0;n<e.length;n++){if(e[n]&&!t[n])return[e[n]].concat(i(Array.from(e).slice(n+1),Array.from(t).slice(n)));if(!r(e[n],t[n])){var o=i(Array.from(e).slice(n+1),Array.from(t).slice(n));if(0===o.length)return[e[n]]}}return[]}function a(e,t){if(e.length>t.length)return t.length;for(var n=0,o=0;o<e.length;o++){var i=e[o].cloneNode(!1),a=t[o].cloneNode(!1);r(e[o],t[o])||s(i)||s(a)||n++}return n}function c(e,t,n){for(var r=document.createDocumentFragment(),o=t.length;o<n.length;o++)r.appendChild(n[o]);e.appendChild(r)}function u(e,t){var n=t.attributes||[],r=e.attributes||[];if(r.length>n.length)for(var o=0;o<r.length;o++){var i=r[o];t.hasAttribute(i.nodeName)||e.removeAttribute(i.nodeName)}for(var a=0;a<n.length;a++){var c=n[a];e.setAttribute(c.nodeName,c.nodeValue)}if(w.get(t)){var u=w.get(e),l=w.get(t);w.set(e,l),(0,v.default)(u,l)||(0,y.isCustomComponent)(e)&&h.call(e)}}function l(e,t){if((0,y.isCustomComponent)(e))return u(e,t);r(e,t)||u(e,t),p(e,t)}function s(e){return e.nodeType===Node.TEXT_NODE&&(!e.childNodes.length&&(e.innerText?!1===Boolean(e.innerText.trim()):e.innerHTML?!1===Boolean(e.innerHTML.trim()):!e.textContent||!1===Boolean(e.textContent.trim())))}function f(e){return!!e&&((e.nodeType===Node.ELEMENT_NODE||e.nodeType===Node.TEXT_NODE)&&"STYLE"!==e.nodeName&&!s(e))}function d(e,t,n,r){var o=i(n,r);return 0===r.length?e.parentNode.replaceChild(t,e):1===o.length?(o[0].parentNode.removeChild(o[0]),p(e,t)):a(n,r)>0?e.parentNode.replaceChild(t,e):c(e,n,r)}function p(e,t){var n=Array.from(e.childNodes).filter(f),r=Array.from(t.childNodes).filter(f);if(n.length!==r.length)return d(e,t,n,r);if(0===n.length&&0===r.length&&o(e,t))return e.parentNode.replaceChild(t,e);for(var i=0;i<n.length;i++)l(n[i],r[i])}function m(e){var t=document.createElement("template");return t.innerHTML=e,t}function h(){performance.mark("muskot start rendering"),this.beforeRender(),this.isShadow&&!this.shadowRoot&&(performance.mark("muskot attaching root"),this.attachShadow({mode:"open"}),performance.mark("muskot root attached"),performance.measure("muskot attach root","muskot attaching root","muskot root attached")),performance.mark("muskot create render DOM");var e=this.render();performance.mark("muskot render DOM created"),performance.measure("muskot component render result","muskot create render DOM","muskot render DOM created");var t=this.isShadow?this.shadowRoot:this;performance.mark("muskot create fragment");var n="string"==typeof e?m(e):e;if(performance.mark("muskot fragment created"),performance.measure("muskot fragment creation","muskot create fragment","muskot fragment created"),this.mounted){performance.mark("muskot insert styles before content on update");var r=document.createElement("style");r.innerHTML=this.styles,n.content.insertBefore(r,n.content.firstChild),performance.mark("muskot styles inserted on update"),performance.measure("muskot add styles by insertBefore","muskot insert styles before content on update","muskot styles inserted on update"),performance.mark("muskot update children"),p(t,n.content),performance.mark("muskot children updated"),performance.measure("muskot update component's children","muskot update children","muskot children updated")}else performance.mark("muskot insert style into component"),t.innerHTML="<style>"+this.styles+"</style>",performance.mark("muskot style inserted"),performance.measure("muskot style creation & insert by innerHTML","muskot insert style into component","muskot style inserted"),performance.mark("muskot append child with content"),t.appendChild(n.content),performance.mark("muskot content appended"),performance.measure("muskot append content on initial render","muskot append child with content","muskot content appended"),this.mounted=!0;performance.mark("muskot finish rendering"),performance.measure("muskot full render","muskot start rendering","muskot finish rendering"),this.afterRender()}Object.defineProperty(t,"__esModule",{value:!0}),t.render=h;var y=n(1),b=n(0),g=n(10),v=function(e){return e&&e.__esModule?e:{default:e}}(g),w=(0,b.getStorage)(b.storageKeys.PROPS)},function(e,t,n){"use strict";function r(e,t){return e===t?0!==e||0!==t||1/e==1/t:e!==e&&t!==t}function o(e,t){if(r(e,t))return!0;if("object"!==(void 0===e?"undefined":i(e))||null===e||"object"!==(void 0===t?"undefined":i(t))||null===t)return!1;var n=Object.keys(e),o=Object.keys(t);if(n.length!==o.length)return!1;for(var c=0;c<n.length;c++)if(!a.call(t,n[c])||!r(e[n[c]],t[n[c]]))return!1;return!0}Object.defineProperty(t,"__esModule",{value:!0});var i="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},a=Object.prototype.hasOwnProperty;t.default=o},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})}),(0,r.changeWebComponentsReadyCheck)(function(){return"customElements"in window?Promise.resolve():new Promise<null>function(e){n(12).then(function(){window.addEventListener("WebComponentsReady",e)})}})},function(e,t){(function(){"use strict";function e(e){var t=E.has(e);return e=/^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(e),!t&&e}function t(e){var t=e.isConnected;if(void 0!==t)return t;for(;e&&!(e.__CE_isImportDocument||e instanceof Document);)e=e.parentNode||(window.ShadowRoot&&e instanceof ShadowRoot?e.host:void 0);return!(!e||!(e.__CE_isImportDocument||e instanceof Document))}function n(e,t){for(;t&&t!==e&&!t.nextSibling;)t=t.parentNode;return t&&t!==e?t.nextSibling:null}function r(e,t,o){o=o||new Set;for(var i=e;i;){if(i.nodeType===Node.ELEMENT_NODE){var a=i;t(a);var c=a.localName;if("link"===c&&"import"===a.getAttribute("rel")){if((i=a.import)instanceof Node&&!o.has(i))for(o.add(i),i=i.firstChild;i;i=i.nextSibling)r(i,t,o);i=n(e,a);continue}if("template"===c){i=n(e,a);continue}if(a=a.__CE_shadowRoot)for(a=a.firstChild;a;a=a.nextSibling)r(a,t,o)}i=i.firstChild?i.firstChild:n(e,i)}}function o(e,t,n){e[t]=n}function i(){this.a=new Map,this.s=new Map,this.f=[],this.b=!1}function a(e,t,n){e.a.set(t,n),e.s.set(n.constructor,n)}function c(e,t){e.b=!0,e.f.push(t)}function u(e,t){e.b&&r(t,function(t){return l(e,t)})}function l(e,t){if(e.b&&!t.__CE_patched){t.__CE_patched=!0;for(var n=0;n<e.f.length;n++)e.f[n](t)}}function s(e,t){var n=[];for(r(t,function(e){return n.push(e)}),t=0;t<n.length;t++){var o=n[t];1===o.__CE_state?e.connectedCallback(o):p(e,o)}}function f(e,t){var n=[];for(r(t,function(e){return n.push(e)}),t=0;t<n.length;t++){var o=n[t];1===o.__CE_state&&e.disconnectedCallback(o)}}function d(e,t,n){n=n||{};var o=n.w||new Set,i=n.i||function(t){return p(e,t)},a=[];if(r(t,function(t){if("link"===t.localName&&"import"===t.getAttribute("rel")){var n=t.import;n instanceof Node&&(n.__CE_isImportDocument=!0,n.__CE_hasRegistry=!0),n&&"complete"===n.readyState?n.__CE_documentLoadHandled=!0:t.addEventListener("load",function(){var n=t.import;if(!n.__CE_documentLoadHandled){n.__CE_documentLoadHandled=!0;var r=new Set(o);r.delete(n),d(e,n,{w:r,i:i})}})}else a.push(t)},o),e.b)for(t=0;t<a.length;t++)l(e,a[t]);for(t=0;t<a.length;t++)i(a[t])}function p(e,n){if(void 0===n.__CE_state){var r=n.ownerDocument;if((r.defaultView||r.__CE_isImportDocument&&r.__CE_hasRegistry)&&(r=e.a.get(n.localName))){r.constructionStack.push(n);var o=r.constructor;try{try{if(new o!==n)throw Error("The custom element constructor did not produce the element being upgraded.")}finally{r.constructionStack.pop()}}catch(e){throw n.__CE_state=2,e}if(n.__CE_state=1,n.__CE_definition=r,r.attributeChangedCallback)for(r=r.observedAttributes,o=0;o<r.length;o++){var i=r[o],a=n.getAttribute(i);null!==a&&e.attributeChangedCallback(n,i,null,a,null)}t(n)&&e.connectedCallback(n)}}}function m(e,t){this.c=e,this.a=t,this.b=void 0,d(this.c,this.a),"loading"===this.a.readyState&&(this.b=new MutationObserver(this.f.bind(this)),this.b.observe(this.a,{childList:!0,subtree:!0}))}function h(e){e.b&&e.b.disconnect()}function y(){var e=this;this.b=this.a=void 0,this.f=new Promise(function(t){e.b=t,e.a&&t(e.a)})}function b(e){if(e.a)throw Error("Already resolved.");e.a=void 0,e.b&&e.b(void 0)}function g(e){this.j=!1,this.c=e,this.o=new Map,this.l=function(e){return e()},this.g=!1,this.m=[],this.u=new m(e,document)}function v(e){if(!1!==e.g){e.g=!1;for(var t=e.m,n=[],r=new Map,o=0;o<t.length;o++)r.set(t[o].localName,[]);for(d(e.c,document,{i:function(t){if(void 0===t.__CE_state){var o=t.localName,i=r.get(o);i?i.push(t):e.c.a.get(o)&&n.push(t)}}}),o=0;o<n.length;o++)p(e.c,n[o]);for(;0<t.length;){for(var i=t.shift(),o=i.localName,i=r.get(i.localName),a=0;a<i.length;a++)p(e.c,i[a]);(o=e.o.get(o))&&b(o)}}}function w(e,n,r){function o(n){return function(r){for(var o=[],i=0;i<arguments.length;++i)o[i-0]=arguments[i];for(var i=[],a=[],c=0;c<o.length;c++){var u=o[c];if(u instanceof Element&&t(u)&&a.push(u),u instanceof DocumentFragment)for(u=u.firstChild;u;u=u.nextSibling)i.push(u);else i.push(u)}for(n.apply(this,o),o=0;o<a.length;o++)f(e,a[o]);if(t(this))for(o=0;o<i.length;o++)(a=i[o])instanceof Element&&s(e,a)}}r.h&&(n.prepend=o(r.h)),r.append&&(n.append=o(r.append))}function _(e){function n(n){return function(r){for(var o=[],i=0;i<arguments.length;++i)o[i-0]=arguments[i];for(var i=[],a=[],c=0;c<o.length;c++){var u=o[c];if(u instanceof Element&&t(u)&&a.push(u),u instanceof DocumentFragment)for(u=u.firstChild;u;u=u.nextSibling)i.push(u);else i.push(u)}for(n.apply(this,o),o=0;o<a.length;o++)f(e,a[o]);if(t(this))for(o=0;o<i.length;o++)(a=i[o])instanceof Element&&s(e,a)}}var r=Element.prototype;Y&&(r.before=n(Y)),Y&&(r.after=n($)),J&&o(r,"replaceWith",function(n){for(var r=[],o=0;o<arguments.length;++o)r[o-0]=arguments[o];for(var o=[],i=[],a=0;a<r.length;a++){var c=r[a];if(c instanceof Element&&t(c)&&i.push(c),c instanceof DocumentFragment)for(c=c.firstChild;c;c=c.nextSibling)o.push(c);else o.push(c)}for(a=t(this),J.apply(this,r),r=0;r<i.length;r++)f(e,i[r]);if(a)for(f(e,this),r=0;r<o.length;r++)(i=o[r])instanceof Element&&s(e,i)}),Q&&o(r,"remove",function(){var n=t(this);Q.call(this),n&&f(e,this)})}var C=new function(){},E=new Set("annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" "));i.prototype.connectedCallback=function(e){var t=e.__CE_definition;t.connectedCallback&&t.connectedCallback.call(e)},i.prototype.disconnectedCallback=function(e){var t=e.__CE_definition;t.disconnectedCallback&&t.disconnectedCallback.call(e)},i.prototype.attributeChangedCallback=function(e,t,n,r,o){var i=e.__CE_definition;i.attributeChangedCallback&&-1<i.observedAttributes.indexOf(t)&&i.attributeChangedCallback.call(e,t,n,r,o)},m.prototype.f=function(e){var t=this.a.readyState;for("interactive"!==t&&"complete"!==t||h(this),t=0;t<e.length;t++)for(var n=e[t].addedNodes,r=0;r<n.length;r++)d(this.c,n[r])},g.prototype.define=function(t,n){var r=this;if(!(n instanceof Function))throw new TypeError("Custom element constructors must be functions.");if(!e(t))throw new SyntaxError("The element name '"+t+"' is not valid.");if(this.c.a.get(t))throw Error("A custom element with name '"+t+"' has already been defined.");if(this.j)throw Error("A custom element is already being defined.");this.j=!0;var o,i,c,u,l;try{var s=function(e){var t=f[e];if(void 0!==t&&!(t instanceof Function))throw Error("The '"+e+"' callback must be a function.");return t},f=n.prototype;if(!(f instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");o=s("connectedCallback"),i=s("disconnectedCallback"),c=s("adoptedCallback"),u=s("attributeChangedCallback"),l=n.observedAttributes||[]}catch(e){return}finally{this.j=!1}n={localName:t,constructor:n,connectedCallback:o,disconnectedCallback:i,adoptedCallback:c,attributeChangedCallback:u,observedAttributes:l,constructionStack:[]},a(this.c,t,n),this.m.push(n),this.g||(this.g=!0,this.l(function(){return v(r)}))},g.prototype.i=function(e){d(this.c,e)},g.prototype.get=function(e){if(e=this.c.a.get(e))return e.constructor},g.prototype.whenDefined=function(t){if(!e(t))return Promise.reject(new SyntaxError("'"+t+"' is not a valid custom element name."));var n=this.o.get(t);return n?n.f:(n=new y,this.o.set(t,n),this.c.a.get(t)&&!this.m.some(function(e){return e.localName===t})&&b(n),n.f)},g.prototype.v=function(e){h(this.u);var t=this.l;this.l=function(n){return e(function(){return t(n)})}},window.CustomElementRegistry=g,g.prototype.define=g.prototype.define,g.prototype.upgrade=g.prototype.i,g.prototype.get=g.prototype.get,g.prototype.whenDefined=g.prototype.whenDefined,g.prototype.polyfillWrapFlushCallback=g.prototype.v;var k=window.Document.prototype.createElement,S=window.Document.prototype.createElementNS,N=window.Document.prototype.importNode,O=window.Document.prototype.prepend,j=window.Document.prototype.append,P=window.DocumentFragment.prototype.prepend,T=window.DocumentFragment.prototype.append,A=window.Node.prototype.cloneNode,M=window.Node.prototype.appendChild,R=window.Node.prototype.insertBefore,D=window.Node.prototype.removeChild,H=window.Node.prototype.replaceChild,L=Object.getOwnPropertyDescriptor(window.Node.prototype,"textContent"),x=window.Element.prototype.attachShadow,I=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),F=window.Element.prototype.getAttribute,V=window.Element.prototype.setAttribute,B=window.Element.prototype.removeAttribute,W=window.Element.prototype.getAttributeNS,K=window.Element.prototype.setAttributeNS,G=window.Element.prototype.removeAttributeNS,z=window.Element.prototype.insertAdjacentElement,U=window.Element.prototype.insertAdjacentHTML,q=window.Element.prototype.prepend,X=window.Element.prototype.append,Y=window.Element.prototype.before,$=window.Element.prototype.after,J=window.Element.prototype.replaceWith,Q=window.Element.prototype.remove,Z=window.HTMLElement,ee=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),te=window.HTMLElement.prototype.insertAdjacentElement,ne=window.HTMLElement.prototype.insertAdjacentHTML,re=window.customElements;if(!re||re.forcePolyfill||"function"!=typeof re.define||"function"!=typeof re.get){var oe=new i;!function(){var e=oe;window.HTMLElement=function(){function t(){var t=this.constructor,n=e.s.get(t);if(!n)throw Error("The custom element being constructed was not registered with `customElements`.");var r=n.constructionStack;if(!r.length)return r=k.call(document,n.localName),Object.setPrototypeOf(r,t.prototype),r.__CE_state=1,r.__CE_definition=n,l(e,r),r;var n=r.length-1,o=r[n];if(o===C)throw Error("The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.");return r[n]=C,Object.setPrototypeOf(o,t.prototype),l(e,o),o}return t.prototype=Z.prototype,Object.defineProperty(t.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:t}),t}()}(),function(){var e=oe;o(Document.prototype,"createElement",function(t){if(this.__CE_hasRegistry){var n=e.a.get(t);if(n)return new n.constructor}return t=k.call(this,t),l(e,t),t}),o(Document.prototype,"importNode",function(t,n){return t=N.call(this,t,n),this.__CE_hasRegistry?d(e,t):u(e,t),t}),o(Document.prototype,"createElementNS",function(t,n){if(this.__CE_hasRegistry&&(null===t||"http://www.w3.org/1999/xhtml"===t)){var r=e.a.get(n);if(r)return new r.constructor}return t=S.call(this,t,n),l(e,t),t}),w(e,Document.prototype,{h:O,append:j})}(),w(oe,DocumentFragment.prototype,{h:P,append:T}),function(){function e(e,r){Object.defineProperty(e,"textContent",{enumerable:r.enumerable,configurable:!0,get:r.get,set:function(e){if(this.nodeType===Node.TEXT_NODE)r.set.call(this,e);else{var o=void 0;if(this.firstChild){var i=this.childNodes,a=i.length;if(0<a&&t(this))for(var o=Array(a),c=0;c<a;c++)o[c]=i[c]}if(r.set.call(this,e),o)for(e=0;e<o.length;e++)f(n,o[e])}}})}var n=oe;o(Node.prototype,"insertBefore",function(e,r){if(e instanceof DocumentFragment){var o=Array.prototype.slice.apply(e.childNodes);if(e=R.call(this,e,r),t(this))for(r=0;r<o.length;r++)s(n,o[r]);return e}return o=t(e),r=R.call(this,e,r),o&&f(n,e),t(this)&&s(n,e),r}),o(Node.prototype,"appendChild",function(e){if(e instanceof DocumentFragment){var r=Array.prototype.slice.apply(e.childNodes);if(e=M.call(this,e),t(this))for(var o=0;o<r.length;o++)s(n,r[o]);return e}return r=t(e),o=M.call(this,e),r&&f(n,e),t(this)&&s(n,e),o}),o(Node.prototype,"cloneNode",function(e){return e=A.call(this,e),this.ownerDocument.__CE_hasRegistry?d(n,e):u(n,e),e}),o(Node.prototype,"removeChild",function(e){var r=t(e),o=D.call(this,e);return r&&f(n,e),o}),o(Node.prototype,"replaceChild",function(e,r){if(e instanceof DocumentFragment){var o=Array.prototype.slice.apply(e.childNodes);if(e=H.call(this,e,r),t(this))for(f(n,r),r=0;r<o.length;r++)s(n,o[r]);return e}var o=t(e),i=H.call(this,e,r),a=t(this);return a&&f(n,r),o&&f(n,e),a&&s(n,e),i}),L&&L.get?e(Node.prototype,L):c(n,function(t){e(t,{enumerable:!0,configurable:!0,get:function(){for(var e=[],t=0;t<this.childNodes.length;t++)e.push(this.childNodes[t].textContent);return e.join("")},set:function(e){for(;this.firstChild;)D.call(this,this.firstChild);M.call(this,document.createTextNode(e))}})})}(),function(){function e(e,n){Object.defineProperty(e,"innerHTML",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(e){var o=this,i=void 0;if(t(this)&&(i=[],r(this,function(e){e!==o&&i.push(e)})),n.set.call(this,e),i)for(var c=0;c<i.length;c++){var l=i[c];1===l.__CE_state&&a.disconnectedCallback(l)}return this.ownerDocument.__CE_hasRegistry?d(a,this):u(a,this),e}})}function n(e,n){o(e,"insertAdjacentElement",function(e,r){var o=t(r);return e=n.call(this,e,r),o&&f(a,r),t(e)&&s(a,r),e})}function i(e,t){function n(e,t){for(var n=[];e!==t;e=e.nextSibling)n.push(e);for(t=0;t<n.length;t++)d(a,n[t])}o(e,"insertAdjacentHTML",function(e,r){if("beforebegin"===(e=e.toLowerCase())){var o=this.previousSibling;t.call(this,e,r),n(o||this.parentNode.firstChild,this)}else if("afterbegin"===e)o=this.firstChild,t.call(this,e,r),n(this.firstChild,o);else if("beforeend"===e)o=this.lastChild,t.call(this,e,r),n(o||this.firstChild,null);else{if("afterend"!==e)throw new SyntaxError("The value provided ("+String(e)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");o=this.nextSibling,t.call(this,e,r),n(this.nextSibling,o)}})}var a=oe;x&&o(Element.prototype,"attachShadow",function(e){return this.__CE_shadowRoot=e=x.call(this,e)}),I&&I.get?e(Element.prototype,I):ee&&ee.get?e(HTMLElement.prototype,ee):c(a,function(t){e(t,{enumerable:!0,configurable:!0,get:function(){return A.call(this,!0).innerHTML},set:function(e){var t="template"===this.localName,n=t?this.content:this,r=S.call(document,this.namespaceURI,this.localName);for(r.innerHTML=e;0<n.childNodes.length;)D.call(n,n.childNodes[0]);for(e=t?r.content:r;0<e.childNodes.length;)M.call(n,e.childNodes[0])}})}),o(Element.prototype,"setAttribute",function(e,t){if(1!==this.__CE_state)return V.call(this,e,t);var n=F.call(this,e);V.call(this,e,t),t=F.call(this,e),a.attributeChangedCallback(this,e,n,t,null)}),o(Element.prototype,"setAttributeNS",function(e,t,n){if(1!==this.__CE_state)return K.call(this,e,t,n);var r=W.call(this,e,t);K.call(this,e,t,n),n=W.call(this,e,t),a.attributeChangedCallback(this,t,r,n,e)}),o(Element.prototype,"removeAttribute",function(e){if(1!==this.__CE_state)return B.call(this,e);var t=F.call(this,e);B.call(this,e),null!==t&&a.attributeChangedCallback(this,e,t,null,null)}),o(Element.prototype,"removeAttributeNS",function(e,t){if(1!==this.__CE_state)return G.call(this,e,t);var n=W.call(this,e,t);G.call(this,e,t);var r=W.call(this,e,t);n!==r&&a.attributeChangedCallback(this,t,n,r,e)}),te?n(HTMLElement.prototype,te):z?n(Element.prototype,z):console.warn("Custom Elements: `Element#insertAdjacentElement` was not patched."),ne?i(HTMLElement.prototype,ne):U?i(Element.prototype,U):console.warn("Custom Elements: `Element#insertAdjacentHTML` was not patched."),w(a,Element.prototype,{h:q,append:X}),_(a)}(),document.__CE_hasRegistry=!0;var ie=new g(oe);Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:ie})}}).call(self)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vcG9seWZpbGxlZC5qcyIsIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgYTQxNzhjNGFkOWMwNDk3NzZmNGEiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N0b3JhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3dlYi1jb21wb25lbnRzLmpzIiwid2VicGFjazovLy8uL3NyYy9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvaGFuZGxlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3V0aWxzLmpzIiwid2VicGFjazovLy8uL3NyYy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFnLmpzIiwid2VicGFjazovLy8uL3NyYy9iaW5kLmpzIiwid2VicGFjazovLy8uL3NyYy9Db21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JlbmRlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhbGxvdy1lcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvd2l0aC1wb2x5ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL2N1c3RvbS1lbGVtZW50cy5taW4uanMiXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIm1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJpbnN0YWxsZWRNb2R1bGVzIiwiaSIsImwiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJnZXQiLCJuIiwiX19lc01vZHVsZSIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsInZhbHVlIiwid3JpdGFibGUiLCJzZXRTdG9yYWdlRHJpdmVyIiwiZHJpdmVyIiwic3RvcmFnZSIsIm1pZ3JhdGUiLCJnZXRTdG9yYWdlIiwiZ2V0SXRlbSIsImFkZFN0b3JhZ2UiLCJzZXRJdGVtIiwicmVtb3ZlU3RvcmFnZSIsInJlbW92ZUl0ZW0iLCJfT2JqZWN0JGNyZWF0ZSIsInByb3BzTWFwIiwiTWFwIiwiZXZlbnRzTWFwIiwic3RvcmFnZUtleXMiLCJQUk9QUyIsIkVWRU5UUyIsIml0ZW1zIiwiY3JlYXRlIiwidGhpcyIsImRlZmF1bHRJbXBsZW1lbnRhdGlvbiIsInJlZ2lzdGVyQ29tcG9uZW50IiwiY29tcG9uZW50Iiwid2luZG93IiwiY3VzdG9tRWxlbWVudHMiLCJkZWZpbmUiLCJjdXJyZW50UmVhZHlDaGVjayIsInRoZW4iLCJpc0N1c3RvbUNvbXBvbmVudCIsIm5vZGUiLCJub2RlTmFtZSIsImluY2x1ZGVzIiwiY3VycmVudEltcGxlbWVudGF0aW9uIiwic2V0SW1wbGVtZW50YXRpb24iLCJpbXBsZW1lbnRhdGlvbiIsIlByb21pc2UiLCJyZXNvbHZlIiwiY29tcG9uZW50c1JlYWR5Iiwic2V0UmVhZHlDaGVjayIsInJlYWR5Q2hlY2siLCJkZWZhdWx0Iiwic3R1YkltcGxlbWVudGF0aW9uIiwicmVkdWNlcnMiLCJzdWJzY3JpcHRpb25zIiwiYWRkUmVkdWNlciIsInJlZHVjZXIiLCJyZW1vdmVSZWR1Y2VyIiwic3Vic2NyaWJlIiwiY2IiLCJfdGhpcyIsInB1c2giLCJ1bnN1YnNjcmliZSIsImZpbHRlciIsImVsIiwiZ2V0U3RhdGUiLCJuZXdTdG9yZSIsIl9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24iLCJfZGlkSXRlcmF0b3JFcnJvciIsIl9pdGVyYXRvckVycm9yIiwidW5kZWZpbmVkIiwiX3N0ZXAiLCJfaXRlcmF0b3IiLCJTeW1ib2wiLCJpdGVyYXRvciIsIm5leHQiLCJkb25lIiwic3Vic2NyaXB0aW9uIiwiZXJyIiwicmV0dXJuIiwic3RvcmUiLCJyZWdpc3RlclJlZHVjZXIiLCJzaG91bGRTZXRQcm9wVG9TdG9yYWdlIiwiX3R5cGVvZiIsIl93ZWJDb21wb25lbnRzIiwicGFyc2VBdHRyaWJ1dGUiLCJhdHRyaWJ1dGUiLCJhcmdzIiwibWF0Y2giLCJub2RlVmFsdWUiLCJpbmRleCIsIk51bWJlciIsIl91dGlscyIsInRhZ05hbWVUb1Byb3AiLCJjYWxsSGFuZGxlcnMiLCJlbGVtZW50IiwiYXR0cmlidXRlcyIsImxlbmd0aCIsImhhbmRsZXJzIiwiZm9yRWFjaCIsImhhbmRsZXIiLCJjaGlsZE5vZGVzIiwiYWRkVGVtcGxhdGVIYW5kbGVyIiwiY3VzdG9tSGFuZGxlcnMiLCJ1bnNoaWZ0IiwiYWNjZXNzSGFuZGxlciIsInVubG9hZEhhbmRsZXIiLCJzZXRDb3JlSGFuZGxlciIsImNvcmVIYW5kbGVycyIsIl9zbGljZWRUb0FycmF5Iiwic2xpY2VJdGVyYXRvciIsImFyciIsIl9hcnIiLCJfbiIsIl9kIiwiX2UiLCJfcyIsIl9pIiwiQXJyYXkiLCJpc0FycmF5IiwiVHlwZUVycm9yIiwiY29uc3RydWN0b3IiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImFyZ3VtZW50cyIsInNvdXJjZSIsIl9zdG9yYWdlIiwicHJvcHNTdG9yYWdlIiwiZXZlbnRzU3RvcmFnZSIsIkV2ZW50c1RhZ0hhbmRsZXIiLCJzdGFydHNXaXRoIiwibGlzdGVuZXIiLCJyZW1vdmVBdHRyaWJ1dGUiLCJldmVudE5hbWUiLCJ0b0xvd2VyQ2FzZSIsInNsaWNlIiwiYWRkRXZlbnRMaXN0ZW5lciIsImxpc3RlbmVycyIsInNldCIsIk1hcEhhbmRsZXIiLCJIVE1MVGVtcGxhdGVFbGVtZW50IiwiaGFzQXR0cmlidXRlIiwiU3RyaW5nIiwiZ2V0QXR0cmlidXRlIiwidHBsIiwiaW5uZXJIVE1MIiwiZnJhZ21lbnQiLCJkb2N1bWVudCIsImNyZWF0ZURvY3VtZW50RnJhZ21lbnQiLCJyZXBsYWNlIiwiYXJnIiwidHBsQ2FsbCIsImFwcGVuZENoaWxkIiwiY29udGVudCIsInRtcFRwbCIsImNyZWF0ZUVsZW1lbnQiLCJwYXJlbnROb2RlIiwicmVwbGFjZUNoaWxkIiwiUHJvcHNIYW5kbGVyIiwiX3BhcnNlQXR0cmlidXRlIiwiX3BhcnNlQXR0cmlidXRlMiIsInByb3BOYW1lIiwicHJvcHMiLCJldmVudHMiLCJtYXAiLCJjbGVhclByb3BzU3RvcmFnZSIsInNldFRpbWVvdXQiLCJrZXlzIiwiaXNDb25uZWN0ZWQiLCJkZWxldGUiLCJjbGVhckV2ZW50c1N0b3JhZ2UiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiIsIl9kaWRJdGVyYXRvckVycm9yMiIsIl9pdGVyYXRvckVycm9yMiIsIl9zdGVwMiIsIl9pdGVyYXRvcjIiLCJzcGxpdCIsInJlZHVjZSIsImFjYyIsInRvVXBwZXJDYXNlIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9zdG9yZSIsIl9oYW5kbGVycyIsIl90YWciLCJodG1sIiwiY3NzIiwiX2JpbmQiLCJiaW5kIiwiX0NvbXBvbmVudCIsInN0cmluZ3MiLCJfbGVuIiwiX2tleSIsInRlbXBsYXRlIiwicmVzdWx0IiwiX2xlbjIiLCJfa2V5MiIsIl90b0NvbnN1bWFibGVBcnJheSIsImFycjIiLCJmcm9tIiwiYXBwZW5kVG9TdG9yYWdlIiwiZm4iLCJLRVkiLCJzaXplIiwiTUFYX1NUT1JBR0VfU0laRSIsImJvdW5kIiwiZmlyc3RBcmciLCJib3VuZEZuIiwiYXBwbHkiLCJjb25jYXQiLCJmbk1hcCIsIl9jbGFzc0NhbGxDaGVjayIsImluc3RhbmNlIiwiQ29uc3RydWN0b3IiLCJfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsInNlbGYiLCJSZWZlcmVuY2VFcnJvciIsIl9pbmhlcml0cyIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwicGFyc2VBdHRyaWJ1dGVzIiwiX2NyZWF0ZUNsYXNzIiwiZGVmaW5lUHJvcGVydGllcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfcmVuZGVyIiwiX2ZpeEJhYmVsRXh0ZW5kIiwiTyIsImdQTyIsImdldFByb3RvdHlwZU9mIiwic1BPIiwiY29uc3RydWN0IiwiUmVmbGVjdCIsIlBhcmVudCIsIkNsYXNzIiwiYSIsIkNvbXBvbmVudCIsIl9IVE1MRWxlbWVudCIsIl9yZWYiLCJfdGVtcCIsIl9yZXQiLCJfX2RlZmF1bHRQcm9wcyIsInN0YXRlIiwibW91bnRlZCIsIl90aGlzMiIsInJlbmRlciIsInN1YnNjcmliZVRvU3RvcmUiLCJjb25uZWN0ZWQiLCJfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyIsIl9kaWRJdGVyYXRvckVycm9yMyIsIl9pdGVyYXRvckVycm9yMyIsIl9zdGVwMyIsIl9pdGVyYXRvcjMiLCJkaXNjb25uZWN0ZWQiLCJhZG9wdGVkIiwiYXR0cmlidXRlTmFtZSIsIm9sZFZhbHVlIiwibmV3VmFsdWUiLCJwcm9wc0NoYW5nZWQiLCJuZXdQcm9wcyIsIm9ic2VydmFibGVQcm9wcyIsInByb3AiLCJyZXMiLCJIVE1MRWxlbWVudCIsIm5vZGVFcXVhbHMiLCJlbGVtZW50Tm9kZSIsImZyYWdtZW50Tm9kZSIsImVsQ2xvbmUiLCJjbG9uZU5vZGUiLCJmckNsb25lIiwiX3NoYWxsb3dFcXVhbDIiLCJpc0VxdWFsTm9kZSIsImNvbnRlbnREaWZmZXIiLCJlbGVtZW50c0RlbGV0ZWQiLCJlbGVtZW50Tm9kZXMiLCJmcmFnbWVudE5vZGVzIiwiZGVsZXRlZCIsImNoaWxkcmVuQ2hhbmdlZENvdW50IiwiY2hhbmdlZCIsImlzRW1wdHlOb2RlIiwiYXBwZW5kQ2hpbGRyZW4iLCJlbGVtZW50Q2hpbGRyZW4iLCJmcmFnbWVudENoaWxkcmVuIiwidXBkYXRlQXR0cmlidXRlcyIsImVsZW1lbnRBdHRyaWJ1dGVzIiwic2V0QXR0cmlidXRlIiwiZWxQcm9wcyIsImZyUHJvcHMiLCJ1cGRhdGVFbGVtZW50IiwidXBkYXRlQ2hpbGRyZW4iLCJub2RlVHlwZSIsIk5vZGUiLCJURVhUX05PREUiLCJpbm5lclRleHQiLCJCb29sZWFuIiwidHJpbSIsInRleHRDb250ZW50Iiwibm9kZUZpbHRlciIsIkVMRU1FTlRfTk9ERSIsImhhbmRsZUNoaWxkcmVuQ291bnRDaGFuZ2VkIiwicmVtb3ZlQ2hpbGQiLCJjcmVhdGVGcmFnbWVudEZyb21TdHIiLCJwZXJmb3JtYW5jZSIsIm1hcmsiLCJiZWZvcmVSZW5kZXIiLCJpc1NoYWRvdyIsInNoYWRvd1Jvb3QiLCJhdHRhY2hTaGFkb3ciLCJtb2RlIiwibWVhc3VyZSIsInJlbmRlclJlcyIsInJvb3QiLCJzdHlsZSIsInN0eWxlcyIsImluc2VydEJlZm9yZSIsImZpcnN0Q2hpbGQiLCJhZnRlclJlbmRlciIsIl9zaGFsbG93RXF1YWwiLCJpcyIsIngiLCJ5Iiwic2hhbGxvd0VxdWFsIiwib2JqQSIsIm9iakIiLCJrZXlzQSIsImtleXNCIiwiX2luZGV4IiwiY2hhbmdlV2ViQ29tcG9uZW50c1JlYWR5Q2hlY2siLCJyZXF1aXJlIiwiYiIsImFhIiwiaGFzIiwidGVzdCIsIl9fQ0VfaXNJbXBvcnREb2N1bWVudCIsIkRvY3VtZW50IiwiU2hhZG93Um9vdCIsImhvc3QiLCJuZXh0U2libGluZyIsInQiLCJTZXQiLCJlIiwiZiIsImxvY2FsTmFtZSIsImltcG9ydCIsImFkZCIsIl9fQ0Vfc2hhZG93Um9vdCIsInUiLCJ2IiwiYmEiLCJ3IiwiX19DRV9wYXRjaGVkIiwieiIsIl9fQ0Vfc3RhdGUiLCJjb25uZWN0ZWRDYWxsYmFjayIsIkEiLCJCIiwiZGlzY29ubmVjdGVkQ2FsbGJhY2siLCJDIiwiX19DRV9oYXNSZWdpc3RyeSIsInJlYWR5U3RhdGUiLCJfX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQiLCJvd25lckRvY3VtZW50IiwiZGVmYXVsdFZpZXciLCJjb25zdHJ1Y3Rpb25TdGFjayIsIkVycm9yIiwicG9wIiwiciIsIl9fQ0VfZGVmaW5pdGlvbiIsImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayIsIm9ic2VydmVkQXR0cmlidXRlcyIsIkQiLCJNdXRhdGlvbk9ic2VydmVyIiwib2JzZXJ2ZSIsImNoaWxkTGlzdCIsInN1YnRyZWUiLCJFIiwiZGlzY29ubmVjdCIsImNhIiwiRiIsIkciLCJqIiwiZyIsImRhIiwic2hpZnQiLCJZIiwicSIsIkVsZW1lbnQiLCJEb2N1bWVudEZyYWdtZW50IiwiaCIsInByZXBlbmQiLCJhcHBlbmQiLCJ5YSIsImsiLCJWIiwiYmVmb3JlIiwiYWZ0ZXIiLCJwYSIsInFhIiwicmEiLCJpbmRleE9mIiwiYWRkZWROb2RlcyIsIkZ1bmN0aW9uIiwiU3ludGF4RXJyb3IiLCJhZG9wdGVkQ2FsbGJhY2siLCJ3aGVuRGVmaW5lZCIsInJlamVjdCIsInNvbWUiLCJDdXN0b21FbGVtZW50UmVnaXN0cnkiLCJ1cGdyYWRlIiwicG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayIsIkgiLCJJIiwiY3JlYXRlRWxlbWVudE5TIiwiZWEiLCJpbXBvcnROb2RlIiwiZmEiLCJnYSIsImhhIiwiaWEiLCJKIiwiSyIsIkwiLCJNIiwiTiIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsImdldEF0dHJpYnV0ZU5TIiwiamEiLCJzZXRBdHRyaWJ1dGVOUyIsImthIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJsYSIsImluc2VydEFkamFjZW50RWxlbWVudCIsIm1hIiwiaW5zZXJ0QWRqYWNlbnRIVE1MIiwibmEiLCJvYSIsInJlcGxhY2VXaXRoIiwicmVtb3ZlIiwic2EiLCJXIiwidGEiLCJ1YSIsIloiLCJmb3JjZVBvbHlmaWxsIiwiWCIsImpvaW4iLCJjcmVhdGVUZXh0Tm9kZSIsInByZXZpb3VzU2libGluZyIsImxhc3RDaGlsZCIsIm5hbWVzcGFjZVVSSSIsImNvbnNvbGUiLCJ3YXJuIl0sIm1hcHBpbmdzIjoiQUFBQUEsT0FBT0MsUUFDRSxTQUFVQyxHQ0duQixRQUFBQyxHQUFBQyxHQUdBLEdBQUFDLEVBQUFELEdBQ0EsTUFBQUMsR0FBQUQsR0FBQUgsT0FHQSxJQUFBRCxHQUFBSyxFQUFBRCxJQUNBRSxFQUFBRixFQUNBRyxHQUFBLEVBQ0FOLFdBVUEsT0FOQUMsR0FBQUUsR0FBQUksS0FBQVIsRUFBQUMsUUFBQUQsSUFBQUMsUUFBQUUsR0FHQUgsRUFBQU8s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LFdBQXVCcVksRUFBQW9ELEVBQUFsRCxPQUFBbUQsSUFBaUJsRCxFQUFBOUQsTUFTdEd4TCxTQUFBcU4sa0JBQUEsQ0FBNkIsSUFBQXRVLElBQUEsR0FBQTJWLEdBQUF1RSxHQUE0QjVjLFFBQUFDLGVBQUF3QyxPQUFBLGtCQUErQ3ZDLGNBQUEsRUFBQUMsWUFBQSxFQUFBYSxNQUFBMEIsUUFDblNqRCxLQUFBcU8iLCJmaWxlIjoicG9seWZpbGxlZC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID1cbi8qKioqKiovIChmdW5jdGlvbihtb2R1bGVzKSB7IC8vIHdlYnBhY2tCb290c3RyYXBcbi8qKioqKiovIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuLyoqKioqKi8gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbi8qKioqKiovIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuLyoqKioqKi9cbi8qKioqKiovIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbi8qKioqKiovIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuLyoqKioqKi8gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4vKioqKioqLyBcdFx0fVxuLyoqKioqKi8gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4vKioqKioqLyBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuLyoqKioqKi8gXHRcdFx0aTogbW9kdWxlSWQsXG4vKioqKioqLyBcdFx0XHRsOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdGV4cG9ydHM6IHt9XG4vKioqKioqLyBcdFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4vKioqKioqLyBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbi8qKioqKiovIFx0XHRtb2R1bGUubCA9IHRydWU7XG4vKioqKioqL1xuLyoqKioqKi8gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4vKioqKioqLyBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuLyoqKioqKi8gXHR9XG4vKioqKioqL1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4vKioqKioqLyBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuLyoqKioqKi8gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHtcbi8qKioqKiovIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbi8qKioqKiovIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbi8qKioqKiovIFx0XHRcdFx0Z2V0OiBnZXR0ZXJcbi8qKioqKiovIFx0XHRcdH0pO1xuLyoqKioqKi8gXHRcdH1cbi8qKioqKiovIFx0fTtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4vKioqKioqLyBcdF9fd2VicGFja19yZXF1aXJlX18ubiA9IGZ1bmN0aW9uKG1vZHVsZSkge1xuLyoqKioqKi8gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuLyoqKioqKi8gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbi8qKioqKiovIFx0XHRcdGZ1bmN0aW9uIGdldE1vZHVsZUV4cG9ydHMoKSB7IHJldHVybiBtb2R1bGU7IH07XG4vKioqKioqLyBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuLyoqKioqKi8gXHRcdHJldHVybiBnZXR0ZXI7XG4vKioqKioqLyBcdH07XG4vKioqKioqL1xuLyoqKioqKi8gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vID0gZnVuY3Rpb24ob2JqZWN0LCBwcm9wZXJ0eSkgeyByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwgcHJvcGVydHkpOyB9O1xuLyoqKioqKi9cbi8qKioqKiovIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbi8qKioqKiovIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5wID0gXCJcIjtcbi8qKioqKiovXG4vKioqKioqLyBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuLyoqKioqKi8gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMSk7XG4vKioqKioqLyB9KVxuLyoqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8qKioqKiovIChbXG4vKiAwICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9PYmplY3QkY3JlYXRlO1xuXG5leHBvcnRzLnNldFN0b3JhZ2VEcml2ZXIgPSBzZXRTdG9yYWdlRHJpdmVyO1xuZXhwb3J0cy5nZXRTdG9yYWdlID0gZ2V0U3RvcmFnZTtcbmV4cG9ydHMuYWRkU3RvcmFnZSA9IGFkZFN0b3JhZ2U7XG5leHBvcnRzLnJlbW92ZVN0b3JhZ2UgPSByZW1vdmVTdG9yYWdlO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG52YXIgcHJvcHNNYXAgPSBuZXcgTWFwKCk7XG5cbnZhciBldmVudHNNYXAgPSBuZXcgTWFwKCk7XG5cbnZhciBzdG9yYWdlS2V5cyA9IGV4cG9ydHMuc3RvcmFnZUtleXMgPSB7XG4gICAgUFJPUFM6IFwicHJvcHNcIixcbiAgICBFVkVOVFM6IFwiZXZlbnRzXCJcbn07XG5cbnZhciBkcml2ZXIgPSB7XG4gICAgaXRlbXM6IE9iamVjdC5jcmVhdGUoKF9PYmplY3QkY3JlYXRlID0ge30sIF9kZWZpbmVQcm9wZXJ0eShfT2JqZWN0JGNyZWF0ZSwgc3RvcmFnZUtleXMuUFJPUFMsIHByb3BzTWFwKSwgX2RlZmluZVByb3BlcnR5KF9PYmplY3QkY3JlYXRlLCBzdG9yYWdlS2V5cy5FVkVOVFMsIGV2ZW50c01hcCksIF9PYmplY3QkY3JlYXRlKSksXG4gICAgc2V0SXRlbTogZnVuY3Rpb24gc2V0SXRlbShrZXksIHZhbHVlKSB7XG4gICAgICAgIHRoaXMuaXRlbXNba2V5XSA9IHZhbHVlO1xuICAgIH0sXG4gICAgZ2V0SXRlbTogZnVuY3Rpb24gZ2V0SXRlbShrZXkpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXNba2V5XTtcbiAgICB9LFxuICAgIHJlbW92ZUl0ZW06IGZ1bmN0aW9uIHJlbW92ZUl0ZW0oa2V5KSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLml0ZW1zW2tleV07XG4gICAgfSxcbiAgICBtaWdyYXRlOiBmdW5jdGlvbiBtaWdyYXRlKGRyaXZlcikge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5pdGVtcykge1xuICAgICAgICAgICAgZHJpdmVyLnNldEl0ZW0oa2V5LCB0aGlzLml0ZW1zW2tleV0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkcml2ZXI7XG4gICAgfVxufTtcblxudmFyIHN0b3JhZ2UgPSBleHBvcnRzLnN0b3JhZ2UgPSB7XG4gICAgZHJpdmVyOiBkcml2ZXJcbn07XG5cbmZ1bmN0aW9uIHNldFN0b3JhZ2VEcml2ZXIoZHJpdmVyKSB7XG4gICAgc3RvcmFnZS5kcml2ZXIgPSBzdG9yYWdlLmRyaXZlci5taWdyYXRlKGRyaXZlcik7XG59XG5cbmZ1bmN0aW9uIGdldFN0b3JhZ2Uoa2V5KSB7XG4gICAgcmV0dXJuIHN0b3JhZ2UuZHJpdmVyLmdldEl0ZW0oa2V5KTtcbn1cblxuZnVuY3Rpb24gYWRkU3RvcmFnZShrZXksIHZhbHVlKSB7XG4gICAgc3RvcmFnZS5kcml2ZXIuc2V0SXRlbShrZXksIHZhbHVlKTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3RvcmFnZShrZXkpIHtcbiAgICBzdG9yYWdlLmRyaXZlci5yZW1vdmVJdGVtKGtleSk7XG59XG5cbi8qKiovIH0pLFxuLyogMSAqL1xuLyoqKi8gKGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cInVzZSBzdHJpY3RcIjtcblxuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgICB2YWx1ZTogdHJ1ZVxufSk7XG5cblxudmFyIGRlZmF1bHRJbXBsZW1lbnRhdGlvbiA9IHtcbiAgICByZWdpc3RlckNvbXBvbmVudDogZnVuY3Rpb24gcmVnaXN0ZXJDb21wb25lbnQobmFtZSwgY29tcG9uZW50KSB7XG4gICAgICAgIGlmICgnY3VzdG9tRWxlbWVudHMnIGluIHdpbmRvdykge1xuICAgICAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKG5hbWUsIGNvbXBvbmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50UmVhZHlDaGVjaygpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF9yZWdpc3RlckNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGlzQ3VzdG9tQ29tcG9uZW50OiBmdW5jdGlvbiBpc0N1c3RvbUNvbXBvbmVudChub2RlKSB7XG4gICAgICAgIHJldHVybiBub2RlLm5vZGVOYW1lLmluY2x1ZGVzKFwiLVwiKTtcbiAgICB9XG59O1xuXG52YXIgY3VycmVudEltcGxlbWVudGF0aW9uID0gZGVmYXVsdEltcGxlbWVudGF0aW9uO1xuXG52YXIgX3JlZ2lzdGVyQ29tcG9uZW50ID0gZnVuY3Rpb24gX3JlZ2lzdGVyQ29tcG9uZW50KG5hbWUsIGNvbXBvbmVudCkge1xuICAgIHJldHVybiBjdXJyZW50SW1wbGVtZW50YXRpb24ucmVnaXN0ZXJDb21wb25lbnQobmFtZSwgY29tcG9uZW50KTtcbn07XG5cbnZhciBzZXRJbXBsZW1lbnRhdGlvbiA9IGV4cG9ydHMuc2V0SW1wbGVtZW50YXRpb24gPSBmdW5jdGlvbiBzZXRJbXBsZW1lbnRhdGlvbihpbXBsZW1lbnRhdGlvbikge1xuICAgIGN1cnJlbnRJbXBsZW1lbnRhdGlvbiA9IGltcGxlbWVudGF0aW9uO1xufTtcblxudmFyIGN1cnJlbnRSZWFkeUNoZWNrID0gZnVuY3Rpb24gY3VycmVudFJlYWR5Q2hlY2soKSB7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xufTtcblxudmFyIGNvbXBvbmVudHNSZWFkeSA9IGV4cG9ydHMuY29tcG9uZW50c1JlYWR5ID0gZnVuY3Rpb24gY29tcG9uZW50c1JlYWR5KCkge1xuICAgIHJldHVybiBjdXJyZW50UmVhZHlDaGVjaygpO1xufTtcblxudmFyIHNldFJlYWR5Q2hlY2sgPSBleHBvcnRzLnNldFJlYWR5Q2hlY2sgPSBmdW5jdGlvbiBzZXRSZWFkeUNoZWNrKHJlYWR5Q2hlY2spIHtcbiAgICBjdXJyZW50UmVhZHlDaGVjayA9IHJlYWR5Q2hlY2s7XG59O1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfcmVnaXN0ZXJDb21wb25lbnQ7XG52YXIgaXNDdXN0b21Db21wb25lbnQgPSBleHBvcnRzLmlzQ3VzdG9tQ29tcG9uZW50ID0gZnVuY3Rpb24gaXNDdXN0b21Db21wb25lbnQobm9kZSkge1xuICAgIHJldHVybiBjdXJyZW50SW1wbGVtZW50YXRpb24uaXNDdXN0b21Db21wb25lbnQobm9kZSk7XG59O1xuXG4vKioqLyB9KSxcbi8qIDIgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG5cbnZhciBzdHViSW1wbGVtZW50YXRpb24gPSB7XG4gICAgcmVkdWNlcnM6IHt9LFxuICAgIHN1YnNjcmlwdGlvbnM6IHt9LFxuICAgIGFkZFJlZHVjZXI6IGZ1bmN0aW9uIGFkZFJlZHVjZXIoa2V5LCByZWR1Y2VyKSB7XG4gICAgICAgIHRoaXMucmVkdWNlcnNba2V5XSA9IHJlZHVjZXI7XG4gICAgfSxcbiAgICByZW1vdmVSZWR1Y2VyOiBmdW5jdGlvbiByZW1vdmVSZWR1Y2VyKGtleSkge1xuICAgICAgICBkZWxldGUgdGhpcy5yZWR1Y2Vyc1trZXldO1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShrZXksIGNiKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgICAgaWYgKCF0aGlzLnN1YnNjcmlwdGlvbnNba2V5XSkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2tleV0gPSBbXTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1YnNjcmlwdGlvbnNba2V5XS5wdXNoKGNiKTtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIHVuc3Vic2NyaWJlOiBmdW5jdGlvbiB1bnN1YnNjcmliZSgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zdWJzY3JpcHRpb25zW2tleV0gPSBfdGhpcy5zdWJzY3JpcHRpb25zW2tleV0uZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZWwgIT09IGNiO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgIH0sXG4gICAgZ2V0U3RhdGU6IGZ1bmN0aW9uIGdldFN0YXRlKGtleSkge30sXG4gICAgbWlncmF0ZTogZnVuY3Rpb24gbWlncmF0ZShuZXdTdG9yZSkge1xuICAgICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5yZWR1Y2Vycykge1xuICAgICAgICAgICAgdmFyIHJlZHVjZXIgPSB0aGlzLnJlZHVjZXJzW2tleV07XG4gICAgICAgICAgICBuZXdTdG9yZS5hZGRSZWR1Y2VyKGtleSwgcmVkdWNlcik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgX2tleSBpbiB0aGlzLnN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgICAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuICAgICAgICAgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHRoaXMuc3Vic2NyaXB0aW9uc1tfa2V5XVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF9zdGVwLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgICAgIG5ld1N0b3JlLnN1YnNjcmliZShfa2V5LCBzdWJzY3JpcHRpb24pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld1N0b3JlO1xuICAgIH1cbn07XG5cbnZhciBzdG9yZSA9IHtcbiAgICBjdXJyZW50SW1wbGVtZW50YXRpb246IHN0dWJJbXBsZW1lbnRhdGlvblxufTtcblxudmFyIHNldEltcGxlbWVudGF0aW9uID0gZXhwb3J0cy5zZXRJbXBsZW1lbnRhdGlvbiA9IGZ1bmN0aW9uIHNldEltcGxlbWVudGF0aW9uKGltcGxlbWVudGF0aW9uKSB7XG4gICAgc3RvcmUuY3VycmVudEltcGxlbWVudGF0aW9uID0gc3RvcmUuY3VycmVudEltcGxlbWVudGF0aW9uLm1pZ3JhdGUoaW1wbGVtZW50YXRpb24pO1xufTtcblxudmFyIHJlZ2lzdGVyUmVkdWNlciA9IGV4cG9ydHMucmVnaXN0ZXJSZWR1Y2VyID0gZnVuY3Rpb24gcmVnaXN0ZXJSZWR1Y2VyKGtleSwgcmVkdWNlcikge1xuICAgIHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbi5hZGRSZWR1Y2VyKGtleSwgcmVkdWNlcik7XG59O1xudmFyIHJlbW92ZVJlZHVjZXIgPSBleHBvcnRzLnJlbW92ZVJlZHVjZXIgPSBmdW5jdGlvbiByZW1vdmVSZWR1Y2VyKGtleSkge1xuICAgIHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbi5yZW1vdmVSZWR1Y2VyKGtleSk7XG59O1xudmFyIHN1YnNjcmliZSA9IGV4cG9ydHMuc3Vic2NyaWJlID0gZnVuY3Rpb24gc3Vic2NyaWJlKGtleSwgY2IpIHtcbiAgICByZXR1cm4gc3RvcmUuY3VycmVudEltcGxlbWVudGF0aW9uLnN1YnNjcmliZShrZXksIGNiKTtcbn07XG52YXIgZ2V0U3RhdGUgPSBleHBvcnRzLmdldFN0YXRlID0gZnVuY3Rpb24gZ2V0U3RhdGUoa2V5KSB7XG4gICAgcmV0dXJuIHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbi5nZXRTdGF0ZShrZXkpO1xufTtcblxuLyoqKi8gfSksXG4vKiAzICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9zbGljZWRUb0FycmF5ID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBzbGljZUl0ZXJhdG9yKGFyciwgaSkgeyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9lID0gdW5kZWZpbmVkOyB0cnkgeyBmb3IgKHZhciBfaSA9IGFycltTeW1ib2wuaXRlcmF0b3JdKCksIF9zOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9IHJldHVybiBmdW5jdGlvbiAoYXJyLCBpKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgcmV0dXJuIGFycjsgfSBlbHNlIGlmIChTeW1ib2wuaXRlcmF0b3IgaW4gT2JqZWN0KGFycikpIHsgcmV0dXJuIHNsaWNlSXRlcmF0b3IoYXJyLCBpKTsgfSBlbHNlIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2VcIik7IH0gfTsgfSgpO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmV4cG9ydHMuY2FsbEhhbmRsZXJzID0gY2FsbEhhbmRsZXJzO1xuZXhwb3J0cy5hZGRUZW1wbGF0ZUhhbmRsZXIgPSBhZGRUZW1wbGF0ZUhhbmRsZXI7XG5leHBvcnRzLmFjY2Vzc0hhbmRsZXIgPSBhY2Nlc3NIYW5kbGVyO1xuZXhwb3J0cy51bmxvYWRIYW5kbGVyID0gdW5sb2FkSGFuZGxlcjtcbmV4cG9ydHMuc2V0Q29yZUhhbmRsZXIgPSBzZXRDb3JlSGFuZGxlcjtcblxudmFyIF9zdG9yYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxudmFyIF91dGlscyA9IF9fd2VicGFja19yZXF1aXJlX18oNCk7XG5cbnZhciBfd2ViQ29tcG9uZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbnZhciBwcm9wc1N0b3JhZ2UgPSAoMCwgX3N0b3JhZ2UuZ2V0U3RvcmFnZSkoX3N0b3JhZ2Uuc3RvcmFnZUtleXMuUFJPUFMpO1xudmFyIGV2ZW50c1N0b3JhZ2UgPSAoMCwgX3N0b3JhZ2UuZ2V0U3RvcmFnZSkoX3N0b3JhZ2Uuc3RvcmFnZUtleXMuRVZFTlRTKTtcblxudmFyIEV2ZW50c1RhZ0hhbmRsZXIgPSB7XG4gICAgY2FsbDogZnVuY3Rpb24gY2FsbChub2RlLCBhcmdzKSB7XG4gICAgICAgIHZhciBhdHRyaWJ1dGVzID0gbm9kZS5hdHRyaWJ1dGVzIHx8IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2ldO1xuICAgICAgICAgICAgaWYgKGF0dHJpYnV0ZS5ub2RlTmFtZS5zdGFydHNXaXRoKFwib25cIikpIHtcbiAgICAgICAgICAgICAgICB2YXIgbWF0Y2ggPSBhdHRyaWJ1dGUubm9kZVZhbHVlLm1hdGNoKC9fX0FSR19fKFxcZCspLyk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IE51bWJlcihtYXRjaFsxXSk7XG4gICAgICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lciA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGxpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZS5ub2RlTmFtZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgZXZlbnROYW1lID0gYXR0cmlidXRlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkuc2xpY2UoMik7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnROYW1lLCBsaXN0ZW5lcik7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsaXN0ZW5lcnMgPSBldmVudHNTdG9yYWdlLmdldChub2RlKSB8fCB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIGV2ZW50c1N0b3JhZ2Uuc2V0KG5vZGUsIF9leHRlbmRzKHt9LCBsaXN0ZW5lcnMsIF9kZWZpbmVQcm9wZXJ0eSh7fSwgZXZlbnROYW1lLCBsaXN0ZW5lcikpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbnZhciBNYXBIYW5kbGVyID0ge1xuICAgIGNhbGw6IGZ1bmN0aW9uIGNhbGwobm9kZSwgYXJncykge1xuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEhUTUxUZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShcIm1hcFwiKSkge1xuICAgICAgICAgICAgICAgIHZhciBtYXRjaCA9IFN0cmluZyhub2RlLmdldEF0dHJpYnV0ZShcIm1hcFwiKSkubWF0Y2goL19fQVJHX18oXFxkKykvKTtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2ggJiYgbWF0Y2hbMV0pIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGluZGV4ID0gTnVtYmVyKG1hdGNoWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGFyciA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICB2YXIgdHBsID0gbm9kZS5pbm5lckhUTUw7XG4gICAgICAgICAgICAgICAgICAgIHZhciBmcmFnbWVudCA9IGRvY3VtZW50LmNyZWF0ZURvY3VtZW50RnJhZ21lbnQoKTtcbiAgICAgICAgICAgICAgICAgICAgYXJyLmZvckVhY2goZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHBsLnJlcGxhY2UoL19fQVJHX18oXFxkKykvZywgZnVuY3Rpb24gKG1hdGNoLCBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBhcmcgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGFyZyA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciB0cGxDYWxsID0gYXJnKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRwbENhbGwgaW5zdGFuY2VvZiBIVE1MVGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCh0cGxDYWxsLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHRtcFRwbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRtcFRwbC5pbm5lckhUTUwgPSB0cGxDYWxsO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZnJhZ21lbnQuYXBwZW5kQ2hpbGQodG1wVHBsLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmc7XG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIC8vICRGbG93Rml4TWVcbiAgICAgICAgICAgICAgICAgICAgbm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChmcmFnbWVudCwgbm9kZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuZnVuY3Rpb24gc2hvdWxkU2V0UHJvcFRvU3RvcmFnZSh2YWx1ZSwgbm9kZSkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiB8fCAodHlwZW9mIHZhbHVlID09PSBcInVuZGVmaW5lZFwiID8gXCJ1bmRlZmluZWRcIiA6IF90eXBlb2YodmFsdWUpKSA9PT0gXCJvYmplY3RcIiB8fCAoMCwgX3dlYkNvbXBvbmVudHMuaXNDdXN0b21Db21wb25lbnQpKG5vZGUpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUF0dHJpYnV0ZShhdHRyaWJ1dGUsIG5vZGUsIGFyZ3MpIHtcbiAgICB2YXIgbWF0Y2ggPSBhdHRyaWJ1dGUubm9kZVZhbHVlLm1hdGNoKC9fX0FSR19fKFxcZCspLyk7XG4gICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XG4gICAgICAgIHZhciBpbmRleCA9IE51bWJlcihtYXRjaFsxXSk7XG4gICAgICAgIHZhciBub2RlTmFtZSA9IGF0dHJpYnV0ZS5ub2RlTmFtZTtcbiAgICAgICAgdmFyIHByb3BOYW1lID0gKDAsIF91dGlscy50YWdOYW1lVG9Qcm9wKShub2RlTmFtZSk7XG4gICAgICAgIHZhciB2YWx1ZSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICByZXR1cm4gW3Byb3BOYW1lLCB2YWx1ZV07XG4gICAgfVxuICAgIHJldHVybiBbYXR0cmlidXRlLm5vZGVOYW1lLCBhdHRyaWJ1dGUubm9kZVZhbHVlXTtcbn1cblxudmFyIFByb3BzSGFuZGxlciA9IHtcbiAgICBjYWxsOiBmdW5jdGlvbiBjYWxsKG5vZGUsIGFyZ3MpIHtcbiAgICAgICAgdmFyIGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdmFyIGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG5cbiAgICAgICAgICAgIHZhciBfcGFyc2VBdHRyaWJ1dGUgPSBwYXJzZUF0dHJpYnV0ZShhdHRyaWJ1dGUsIG5vZGUsIGFyZ3MpLFxuICAgICAgICAgICAgICAgIF9wYXJzZUF0dHJpYnV0ZTIgPSBfc2xpY2VkVG9BcnJheShfcGFyc2VBdHRyaWJ1dGUsIDIpLFxuICAgICAgICAgICAgICAgIHByb3BOYW1lID0gX3BhcnNlQXR0cmlidXRlMlswXSxcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IF9wYXJzZUF0dHJpYnV0ZTJbMV07XG5cbiAgICAgICAgICAgIGlmIChzaG91bGRTZXRQcm9wVG9TdG9yYWdlKHZhbHVlLCBub2RlKSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wcyA9IHByb3BzU3RvcmFnZS5nZXQobm9kZSkgfHwge307XG4gICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUoYXR0cmlidXRlLm5vZGVOYW1lKTtcbiAgICAgICAgICAgICAgICBwcm9wc1N0b3JhZ2Uuc2V0KG5vZGUsIF9leHRlbmRzKHt9LCBwcm9wcywgX2RlZmluZVByb3BlcnR5KHt9LCBwcm9wTmFtZSwgdmFsdWUpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG59O1xuXG52YXIgY29yZUhhbmRsZXJzID0ge1xuICAgIGV2ZW50czogRXZlbnRzVGFnSGFuZGxlcixcbiAgICBtYXA6IE1hcEhhbmRsZXIsXG4gICAgcHJvcHM6IFByb3BzSGFuZGxlclxufTtcblxudmFyIGN1c3RvbUhhbmRsZXJzID0ge307XG5cbnZhciBoYW5kbGVycyA9IFtjb3JlSGFuZGxlcnMubWFwLmNhbGwsIGNvcmVIYW5kbGVycy5ldmVudHMuY2FsbCwgY29yZUhhbmRsZXJzLnByb3BzLmNhbGxdO1xuXG5mdW5jdGlvbiBjYWxsSGFuZGxlcnMoZWxlbWVudCwgYXJncykge1xuICAgIGlmICgoZWxlbWVudC5hdHRyaWJ1dGVzIHx8IFtdKS5sZW5ndGgpIHtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgaGFuZGxlcihlbGVtZW50LCBhcmdzKTtcbiAgICAgICAgfSk7XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudC5jaGlsZE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNhbGxIYW5kbGVycyhlbGVtZW50LmNoaWxkTm9kZXNbaV0sIGFyZ3MpO1xuICAgIH1cbn1cblxuZnVuY3Rpb24gYWRkVGVtcGxhdGVIYW5kbGVyKGtleSwgaGFuZGxlcikge1xuICAgIGN1c3RvbUhhbmRsZXJzW2tleV0gPSBoYW5kbGVyO1xuICAgIC8vICRGbG93Rml4TWVcbiAgICBoYW5kbGVycy51bnNoaWZ0KGhhbmRsZXIuY2FsbCk7XG59XG5cbmZ1bmN0aW9uIGFjY2Vzc0hhbmRsZXIoa2V5KSB7XG4gICAgcmV0dXJuIGN1c3RvbUhhbmRsZXJzW2tleV07XG59XG5cbmZ1bmN0aW9uIHVubG9hZEhhbmRsZXIoa2V5KSB7XG4gICAgdmFyIGhhbmRsZXIgPSBjdXN0b21IYW5kbGVyc1trZXldO1xuICAgIGhhbmRsZXJzID0gaGFuZGxlcnMuZmlsdGVyKGZ1bmN0aW9uIChlbCkge1xuICAgICAgICByZXR1cm4gZWwgIT09IGhhbmRsZXIuY2FsbDtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gc2V0Q29yZUhhbmRsZXIoa2V5LCBoYW5kbGVyKSB7XG4gICAgY29yZUhhbmRsZXJzW2tleV0gPSBoYW5kbGVyO1xufVxuXG4vKioqLyB9KSxcbi8qIDQgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5jbGVhclByb3BzU3RvcmFnZSA9IGNsZWFyUHJvcHNTdG9yYWdlO1xuZXhwb3J0cy5jbGVhckV2ZW50c1N0b3JhZ2UgPSBjbGVhckV2ZW50c1N0b3JhZ2U7XG5leHBvcnRzLnRhZ05hbWVUb1Byb3AgPSB0YWdOYW1lVG9Qcm9wO1xuXG52YXIgX3N0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgcHJvcHNTdG9yYWdlID0gKDAsIF9zdG9yYWdlLmdldFN0b3JhZ2UpKF9zdG9yYWdlLnN0b3JhZ2VLZXlzLlBST1BTKTtcblxudmFyIGV2ZW50c1N0b3JhZ2UgPSAoMCwgX3N0b3JhZ2UuZ2V0U3RvcmFnZSkoX3N0b3JhZ2Uuc3RvcmFnZUtleXMuRVZFTlRTKTtcblxuZnVuY3Rpb24gY2xlYXJQcm9wc1N0b3JhZ2UoKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcbiAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgICAgIHZhciBfaXRlcmF0b3JFcnJvciA9IHVuZGVmaW5lZDtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gcHJvcHNTdG9yYWdlLmtleXMoKVtTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3N0ZXAudmFsdWU7XG5cbiAgICAgICAgICAgICAgICBpZiAoIWtleS5pc0Nvbm5lY3RlZCkge1xuICAgICAgICAgICAgICAgICAgICBwcm9wc1N0b3JhZ2UuZGVsZXRlKGtleSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcbiAgICAgICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgICAgICB9IGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIGNsZWFyRXZlbnRzU3RvcmFnZSgpIHtcbiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcbiAgICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gZXZlbnRzU3RvcmFnZS5rZXlzKClbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICB2YXIga2V5ID0gX3N0ZXAyLnZhbHVlO1xuXG4gICAgICAgICAgICAgICAgaWYgKCFrZXkuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzU3RvcmFnZS5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IyID0gdHJ1ZTtcbiAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSk7XG59XG5cbmZ1bmN0aW9uIHRhZ05hbWVUb1Byb3Aobm9kZU5hbWUpIHtcbiAgICByZXR1cm4gbm9kZU5hbWUuc3BsaXQoXCItXCIpLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBuZXh0KSB7XG4gICAgICAgIGlmIChuZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gYWNjICsgbmV4dFswXS50b1VwcGVyQ2FzZSgpICsgbmV4dC5zbGljZSgxKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYWNjO1xuICAgIH0pO1xufVxuXG4vKioqLyB9KSxcbi8qIDUgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3dlYkNvbXBvbmVudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDEpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJjaGFuZ2VXZWJDb21wb25lbnRzSW1wbGVtZW5hdGlvblwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF93ZWJDb21wb25lbnRzLnNldEltcGxlbWVudGF0aW9uO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY29tcG9uZW50c1JlYWR5XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3dlYkNvbXBvbmVudHMuY29tcG9uZW50c1JlYWR5O1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2hhbmdlV2ViQ29tcG9uZW50c1JlYWR5Q2hlY2tcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfd2ViQ29tcG9uZW50cy5zZXRSZWFkeUNoZWNrO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVnaXN0ZXJDb21wb25lbnRcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF93ZWJDb21wb25lbnRzKS5kZWZhdWx0O1xuICAgIH1cbn0pO1xuXG52YXIgX3N0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiY2hhbmdlU3RvcmVJbXBsZW1lbnRhdGlvblwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdG9yZS5zZXRJbXBsZW1lbnRhdGlvbjtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcInJlZ2lzdGVyUmVkdWNlclwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdG9yZS5yZWdpc3RlclJlZHVjZXI7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJyZW1vdmVSZWR1Y2VyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3N0b3JlLnJlbW92ZVJlZHVjZXI7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzdWJzY3JpYmVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfc3RvcmUuc3Vic2NyaWJlO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiZ2V0U3RhdGVcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfc3RvcmUuZ2V0U3RhdGU7XG4gICAgfVxufSk7XG5cbnZhciBfaGFuZGxlcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDMpO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhZGRUZW1wbGF0ZUhhbmRsZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfaGFuZGxlcnMuYWRkVGVtcGxhdGVIYW5kbGVyO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwic2V0Q29yZUhhbmRsZXJcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfaGFuZGxlcnMuc2V0Q29yZUhhbmRsZXI7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJ1bmxvYWRIYW5kbGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2hhbmRsZXJzLnVubG9hZEhhbmRsZXI7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJhY2Nlc3NIYW5kbGVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2hhbmRsZXJzLmFjY2Vzc0hhbmRsZXI7XG4gICAgfVxufSk7XG5cbnZhciBfdGFnID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiaHRtbFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF90YWcuaHRtbDtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImNzc1wiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF90YWcuY3NzO1xuICAgIH1cbn0pO1xuXG52YXIgX3N0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJnZXRTdG9yYWdlXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3N0b3JhZ2UuZ2V0U3RvcmFnZTtcbiAgICB9XG59KTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcImFkZFN0b3JhZ2VcIiwge1xuICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgIHJldHVybiBfc3RvcmFnZS5hZGRTdG9yYWdlO1xuICAgIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwicmVtb3ZlU3RvcmFnZVwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdG9yYWdlLnJlbW92ZVN0b3JhZ2U7XG4gICAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJzZXRTdG9yYWdlRHJpdmVyXCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX3N0b3JhZ2Uuc2V0U3RvcmFnZURyaXZlcjtcbiAgICB9XG59KTtcblxudmFyIF9iaW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiYmluZFwiLCB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgcmV0dXJuIF9iaW5kLmJpbmQ7XG4gICAgfVxufSk7XG5cbnZhciBfQ29tcG9uZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg4KTtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiQ29tcG9uZW50XCIsIHtcbiAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICByZXR1cm4gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfQ29tcG9uZW50KS5kZWZhdWx0O1xuICAgIH1cbn0pO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKioqLyB9KSxcbi8qIDYgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmV4cG9ydHMuaHRtbCA9IGh0bWw7XG5leHBvcnRzLmNzcyA9IGNzcztcblxudmFyIF9oYW5kbGVycyA9IF9fd2VicGFja19yZXF1aXJlX18oMyk7XG5cbmZ1bmN0aW9uIGh0bWwoc3RyaW5ncykge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAoIWFyZ3MubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBzdHJpbmdzWzBdO1xuICAgIH1cblxuICAgIHZhciBBUkcgPSBcIl9fQVJHX19cIjtcbiAgICB2YXIgdHBsID0gXCJcIjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHN0cmluZ3MubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgdHBsICs9IHN0cmluZ3NbaV07XG4gICAgICAgIGlmIChpIDwgc3RyaW5ncy5sZW5ndGggLSAxKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGFyZ3NbaV0gPT09IFwiZnVuY3Rpb25cIiB8fCBfdHlwZW9mKGFyZ3NbaV0pID09PSBcIm9iamVjdFwiKSB0cGwgKz0gQVJHICsgaTtlbHNlIHRwbCArPSBhcmdzW2ldO1xuICAgICAgICB9XG4gICAgfVxuICAgIHZhciB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSB0cGw7XG4gICAgKDAsIF9oYW5kbGVycy5jYWxsSGFuZGxlcnMpKHRlbXBsYXRlLmNvbnRlbnQsIGFyZ3MpO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbn1cblxuZnVuY3Rpb24gY3NzKHN0cmluZ3MpIHtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG5cbiAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTIgLSAxXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgfVxuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzdHJpbmdzW2ldO1xuICAgICAgICBpZiAoaSA8IHN0cmluZ3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2ldID09PSBcImZ1bmN0aW9uXCIpIHJlc3VsdCArPSBhcmdzW2ldKCk7ZWxzZSByZXN1bHQgKz0gYXJnc1tpXTtcbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xufVxuXG4vKioqLyB9KSxcbi8qIDcgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5iaW5kID0gYmluZDtcblxudmFyIF9zdG9yYWdlID0gX193ZWJwYWNrX3JlcXVpcmVfXygwKTtcblxuZnVuY3Rpb24gX3RvQ29uc3VtYWJsZUFycmF5KGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gQXJyYXkoYXJyLmxlbmd0aCk7IGkgPCBhcnIubGVuZ3RoOyBpKyspIHsgYXJyMltpXSA9IGFycltpXTsgfSByZXR1cm4gYXJyMjsgfSBlbHNlIHsgcmV0dXJuIEFycmF5LmZyb20oYXJyKTsgfSB9XG5cbnZhciBLRVkgPSBcIkJPVU5EU1wiO1xudmFyIE1BWF9TVE9SQUdFX1NJWkUgPSAxMDA7XG5cbigwLCBfc3RvcmFnZS5hZGRTdG9yYWdlKShLRVksIG5ldyBNYXAoKSk7XG5cbmZ1bmN0aW9uIGFwcGVuZFRvU3RvcmFnZShmbiwgdmFsdWUpIHtcbiAgICB2YXIgc3RvcmFnZSA9ICgwLCBfc3RvcmFnZS5nZXRTdG9yYWdlKShLRVkpO1xuICAgIGlmIChzdG9yYWdlLnNpemUgPT09IE1BWF9TVE9SQUdFX1NJWkUpIHtcbiAgICAgICAgdmFyIGtleXMgPSBzdG9yYWdlLmtleXMoKTtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICBzdG9yYWdlLmRlbGV0ZShrZXlzLm5leHQoKS52YWx1ZSk7XG4gICAgfVxuICAgIHN0b3JhZ2Uuc2V0KGZuLCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIGJpbmQoZm4pIHtcbiAgICB2YXIgc3RvcmFnZSA9ICgwLCBfc3RvcmFnZS5nZXRTdG9yYWdlKShLRVkpO1xuICAgIHZhciBib3VuZCA9IHN0b3JhZ2UuZ2V0KGZuKTtcblxuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RBcmcgPSBhcmdzWzBdO1xuICAgIHZhciBib3VuZEZuID0gZm4uYmluZC5hcHBseShmbiwgW251bGxdLmNvbmNhdChfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpKTtcbiAgICBpZiAoYm91bmQpIHtcbiAgICAgICAgaWYgKCFib3VuZC5nZXQoZmlyc3RBcmcpKSB7XG4gICAgICAgICAgICBib3VuZC5zZXQoZmlyc3RBcmcsIGJvdW5kRm4pO1xuICAgICAgICAgICAgcmV0dXJuIGJvdW5kRm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICByZXR1cm4gYm91bmQuZ2V0KGZpcnN0QXJnKTtcbiAgICB9XG5cbiAgICB2YXIgZm5NYXAgPSBuZXcgTWFwKCk7XG4gICAgZm5NYXAuc2V0KGZpcnN0QXJnLCBib3VuZEZuKTtcbiAgICBhcHBlbmRUb1N0b3JhZ2UoZm4sIGZuTWFwKTtcbiAgICByZXR1cm4gYm91bmRGbjtcbn1cblxuLyoqKi8gfSksXG4vKiA4ICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG52YXIgX2NyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkgeyBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHsgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykgeyB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldOyBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7IGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTsgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTsgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpOyB9IH0gcmV0dXJuIGZ1bmN0aW9uIChDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHsgaWYgKHByb3RvUHJvcHMpIGRlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IucHJvdG90eXBlLCBwcm90b1Byb3BzKTsgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7IHJldHVybiBDb25zdHJ1Y3RvcjsgfTsgfSgpO1xuXG52YXIgX3N0b3JlID0gX193ZWJwYWNrX3JlcXVpcmVfXygyKTtcblxudmFyIF9yZW5kZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDkpO1xuXG52YXIgX3N0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDApO1xuXG52YXIgX3V0aWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg0KTtcblxuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KG9iaiwga2V5LCB2YWx1ZSkgeyBpZiAoa2V5IGluIG9iaikgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHsgdmFsdWU6IHZhbHVlLCBlbnVtZXJhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUsIHdyaXRhYmxlOiB0cnVlIH0pOyB9IGVsc2UgeyBvYmpba2V5XSA9IHZhbHVlOyB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogc3ViQ2xhc3MuX19wcm90b19fID0gc3VwZXJDbGFzczsgfVxuXG52YXIgX2ZpeEJhYmVsRXh0ZW5kID0gZnVuY3Rpb24gKE8pIHtcbiAgICB2YXIgZ1BPID0gTy5nZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAobykge1xuICAgICAgICByZXR1cm4gby5fX3Byb3RvX187XG4gICAgfSxcbiAgICAgICAgc1BPID0gTy5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiAobywgcCkge1xuICAgICAgICBvLl9fcHJvdG9fXyA9IHA7XG4gICAgICAgIHJldHVybiBvO1xuICAgIH0sXG4gICAgICAgIGNvbnN0cnVjdCA9ICh0eXBlb2YgUmVmbGVjdCA9PT0gXCJ1bmRlZmluZWRcIiA/IFwidW5kZWZpbmVkXCIgOiBfdHlwZW9mKFJlZmxlY3QpKSA9PT0gJ29iamVjdCcgPyBSZWZsZWN0LmNvbnN0cnVjdCA6IGZ1bmN0aW9uIChQYXJlbnQsIGFyZ3MsIENsYXNzKSB7XG4gICAgICAgIHZhciBDb25zdHJ1Y3RvcixcbiAgICAgICAgICAgIGEgPSBbbnVsbF07XG4gICAgICAgIGEucHVzaC5hcHBseShhLCBhcmdzKTtcbiAgICAgICAgQ29uc3RydWN0b3IgPSBQYXJlbnQuYmluZC5hcHBseShQYXJlbnQsIGEpO1xuICAgICAgICByZXR1cm4gc1BPKG5ldyBDb25zdHJ1Y3RvcigpLCBDbGFzcy5wcm90b3R5cGUpO1xuICAgIH07XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gZml4QmFiZWxFeHRlbmQoQ2xhc3MpIHtcbiAgICAgICAgdmFyIFBhcmVudCA9IGdQTyhDbGFzcyk7XG4gICAgICAgIHJldHVybiBzUE8oQ2xhc3MsIHNQTyhmdW5jdGlvbiBTdXBlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBjb25zdHJ1Y3QoUGFyZW50LCBhcmd1bWVudHMsIGdQTyh0aGlzKS5jb25zdHJ1Y3Rvcik7XG4gICAgICAgIH0sIFBhcmVudCkpO1xuICAgIH07XG59KE9iamVjdCk7XG5cbnZhciBwcm9wc1N0b3JhZ2UgPSAoMCwgX3N0b3JhZ2UuZ2V0U3RvcmFnZSkoX3N0b3JhZ2Uuc3RvcmFnZUtleXMuUFJPUFMpO1xuXG5mdW5jdGlvbiBwYXJzZUF0dHJpYnV0ZXMoYXR0cmlidXRlcykge1xuICAgIHZhciByZXN1bHQgPSB7fTtcbiAgICB2YXIgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWU7XG4gICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG4gICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXG4gICAgdHJ5IHtcbiAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gYXR0cmlidXRlc1tTeW1ib2wuaXRlcmF0b3JdKCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBfc3RlcC52YWx1ZTtcblxuICAgICAgICAgICAgcmVzdWx0W2F0dHJpYnV0ZS5uYW1lXSA9IGF0dHJpYnV0ZS52YWx1ZTtcbiAgICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG4gICAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuICAgIH0gZmluYWxseSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn1cblxudmFyIENvbXBvbmVudCA9IF9maXhCYWJlbEV4dGVuZChmdW5jdGlvbiAoX0hUTUxFbGVtZW50KSB7XG4gICAgX2luaGVyaXRzKENvbXBvbmVudCwgX0hUTUxFbGVtZW50KTtcblxuICAgIGZ1bmN0aW9uIENvbXBvbmVudCgpIHtcbiAgICAgICAgdmFyIF9yZWY7XG5cbiAgICAgICAgdmFyIF90ZW1wLCBfdGhpcywgX3JldDtcblxuICAgICAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29tcG9uZW50KTtcblxuICAgICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiBfcmV0ID0gKF90ZW1wID0gKF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgKF9yZWYgPSBDb21wb25lbnQuX19wcm90b19fIHx8IE9iamVjdC5nZXRQcm90b3R5cGVPZihDb21wb25lbnQpKS5jYWxsLmFwcGx5KF9yZWYsIFt0aGlzXS5jb25jYXQoYXJncykpKSwgX3RoaXMpLCBfdGhpcy5fX2RlZmF1bHRQcm9wcyA9IHt9LCBfdGhpcy5zdWJzY3JpcHRpb25zID0gW10sIF90aGlzLnN0YXRlID0ge30sIF90aGlzLm1vdW50ZWQgPSBmYWxzZSwgX3RlbXApLCBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihfdGhpcywgX3JldCk7XG4gICAgfVxuXG4gICAgX2NyZWF0ZUNsYXNzKENvbXBvbmVudCwgW3tcbiAgICAgICAga2V5OiBcImJlZm9yZVJlbmRlclwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYmVmb3JlUmVuZGVyKCkge31cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJyZW5kZXJcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImFmdGVyUmVuZGVyXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBhZnRlclJlbmRlcigpIHt9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic3Vic2NyaWJlVG9TdG9yZVwiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gc3Vic2NyaWJlVG9TdG9yZSgpIHtcbiAgICAgICAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgICAgICAgICB2YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcChrZXkpIHtcbiAgICAgICAgICAgICAgICBfdGhpczIuc3Vic2NyaXB0aW9ucy5wdXNoKCgwLCBfc3RvcmUuc3Vic2NyaWJlKShrZXksIGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpczIuc3RhdGVba2V5XSA9IHN0YXRlO1xuICAgICAgICAgICAgICAgICAgICBfcmVuZGVyLnJlbmRlci5jYWxsKF90aGlzMik7XG4gICAgICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgICAgIF90aGlzMi5zdGF0ZVtrZXldID0gKDAsIF9zdG9yZS5nZXRTdGF0ZSkoa2V5KTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IyID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSB0aGlzLmtleXNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDI7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSAoX3N0ZXAyID0gX2l0ZXJhdG9yMi5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtleSA9IF9zdGVwMi52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBfbG9vcChrZXkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG4gICAgICAgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yMikge1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiY29ubmVjdGVkQ2FsbGJhY2tcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1N0b3JlKCk7XG4gICAgICAgICAgICBfcmVuZGVyLnJlbmRlci5jYWxsKHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLmNvbm5lY3RlZCgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiY29ubmVjdGVkXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBjb25uZWN0ZWQoKSB7fVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImRpc2Nvbm5lY3RlZENhbGxiYWNrXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICAgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWU7XG4gICAgICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IzID0gZmFsc2U7XG4gICAgICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IzID0gdW5kZWZpbmVkO1xuXG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9pdGVyYXRvcjMgPSB0aGlzLnN1YnNjcmlwdGlvbnNbU3ltYm9sLml0ZXJhdG9yXSgpLCBfc3RlcDM7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjMgPSAoX3N0ZXAzID0gX2l0ZXJhdG9yMy5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyA9IHRydWUpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHN1YnNjcmlwdGlvbiA9IF9zdGVwMy52YWx1ZTtcblxuICAgICAgICAgICAgICAgICAgICBzdWJzY3JpcHRpb24udW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjMgPSB0cnVlO1xuICAgICAgICAgICAgICAgIF9pdGVyYXRvckVycm9yMyA9IGVycjtcbiAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMyAmJiBfaXRlcmF0b3IzLnJldHVybikge1xuICAgICAgICAgICAgICAgICAgICAgICAgX2l0ZXJhdG9yMy5yZXR1cm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH0gZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjMpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMztcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgKDAsIF91dGlscy5jbGVhclByb3BzU3RvcmFnZSkoKTtcbiAgICAgICAgICAgICgwLCBfdXRpbHMuY2xlYXJFdmVudHNTdG9yYWdlKSgpO1xuXG4gICAgICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCgpO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiZGlzY29ubmVjdGVkXCIsXG4gICAgICAgIHZhbHVlOiBmdW5jdGlvbiBkaXNjb25uZWN0ZWQoKSB7fVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImFkb3B0ZWRDYWxsYmFja1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYWRvcHRlZENhbGxiYWNrKCkge1xuICAgICAgICAgICAgdGhpcy5zdWJzY3JpYmVUb1N0b3JlKCk7XG4gICAgICAgICAgICBfcmVuZGVyLnJlbmRlci5jYWxsKHRoaXMpO1xuXG4gICAgICAgICAgICB0aGlzLmFkb3B0ZWQoKTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImFkb3B0ZWRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIGFkb3B0ZWQoKSB7fVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja1wiLFxuICAgICAgICB2YWx1ZTogZnVuY3Rpb24gYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHJpYnV0ZU5hbWUsIG9sZFZhbHVlLCBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubW91bnRlZCAmJiBvbGRWYWx1ZSAhPSBuZXdWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJvcHNDaGFuZ2VkKF9leHRlbmRzKHt9LCB0aGlzLnByb3BzLCBfZGVmaW5lUHJvcGVydHkoe30sIGF0dHJpYnV0ZU5hbWUsIG5ld1ZhbHVlKSkpO1xuICAgICAgICAgICAgICAgIF9yZW5kZXIucmVuZGVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJwcm9wc0NoYW5nZWRcIixcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uIHByb3BzQ2hhbmdlZChuZXdQcm9wcykge31cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJuYW1lXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvci5uYW1lO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwiaXNTaGFkb3dcIixcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgfVxuICAgIH0sIHtcbiAgICAgICAga2V5OiBcInByb3BzXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIF9leHRlbmRzKHt9LCB0aGlzLl9fZGVmYXVsdFByb3BzLCBwYXJzZUF0dHJpYnV0ZXModGhpcy5hdHRyaWJ1dGVzKSwgcHJvcHNTdG9yYWdlLmdldCh0aGlzKSB8fCB7fSk7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gc2V0KHByb3BzKSB7XG4gICAgICAgICAgICB0aGlzLl9fZGVmYXVsdFByb3BzID0gcHJvcHM7XG4gICAgICAgIH1cbiAgICB9LCB7XG4gICAgICAgIGtleTogXCJrZXlzXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwic3R5bGVzXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgIH1cbiAgICB9XSwgW3tcbiAgICAgICAga2V5OiBcIm9ic2VydmVkQXR0cmlidXRlc1wiLFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm9ic2VydmFibGVQcm9wcy5tYXAoZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgICAgICAgICAgICB2YXIgcmVzID0gXCJcIjtcbiAgICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHByb3BbaV0gPT09IHByb3BbaV0udG9VcHBlckNhc2UoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzICs9IFwiLVwiICsgcHJvcFtpXS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmVzICs9IHByb3BbaV07XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJlcztcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfSwge1xuICAgICAgICBrZXk6IFwib2JzZXJ2YWJsZVByb3BzXCIsXG4gICAgICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgICAgICAgcmV0dXJuIFtdO1xuICAgICAgICB9XG4gICAgfV0pO1xuXG4gICAgcmV0dXJuIENvbXBvbmVudDtcbn0oSFRNTEVsZW1lbnQpKTtcblxuZXhwb3J0cy5kZWZhdWx0ID0gQ29tcG9uZW50O1xuXG4vKioqLyB9KSxcbi8qIDkgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5yZW5kZXIgPSByZW5kZXI7XG5cbnZhciBfd2ViQ29tcG9uZW50cyA9IF9fd2VicGFja19yZXF1aXJlX18oMSk7XG5cbnZhciBfc3RvcmFnZSA9IF9fd2VicGFja19yZXF1aXJlX18oMCk7XG5cbnZhciBfc2hhbGxvd0VxdWFsID0gX193ZWJwYWNrX3JlcXVpcmVfXygxMCk7XG5cbnZhciBfc2hhbGxvd0VxdWFsMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NoYWxsb3dFcXVhbCk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbnZhciBwcm9wc1N0b3JhZ2UgPSAoMCwgX3N0b3JhZ2UuZ2V0U3RvcmFnZSkoX3N0b3JhZ2Uuc3RvcmFnZUtleXMuUFJPUFMpO1xuXG5mdW5jdGlvbiBub2RlRXF1YWxzKGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUpIHtcbiAgICB2YXIgZWxDbG9uZSA9IGVsZW1lbnROb2RlLmNsb25lTm9kZShmYWxzZSk7XG4gICAgdmFyIGZyQ2xvbmUgPSBmcmFnbWVudE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICBpZiAocHJvcHNTdG9yYWdlLmdldChmcmFnbWVudE5vZGUpKSB7XG4gICAgICAgIHJldHVybiAoMCwgX3NoYWxsb3dFcXVhbDIuZGVmYXVsdCkocHJvcHNTdG9yYWdlLmdldChlbGVtZW50Tm9kZSksIHByb3BzU3RvcmFnZS5nZXQoZnJhZ21lbnROb2RlKSkgJiYgZWxDbG9uZS5pc0VxdWFsTm9kZShmckNsb25lKTtcbiAgICB9XG4gICAgcmV0dXJuIGVsQ2xvbmUuaXNFcXVhbE5vZGUoZnJDbG9uZSk7XG59XG5cbmZ1bmN0aW9uIGNvbnRlbnREaWZmZXIoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSkge1xuICAgIHJldHVybiBlbGVtZW50Tm9kZS5pc0VxdWFsTm9kZShmcmFnbWVudE5vZGUpID09PSBmYWxzZTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudHNEZWxldGVkKGVsZW1lbnROb2RlcywgZnJhZ21lbnROb2Rlcykge1xuICAgIGlmIChlbGVtZW50Tm9kZXMubGVuZ3RoID4gZnJhZ21lbnROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBlbGVtZW50Tm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Tm9kZXNbaV0gJiYgIWZyYWdtZW50Tm9kZXNbaV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2VsZW1lbnROb2Rlc1tpXV0uY29uY2F0KGVsZW1lbnRzRGVsZXRlZChBcnJheS5mcm9tKGVsZW1lbnROb2Rlcykuc2xpY2UoaSArIDEpLCBBcnJheS5mcm9tKGZyYWdtZW50Tm9kZXMpLnNsaWNlKGkpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIW5vZGVFcXVhbHMoZWxlbWVudE5vZGVzW2ldLCBmcmFnbWVudE5vZGVzW2ldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZWxldGVkID0gZWxlbWVudHNEZWxldGVkKEFycmF5LmZyb20oZWxlbWVudE5vZGVzKS5zbGljZShpICsgMSksIEFycmF5LmZyb20oZnJhZ21lbnROb2Rlcykuc2xpY2UoaSkpO1xuICAgICAgICAgICAgICAgIGlmIChkZWxldGVkLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gW2VsZW1lbnROb2Rlc1tpXV07XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbXTtcbn1cblxuZnVuY3Rpb24gY2hpbGRyZW5DaGFuZ2VkQ291bnQoZWxlbWVudE5vZGVzLCBmcmFnbWVudE5vZGVzKSB7XG4gICAgaWYgKGVsZW1lbnROb2Rlcy5sZW5ndGggPiBmcmFnbWVudE5vZGVzLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gZnJhZ21lbnROb2Rlcy5sZW5ndGg7XG4gICAgfVxuICAgIHZhciBjaGFuZ2VkID0gMDtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGVsZW1lbnROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgZWxDbG9uZSA9IGVsZW1lbnROb2Rlc1tpXS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICB2YXIgZnJDbG9uZSA9IGZyYWdtZW50Tm9kZXNbaV0uY2xvbmVOb2RlKGZhbHNlKTtcbiAgICAgICAgaWYgKCFub2RlRXF1YWxzKGVsZW1lbnROb2Rlc1tpXSwgZnJhZ21lbnROb2Rlc1tpXSkpIHtcbiAgICAgICAgICAgIGlmICghaXNFbXB0eU5vZGUoZWxDbG9uZSkgJiYgIWlzRW1wdHlOb2RlKGZyQ2xvbmUpKSB7XG4gICAgICAgICAgICAgICAgY2hhbmdlZCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjaGFuZ2VkO1xufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZHJlbihlbGVtZW50Tm9kZSwgZWxlbWVudENoaWxkcmVuLCBmcmFnbWVudENoaWxkcmVuKSB7XG4gICAgdmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIGZvciAodmFyIGkgPSBlbGVtZW50Q2hpbGRyZW4ubGVuZ3RoOyBpIDwgZnJhZ21lbnRDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChmcmFnbWVudENoaWxkcmVuW2ldKTtcbiAgICB9XG4gICAgZWxlbWVudE5vZGUuYXBwZW5kQ2hpbGQoZnJhZ21lbnQpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVBdHRyaWJ1dGVzKGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUpIHtcbiAgICB2YXIgYXR0cmlidXRlcyA9IGZyYWdtZW50Tm9kZS5hdHRyaWJ1dGVzIHx8IFtdO1xuICAgIHZhciBlbGVtZW50QXR0cmlidXRlcyA9IGVsZW1lbnROb2RlLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgaWYgKGVsZW1lbnRBdHRyaWJ1dGVzLmxlbmd0aCA+IGF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudEF0dHJpYnV0ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIHZhciBhdHRyaWJ1dGUgPSBlbGVtZW50QXR0cmlidXRlc1tpXTtcbiAgICAgICAgICAgIGlmICghZnJhZ21lbnROb2RlLmhhc0F0dHJpYnV0ZShhdHRyaWJ1dGUubm9kZU5hbWUpKSB7XG4gICAgICAgICAgICAgICAgZWxlbWVudE5vZGUucmVtb3ZlQXR0cmlidXRlKGF0dHJpYnV0ZS5ub2RlTmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGF0dHJpYnV0ZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICAgIHZhciBfYXR0cmlidXRlID0gYXR0cmlidXRlc1tfaV07XG4gICAgICAgIGVsZW1lbnROb2RlLnNldEF0dHJpYnV0ZShfYXR0cmlidXRlLm5vZGVOYW1lLCBfYXR0cmlidXRlLm5vZGVWYWx1ZSk7XG4gICAgfVxuICAgIGlmIChwcm9wc1N0b3JhZ2UuZ2V0KGZyYWdtZW50Tm9kZSkpIHtcbiAgICAgICAgdmFyIGVsUHJvcHMgPSBwcm9wc1N0b3JhZ2UuZ2V0KGVsZW1lbnROb2RlKTtcbiAgICAgICAgdmFyIGZyUHJvcHMgPSBwcm9wc1N0b3JhZ2UuZ2V0KGZyYWdtZW50Tm9kZSk7XG4gICAgICAgIHByb3BzU3RvcmFnZS5zZXQoZWxlbWVudE5vZGUsIGZyUHJvcHMpO1xuICAgICAgICBpZiAoISgwLCBfc2hhbGxvd0VxdWFsMi5kZWZhdWx0KShlbFByb3BzLCBmclByb3BzKSkge1xuICAgICAgICAgICAgaWYgKCgwLCBfd2ViQ29tcG9uZW50cy5pc0N1c3RvbUNvbXBvbmVudCkoZWxlbWVudE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyLmNhbGwoZWxlbWVudE5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVFbGVtZW50KGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUpIHtcbiAgICBpZiAoKDAsIF93ZWJDb21wb25lbnRzLmlzQ3VzdG9tQ29tcG9uZW50KShlbGVtZW50Tm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUF0dHJpYnV0ZXMoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSk7XG4gICAgfVxuICAgIGlmICghbm9kZUVxdWFscyhlbGVtZW50Tm9kZSwgZnJhZ21lbnROb2RlKSkge1xuICAgICAgICB1cGRhdGVBdHRyaWJ1dGVzKGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUpO1xuICAgIH1cbiAgICB1cGRhdGVDaGlsZHJlbihlbGVtZW50Tm9kZSwgZnJhZ21lbnROb2RlKTtcbn1cblxuZnVuY3Rpb24gaXNFbXB0eU5vZGUobm9kZSkge1xuICAgIGlmIChub2RlLm5vZGVUeXBlICE9PSBOb2RlLlRFWFRfTk9ERSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgaWYgKG5vZGUuaW5uZXJUZXh0KSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKG5vZGUuaW5uZXJUZXh0LnRyaW0oKSkgPT09IGZhbHNlO1xuICAgIH1cbiAgICBpZiAobm9kZS5pbm5lckhUTUwpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4obm9kZS5pbm5lckhUTUwudHJpbSgpKSA9PT0gZmFsc2U7XG4gICAgfVxuICAgIGlmIChub2RlLnRleHRDb250ZW50KSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKG5vZGUudGV4dENvbnRlbnQudHJpbSgpKSA9PT0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiB0cnVlO1xufVxuXG5mdW5jdGlvbiBub2RlRmlsdGVyKG5vZGUpIHtcbiAgICBpZiAobm9kZSkge1xuICAgICAgICByZXR1cm4gKG5vZGUubm9kZVR5cGUgPT09IE5vZGUuRUxFTUVOVF9OT0RFIHx8IG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSAmJiBub2RlLm5vZGVOYW1lICE9PSBcIlNUWUxFXCIgJiYgIWlzRW1wdHlOb2RlKG5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gZmFsc2U7XG59XG5cbmZ1bmN0aW9uIGhhbmRsZUNoaWxkcmVuQ291bnRDaGFuZ2VkKGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUsIGVsZW1lbnROb2RlcywgZnJhZ21lbnROb2Rlcykge1xuICAgIHZhciBkZWxldGVkID0gZWxlbWVudHNEZWxldGVkKGVsZW1lbnROb2RlcywgZnJhZ21lbnROb2Rlcyk7XG4gICAgaWYgKGZyYWdtZW50Tm9kZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIHJldHVybiBlbGVtZW50Tm9kZS5wYXJlbnROb2RlLnJlcGxhY2VDaGlsZChmcmFnbWVudE5vZGUsIGVsZW1lbnROb2RlKTtcbiAgICB9XG4gICAgaWYgKGRlbGV0ZWQubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGRlbGV0ZWRbMF0ucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChkZWxldGVkWzBdKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUNoaWxkcmVuKGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUpO1xuICAgIH1cbiAgICBpZiAoY2hpbGRyZW5DaGFuZ2VkQ291bnQoZWxlbWVudE5vZGVzLCBmcmFnbWVudE5vZGVzKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIGVsZW1lbnROb2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGZyYWdtZW50Tm9kZSwgZWxlbWVudE5vZGUpO1xuICAgIH1cbiAgICByZXR1cm4gYXBwZW5kQ2hpbGRyZW4oZWxlbWVudE5vZGUsIGVsZW1lbnROb2RlcywgZnJhZ21lbnROb2Rlcyk7XG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUNoaWxkcmVuKGVsZW1lbnROb2RlLCBmcmFnbWVudE5vZGUpIHtcbiAgICB2YXIgZWxlbWVudE5vZGVzID0gQXJyYXkuZnJvbShlbGVtZW50Tm9kZS5jaGlsZE5vZGVzKS5maWx0ZXIobm9kZUZpbHRlcik7XG4gICAgdmFyIGZyYWdtZW50Tm9kZXMgPSBBcnJheS5mcm9tKGZyYWdtZW50Tm9kZS5jaGlsZE5vZGVzKS5maWx0ZXIobm9kZUZpbHRlcik7XG4gICAgaWYgKGVsZW1lbnROb2Rlcy5sZW5ndGggIT09IGZyYWdtZW50Tm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVDaGlsZHJlbkNvdW50Q2hhbmdlZChlbGVtZW50Tm9kZSwgZnJhZ21lbnROb2RlLCBlbGVtZW50Tm9kZXMsIGZyYWdtZW50Tm9kZXMpO1xuICAgIH1cbiAgICBpZiAoZWxlbWVudE5vZGVzLmxlbmd0aCA9PT0gMCAmJiBmcmFnbWVudE5vZGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICBpZiAoY29udGVudERpZmZlcihlbGVtZW50Tm9kZSwgZnJhZ21lbnROb2RlKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnROb2RlLnBhcmVudE5vZGUucmVwbGFjZUNoaWxkKGZyYWdtZW50Tm9kZSwgZWxlbWVudE5vZGUpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZWxlbWVudE5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHVwZGF0ZUVsZW1lbnQoZWxlbWVudE5vZGVzW2ldLCBmcmFnbWVudE5vZGVzW2ldKTtcbiAgICB9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUZyYWdtZW50RnJvbVN0cih0cGwpIHtcbiAgICB2YXIgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdHBsO1xuICAgIHJldHVybiB0ZW1wbGF0ZTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyKCkge1xuICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBzdGFydCByZW5kZXJpbmcnKTtcbiAgICB0aGlzLmJlZm9yZVJlbmRlcigpO1xuXG4gICAgaWYgKHRoaXMuaXNTaGFkb3cgJiYgIXRoaXMuc2hhZG93Um9vdCkge1xuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgYXR0YWNoaW5nIHJvb3QnKTtcbiAgICAgICAgdGhpcy5hdHRhY2hTaGFkb3coeyBtb2RlOiAnb3BlbicgfSk7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCByb290IGF0dGFjaGVkJyk7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXCJtdXNrb3QgYXR0YWNoIHJvb3RcIiwgJ211c2tvdCBhdHRhY2hpbmcgcm9vdCcsICdtdXNrb3Qgcm9vdCBhdHRhY2hlZCcpO1xuICAgIH1cbiAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgY3JlYXRlIHJlbmRlciBET00nKTtcbiAgICB2YXIgcmVuZGVyUmVzID0gdGhpcy5yZW5kZXIoKTtcbiAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgcmVuZGVyIERPTSBjcmVhdGVkJyk7XG4gICAgcGVyZm9ybWFuY2UubWVhc3VyZShcIm11c2tvdCBjb21wb25lbnQgcmVuZGVyIHJlc3VsdFwiLCAnbXVza290IGNyZWF0ZSByZW5kZXIgRE9NJywgJ211c2tvdCByZW5kZXIgRE9NIGNyZWF0ZWQnKTtcblxuICAgIHZhciByb290ID0gdGhpcy5pc1NoYWRvdyA/IHRoaXMuc2hhZG93Um9vdCA6IHRoaXM7XG4gICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGNyZWF0ZSBmcmFnbWVudCcpO1xuICAgIHZhciBmcmFnbWVudCA9IHR5cGVvZiByZW5kZXJSZXMgPT09IFwic3RyaW5nXCIgPyBjcmVhdGVGcmFnbWVudEZyb21TdHIocmVuZGVyUmVzKSA6IHJlbmRlclJlcztcbiAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgZnJhZ21lbnQgY3JlYXRlZCcpO1xuICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXCJtdXNrb3QgZnJhZ21lbnQgY3JlYXRpb25cIiwgJ211c2tvdCBjcmVhdGUgZnJhZ21lbnQnLCAnbXVza290IGZyYWdtZW50IGNyZWF0ZWQnKTtcblxuICAgIGlmICghdGhpcy5tb3VudGVkKSB7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBpbnNlcnQgc3R5bGUgaW50byBjb21wb25lbnQnKTtcbiAgICAgICAgcm9vdC5pbm5lckhUTUwgPSBcIjxzdHlsZT5cIiArIHRoaXMuc3R5bGVzICsgXCI8L3N0eWxlPlwiO1xuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3Qgc3R5bGUgaW5zZXJ0ZWQnKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShcIm11c2tvdCBzdHlsZSBjcmVhdGlvbiAmIGluc2VydCBieSBpbm5lckhUTUxcIiwgJ211c2tvdCBpbnNlcnQgc3R5bGUgaW50byBjb21wb25lbnQnLCAnbXVza290IHN0eWxlIGluc2VydGVkJyk7XG5cbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGFwcGVuZCBjaGlsZCB3aXRoIGNvbnRlbnQnKTtcbiAgICAgICAgcm9vdC5hcHBlbmRDaGlsZChmcmFnbWVudC5jb250ZW50KTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGNvbnRlbnQgYXBwZW5kZWQnKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShcIm11c2tvdCBhcHBlbmQgY29udGVudCBvbiBpbml0aWFsIHJlbmRlclwiLCAnbXVza290IGFwcGVuZCBjaGlsZCB3aXRoIGNvbnRlbnQnLCAnbXVza290IGNvbnRlbnQgYXBwZW5kZWQnKTtcblxuICAgICAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBpbnNlcnQgc3R5bGVzIGJlZm9yZSBjb250ZW50IG9uIHVwZGF0ZScpO1xuICAgICAgICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gICAgICAgIHN0eWxlLmlubmVySFRNTCA9IHRoaXMuc3R5bGVzO1xuICAgICAgICBmcmFnbWVudC5jb250ZW50Lmluc2VydEJlZm9yZShzdHlsZSwgZnJhZ21lbnQuY29udGVudC5maXJzdENoaWxkKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IHN0eWxlcyBpbnNlcnRlZCBvbiB1cGRhdGUnKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShcIm11c2tvdCBhZGQgc3R5bGVzIGJ5IGluc2VydEJlZm9yZVwiLCAnbXVza290IGluc2VydCBzdHlsZXMgYmVmb3JlIGNvbnRlbnQgb24gdXBkYXRlJywgJ211c2tvdCBzdHlsZXMgaW5zZXJ0ZWQgb24gdXBkYXRlJyk7XG5cbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IHVwZGF0ZSBjaGlsZHJlbicpO1xuICAgICAgICB1cGRhdGVDaGlsZHJlbihyb290LCBmcmFnbWVudC5jb250ZW50KTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGNoaWxkcmVuIHVwZGF0ZWQnKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShcIm11c2tvdCB1cGRhdGUgY29tcG9uZW50J3MgY2hpbGRyZW5cIiwgJ211c2tvdCB1cGRhdGUgY2hpbGRyZW4nLCAnbXVza290IGNoaWxkcmVuIHVwZGF0ZWQnKTtcbiAgICB9XG4gICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGZpbmlzaCByZW5kZXJpbmcnKTtcbiAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKFwibXVza290IGZ1bGwgcmVuZGVyXCIsICdtdXNrb3Qgc3RhcnQgcmVuZGVyaW5nJywgJ211c2tvdCBmaW5pc2ggcmVuZGVyaW5nJyk7XG5cbiAgICB0aGlzLmFmdGVyUmVuZGVyKCk7XG59XG5cbi8qKiovIH0pLFxuLyogMTAgKi9cbi8qKiovIChmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXCJ1c2Ugc3RyaWN0XCI7XG5cblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gICAgdmFsdWU6IHRydWVcbn0pO1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogaW5saW5lZCBPYmplY3QuaXMgcG9seWZpbGwgdG8gYXZvaWQgcmVxdWlyaW5nIGNvbnN1bWVycyBzaGlwIHRoZWlyIG93blxuICogaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvSmF2YVNjcmlwdC9SZWZlcmVuY2UvR2xvYmFsX09iamVjdHMvT2JqZWN0L2lzXG4gKi9cbmZ1bmN0aW9uIGlzKHgsIHkpIHtcbiAgICAvLyBTYW1lVmFsdWUgYWxnb3JpdGhtXG4gICAgaWYgKHggPT09IHkpIHtcbiAgICAgICAgLy8gU3RlcHMgMS01LCA3LTEwXG4gICAgICAgIC8vIFN0ZXBzIDYuYi02LmU6ICswICE9IC0wXG4gICAgICAgIC8vIEFkZGVkIHRoZSBub256ZXJvIHkgY2hlY2sgdG8gbWFrZSBGbG93IGhhcHB5LCBidXQgaXQgaXMgcmVkdW5kYW50XG4gICAgICAgIHJldHVybiB4ICE9PSAwIHx8IHkgIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFN0ZXAgNi5hOiBOYU4gPT0gTmFOXG4gICAgICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gICAgfVxufVxuXG4vKipcbiAqIFBlcmZvcm1zIGVxdWFsaXR5IGJ5IGl0ZXJhdGluZyB0aHJvdWdoIGtleXMgb24gYW4gb2JqZWN0IGFuZCByZXR1cm5pbmcgZmFsc2VcbiAqIHdoZW4gYW55IGtleSBoYXMgdmFsdWVzIHdoaWNoIGFyZSBub3Qgc3RyaWN0bHkgZXF1YWwgYmV0d2VlbiB0aGUgYXJndW1lbnRzLlxuICogUmV0dXJucyB0cnVlIHdoZW4gdGhlIHZhbHVlcyBvZiBhbGwga2V5cyBhcmUgc3RyaWN0bHkgZXF1YWwuXG4gKi9cbmZ1bmN0aW9uIHNoYWxsb3dFcXVhbChvYmpBLCBvYmpCKSB7XG4gICAgaWYgKGlzKG9iakEsIG9iakIpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmICgodHlwZW9mIG9iakEgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iakEpKSAhPT0gJ29iamVjdCcgfHwgb2JqQSA9PT0gbnVsbCB8fCAodHlwZW9mIG9iakIgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9iakIpKSAhPT0gJ29iamVjdCcgfHwgb2JqQiA9PT0gbnVsbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIGtleXNBID0gT2JqZWN0LmtleXMob2JqQSk7XG4gICAgdmFyIGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWhhc093blByb3BlcnR5LmNhbGwob2JqQiwga2V5c0FbaV0pIHx8ICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pKSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0cy5kZWZhdWx0ID0gc2hhbGxvd0VxdWFsO1xuXG4vKioqLyB9KSxcbi8qIDExICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblwidXNlIHN0cmljdFwiO1xuXG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICAgIHZhbHVlOiB0cnVlXG59KTtcblxudmFyIF9pbmRleCA9IF9fd2VicGFja19yZXF1aXJlX18oNSk7XG5cbk9iamVjdC5rZXlzKF9pbmRleCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgaWYgKGtleSA9PT0gXCJkZWZhdWx0XCIgfHwga2V5ID09PSBcIl9fZXNNb2R1bGVcIikgcmV0dXJuO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHtcbiAgICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2luZGV4W2tleV07XG4gICAgICAgIH1cbiAgICB9KTtcbn0pO1xuXG5cbigwLCBfaW5kZXguY2hhbmdlV2ViQ29tcG9uZW50c1JlYWR5Q2hlY2spKGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoJ2N1c3RvbUVsZW1lbnRzJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgICByZXR1cm4gbmV3IFByb21pc2UoKSA8IG51bGwgPiBmdW5jdGlvbiAocmVzb2x2ZSkge1xuICAgICAgICBfX3dlYnBhY2tfcmVxdWlyZV9fKDEyKS50aGVuKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdXZWJDb21wb25lbnRzUmVhZHknLCByZXNvbHZlKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbn0pO1xuXG4vKioqLyB9KSxcbi8qIDEyICovXG4vKioqLyAoZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cbihmdW5jdGlvbigpe1xuJ3VzZSBzdHJpY3QnO3ZhciBoPW5ldyBmdW5jdGlvbigpe307dmFyIGFhPW5ldyBTZXQoXCJhbm5vdGF0aW9uLXhtbCBjb2xvci1wcm9maWxlIGZvbnQtZmFjZSBmb250LWZhY2Utc3JjIGZvbnQtZmFjZS11cmkgZm9udC1mYWNlLWZvcm1hdCBmb250LWZhY2UtbmFtZSBtaXNzaW5nLWdseXBoXCIuc3BsaXQoXCIgXCIpKTtmdW5jdGlvbiBtKGIpe3ZhciBhPWFhLmhhcyhiKTtiPS9eW2Etel1bLjAtOV9hLXpdKi1bXFwtLjAtOV9hLXpdKiQvLnRlc3QoYik7cmV0dXJuIWEmJmJ9ZnVuY3Rpb24gbihiKXt2YXIgYT1iLmlzQ29ubmVjdGVkO2lmKHZvaWQgMCE9PWEpcmV0dXJuIGE7Zm9yKDtiJiYhKGIuX19DRV9pc0ltcG9ydERvY3VtZW50fHxiIGluc3RhbmNlb2YgRG9jdW1lbnQpOyliPWIucGFyZW50Tm9kZXx8KHdpbmRvdy5TaGFkb3dSb290JiZiIGluc3RhbmNlb2YgU2hhZG93Um9vdD9iLmhvc3Q6dm9pZCAwKTtyZXR1cm4hKCFifHwhKGIuX19DRV9pc0ltcG9ydERvY3VtZW50fHxiIGluc3RhbmNlb2YgRG9jdW1lbnQpKX1cbmZ1bmN0aW9uIHAoYixhKXtmb3IoO2EmJmEhPT1iJiYhYS5uZXh0U2libGluZzspYT1hLnBhcmVudE5vZGU7cmV0dXJuIGEmJmEhPT1iP2EubmV4dFNpYmxpbmc6bnVsbH1cbmZ1bmN0aW9uIHQoYixhLGMpe2M9Yz9jOm5ldyBTZXQ7Zm9yKHZhciBkPWI7ZDspe2lmKGQubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSl7dmFyIGU9ZDthKGUpO3ZhciBmPWUubG9jYWxOYW1lO2lmKFwibGlua1wiPT09ZiYmXCJpbXBvcnRcIj09PWUuZ2V0QXR0cmlidXRlKFwicmVsXCIpKXtkPWUuaW1wb3J0O2lmKGQgaW5zdGFuY2VvZiBOb2RlJiYhYy5oYXMoZCkpZm9yKGMuYWRkKGQpLGQ9ZC5maXJzdENoaWxkO2Q7ZD1kLm5leHRTaWJsaW5nKXQoZCxhLGMpO2Q9cChiLGUpO2NvbnRpbnVlfWVsc2UgaWYoXCJ0ZW1wbGF0ZVwiPT09Zil7ZD1wKGIsZSk7Y29udGludWV9aWYoZT1lLl9fQ0Vfc2hhZG93Um9vdClmb3IoZT1lLmZpcnN0Q2hpbGQ7ZTtlPWUubmV4dFNpYmxpbmcpdChlLGEsYyl9ZD1kLmZpcnN0Q2hpbGQ/ZC5maXJzdENoaWxkOnAoYixkKX19ZnVuY3Rpb24gdShiLGEsYyl7YlthXT1jfTtmdW5jdGlvbiB2KCl7dGhpcy5hPW5ldyBNYXA7dGhpcy5zPW5ldyBNYXA7dGhpcy5mPVtdO3RoaXMuYj0hMX1mdW5jdGlvbiBiYShiLGEsYyl7Yi5hLnNldChhLGMpO2Iucy5zZXQoYy5jb25zdHJ1Y3RvcixjKX1mdW5jdGlvbiB3KGIsYSl7Yi5iPSEwO2IuZi5wdXNoKGEpfWZ1bmN0aW9uIHgoYixhKXtiLmImJnQoYSxmdW5jdGlvbihhKXtyZXR1cm4geShiLGEpfSl9ZnVuY3Rpb24geShiLGEpe2lmKGIuYiYmIWEuX19DRV9wYXRjaGVkKXthLl9fQ0VfcGF0Y2hlZD0hMDtmb3IodmFyIGM9MDtjPGIuZi5sZW5ndGg7YysrKWIuZltjXShhKX19ZnVuY3Rpb24geihiLGEpe3ZhciBjPVtdO3QoYSxmdW5jdGlvbihiKXtyZXR1cm4gYy5wdXNoKGIpfSk7Zm9yKGE9MDthPGMubGVuZ3RoO2ErKyl7dmFyIGQ9Y1thXTsxPT09ZC5fX0NFX3N0YXRlP2IuY29ubmVjdGVkQ2FsbGJhY2soZCk6QShiLGQpfX1cbmZ1bmN0aW9uIEIoYixhKXt2YXIgYz1bXTt0KGEsZnVuY3Rpb24oYil7cmV0dXJuIGMucHVzaChiKX0pO2ZvcihhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07MT09PWQuX19DRV9zdGF0ZSYmYi5kaXNjb25uZWN0ZWRDYWxsYmFjayhkKX19XG5mdW5jdGlvbiBDKGIsYSxjKXtjPWM/Yzp7fTt2YXIgZD1jLnd8fG5ldyBTZXQsZT1jLml8fGZ1bmN0aW9uKGEpe3JldHVybiBBKGIsYSl9LGY9W107dChhLGZ1bmN0aW9uKGEpe2lmKFwibGlua1wiPT09YS5sb2NhbE5hbWUmJlwiaW1wb3J0XCI9PT1hLmdldEF0dHJpYnV0ZShcInJlbFwiKSl7dmFyIGM9YS5pbXBvcnQ7YyBpbnN0YW5jZW9mIE5vZGUmJihjLl9fQ0VfaXNJbXBvcnREb2N1bWVudD0hMCxjLl9fQ0VfaGFzUmVnaXN0cnk9ITApO2MmJlwiY29tcGxldGVcIj09PWMucmVhZHlTdGF0ZT9jLl9fQ0VfZG9jdW1lbnRMb2FkSGFuZGxlZD0hMDphLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsZnVuY3Rpb24oKXt2YXIgYz1hLmltcG9ydDtpZighYy5fX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQpe2MuX19DRV9kb2N1bWVudExvYWRIYW5kbGVkPSEwO3ZhciBmPW5ldyBTZXQoZCk7Zi5kZWxldGUoYyk7QyhiLGMse3c6ZixpOmV9KX19KX1lbHNlIGYucHVzaChhKX0sZCk7aWYoYi5iKWZvcihhPTA7YTxcbmYubGVuZ3RoO2ErKyl5KGIsZlthXSk7Zm9yKGE9MDthPGYubGVuZ3RoO2ErKyllKGZbYV0pfVxuZnVuY3Rpb24gQShiLGEpe2lmKHZvaWQgMD09PWEuX19DRV9zdGF0ZSl7dmFyIGM9YS5vd25lckRvY3VtZW50O2lmKGMuZGVmYXVsdFZpZXd8fGMuX19DRV9pc0ltcG9ydERvY3VtZW50JiZjLl9fQ0VfaGFzUmVnaXN0cnkpaWYoYz1iLmEuZ2V0KGEubG9jYWxOYW1lKSl7Yy5jb25zdHJ1Y3Rpb25TdGFjay5wdXNoKGEpO3ZhciBkPWMuY29uc3RydWN0b3I7dHJ5e3RyeXtpZihuZXcgZCE9PWEpdGhyb3cgRXJyb3IoXCJUaGUgY3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3IgZGlkIG5vdCBwcm9kdWNlIHRoZSBlbGVtZW50IGJlaW5nIHVwZ3JhZGVkLlwiKTt9ZmluYWxseXtjLmNvbnN0cnVjdGlvblN0YWNrLnBvcCgpfX1jYXRjaChyKXt0aHJvdyBhLl9fQ0Vfc3RhdGU9MixyO31hLl9fQ0Vfc3RhdGU9MTthLl9fQ0VfZGVmaW5pdGlvbj1jO2lmKGMuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKWZvcihjPWMub2JzZXJ2ZWRBdHRyaWJ1dGVzLGQ9MDtkPGMubGVuZ3RoO2QrKyl7dmFyIGU9Y1tkXSxcbmY9YS5nZXRBdHRyaWJ1dGUoZSk7bnVsbCE9PWYmJmIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGEsZSxudWxsLGYsbnVsbCl9bihhKSYmYi5jb25uZWN0ZWRDYWxsYmFjayhhKX19fXYucHJvdG90eXBlLmNvbm5lY3RlZENhbGxiYWNrPWZ1bmN0aW9uKGIpe3ZhciBhPWIuX19DRV9kZWZpbml0aW9uO2EuY29ubmVjdGVkQ2FsbGJhY2smJmEuY29ubmVjdGVkQ2FsbGJhY2suY2FsbChiKX07di5wcm90b3R5cGUuZGlzY29ubmVjdGVkQ2FsbGJhY2s9ZnVuY3Rpb24oYil7dmFyIGE9Yi5fX0NFX2RlZmluaXRpb247YS5kaXNjb25uZWN0ZWRDYWxsYmFjayYmYS5kaXNjb25uZWN0ZWRDYWxsYmFjay5jYWxsKGIpfTtcbnYucHJvdG90eXBlLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaz1mdW5jdGlvbihiLGEsYyxkLGUpe3ZhciBmPWIuX19DRV9kZWZpbml0aW9uO2YuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrJiYtMTxmLm9ic2VydmVkQXR0cmlidXRlcy5pbmRleE9mKGEpJiZmLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjay5jYWxsKGIsYSxjLGQsZSl9O2Z1bmN0aW9uIEQoYixhKXt0aGlzLmM9Yjt0aGlzLmE9YTt0aGlzLmI9dm9pZCAwO0ModGhpcy5jLHRoaXMuYSk7XCJsb2FkaW5nXCI9PT10aGlzLmEucmVhZHlTdGF0ZSYmKHRoaXMuYj1uZXcgTXV0YXRpb25PYnNlcnZlcih0aGlzLmYuYmluZCh0aGlzKSksdGhpcy5iLm9ic2VydmUodGhpcy5hLHtjaGlsZExpc3Q6ITAsc3VidHJlZTohMH0pKX1mdW5jdGlvbiBFKGIpe2IuYiYmYi5iLmRpc2Nvbm5lY3QoKX1ELnByb3RvdHlwZS5mPWZ1bmN0aW9uKGIpe3ZhciBhPXRoaXMuYS5yZWFkeVN0YXRlO1wiaW50ZXJhY3RpdmVcIiE9PWEmJlwiY29tcGxldGVcIiE9PWF8fEUodGhpcyk7Zm9yKGE9MDthPGIubGVuZ3RoO2ErKylmb3IodmFyIGM9YlthXS5hZGRlZE5vZGVzLGQ9MDtkPGMubGVuZ3RoO2QrKylDKHRoaXMuYyxjW2RdKX07ZnVuY3Rpb24gY2EoKXt2YXIgYj10aGlzO3RoaXMuYj10aGlzLmE9dm9pZCAwO3RoaXMuZj1uZXcgUHJvbWlzZShmdW5jdGlvbihhKXtiLmI9YTtiLmEmJmEoYi5hKX0pfWZ1bmN0aW9uIEYoYil7aWYoYi5hKXRocm93IEVycm9yKFwiQWxyZWFkeSByZXNvbHZlZC5cIik7Yi5hPXZvaWQgMDtiLmImJmIuYih2b2lkIDApfTtmdW5jdGlvbiBHKGIpe3RoaXMuaj0hMTt0aGlzLmM9Yjt0aGlzLm89bmV3IE1hcDt0aGlzLmw9ZnVuY3Rpb24oYil7cmV0dXJuIGIoKX07dGhpcy5nPSExO3RoaXMubT1bXTt0aGlzLnU9bmV3IEQoYixkb2N1bWVudCl9XG5HLnByb3RvdHlwZS5kZWZpbmU9ZnVuY3Rpb24oYixhKXt2YXIgYz10aGlzO2lmKCEoYSBpbnN0YW5jZW9mIEZ1bmN0aW9uKSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3JzIG11c3QgYmUgZnVuY3Rpb25zLlwiKTtpZighbShiKSl0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgZWxlbWVudCBuYW1lICdcIitiK1wiJyBpcyBub3QgdmFsaWQuXCIpO2lmKHRoaXMuYy5hLmdldChiKSl0aHJvdyBFcnJvcihcIkEgY3VzdG9tIGVsZW1lbnQgd2l0aCBuYW1lICdcIitiK1wiJyBoYXMgYWxyZWFkeSBiZWVuIGRlZmluZWQuXCIpO2lmKHRoaXMuail0aHJvdyBFcnJvcihcIkEgY3VzdG9tIGVsZW1lbnQgaXMgYWxyZWFkeSBiZWluZyBkZWZpbmVkLlwiKTt0aGlzLmo9ITA7dmFyIGQsZSxmLHIsazt0cnl7dmFyIGc9ZnVuY3Rpb24oYil7dmFyIGE9bFtiXTtpZih2b2lkIDAhPT1hJiYhKGEgaW5zdGFuY2VvZiBGdW5jdGlvbikpdGhyb3cgRXJyb3IoXCJUaGUgJ1wiK2IrXCInIGNhbGxiYWNrIG11c3QgYmUgYSBmdW5jdGlvbi5cIik7XG5yZXR1cm4gYX0sbD1hLnByb3RvdHlwZTtpZighKGwgaW5zdGFuY2VvZiBPYmplY3QpKXRocm93IG5ldyBUeXBlRXJyb3IoXCJUaGUgY3VzdG9tIGVsZW1lbnQgY29uc3RydWN0b3IncyBwcm90b3R5cGUgaXMgbm90IGFuIG9iamVjdC5cIik7ZD1nKFwiY29ubmVjdGVkQ2FsbGJhY2tcIik7ZT1nKFwiZGlzY29ubmVjdGVkQ2FsbGJhY2tcIik7Zj1nKFwiYWRvcHRlZENhbGxiYWNrXCIpO3I9ZyhcImF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja1wiKTtrPWEub2JzZXJ2ZWRBdHRyaWJ1dGVzfHxbXX1jYXRjaChxKXtyZXR1cm59ZmluYWxseXt0aGlzLmo9ITF9YT17bG9jYWxOYW1lOmIsY29uc3RydWN0b3I6YSxjb25uZWN0ZWRDYWxsYmFjazpkLGRpc2Nvbm5lY3RlZENhbGxiYWNrOmUsYWRvcHRlZENhbGxiYWNrOmYsYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrOnIsb2JzZXJ2ZWRBdHRyaWJ1dGVzOmssY29uc3RydWN0aW9uU3RhY2s6W119O2JhKHRoaXMuYyxiLGEpO3RoaXMubS5wdXNoKGEpO3RoaXMuZ3x8XG4odGhpcy5nPSEwLHRoaXMubChmdW5jdGlvbigpe3JldHVybiBkYShjKX0pKX07Ry5wcm90b3R5cGUuaT1mdW5jdGlvbihiKXtDKHRoaXMuYyxiKX07ZnVuY3Rpb24gZGEoYil7aWYoITEhPT1iLmcpe2IuZz0hMTtmb3IodmFyIGE9Yi5tLGM9W10sZD1uZXcgTWFwLGU9MDtlPGEubGVuZ3RoO2UrKylkLnNldChhW2VdLmxvY2FsTmFtZSxbXSk7QyhiLmMsZG9jdW1lbnQse2k6ZnVuY3Rpb24oYSl7aWYodm9pZCAwPT09YS5fX0NFX3N0YXRlKXt2YXIgZT1hLmxvY2FsTmFtZSxmPWQuZ2V0KGUpO2Y/Zi5wdXNoKGEpOmIuYy5hLmdldChlKSYmYy5wdXNoKGEpfX19KTtmb3IoZT0wO2U8Yy5sZW5ndGg7ZSsrKUEoYi5jLGNbZV0pO2Zvcig7MDxhLmxlbmd0aDspe2Zvcih2YXIgZj1hLnNoaWZ0KCksZT1mLmxvY2FsTmFtZSxmPWQuZ2V0KGYubG9jYWxOYW1lKSxyPTA7cjxmLmxlbmd0aDtyKyspQShiLmMsZltyXSk7KGU9Yi5vLmdldChlKSkmJkYoZSl9fX1cbkcucHJvdG90eXBlLmdldD1mdW5jdGlvbihiKXtpZihiPXRoaXMuYy5hLmdldChiKSlyZXR1cm4gYi5jb25zdHJ1Y3Rvcn07Ry5wcm90b3R5cGUud2hlbkRlZmluZWQ9ZnVuY3Rpb24oYil7aWYoIW0oYikpcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBTeW50YXhFcnJvcihcIidcIitiK1wiJyBpcyBub3QgYSB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lLlwiKSk7dmFyIGE9dGhpcy5vLmdldChiKTtpZihhKXJldHVybiBhLmY7YT1uZXcgY2E7dGhpcy5vLnNldChiLGEpO3RoaXMuYy5hLmdldChiKSYmIXRoaXMubS5zb21lKGZ1bmN0aW9uKGEpe3JldHVybiBhLmxvY2FsTmFtZT09PWJ9KSYmRihhKTtyZXR1cm4gYS5mfTtHLnByb3RvdHlwZS52PWZ1bmN0aW9uKGIpe0UodGhpcy51KTt2YXIgYT10aGlzLmw7dGhpcy5sPWZ1bmN0aW9uKGMpe3JldHVybiBiKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYyl9KX19O3dpbmRvdy5DdXN0b21FbGVtZW50UmVnaXN0cnk9RztcbkcucHJvdG90eXBlLmRlZmluZT1HLnByb3RvdHlwZS5kZWZpbmU7Ry5wcm90b3R5cGUudXBncmFkZT1HLnByb3RvdHlwZS5pO0cucHJvdG90eXBlLmdldD1HLnByb3RvdHlwZS5nZXQ7Ry5wcm90b3R5cGUud2hlbkRlZmluZWQ9Ry5wcm90b3R5cGUud2hlbkRlZmluZWQ7Ry5wcm90b3R5cGUucG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjaz1HLnByb3RvdHlwZS52O3ZhciBIPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudCxJPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuY3JlYXRlRWxlbWVudE5TLGVhPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuaW1wb3J0Tm9kZSxmYT13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLnByZXBlbmQsZ2E9d2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5hcHBlbmQsaGE9d2luZG93LkRvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLnByZXBlbmQsaWE9d2luZG93LkRvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLmFwcGVuZCxKPXdpbmRvdy5Ob2RlLnByb3RvdHlwZS5jbG9uZU5vZGUsSz13aW5kb3cuTm9kZS5wcm90b3R5cGUuYXBwZW5kQ2hpbGQsTD13aW5kb3cuTm9kZS5wcm90b3R5cGUuaW5zZXJ0QmVmb3JlLE09d2luZG93Lk5vZGUucHJvdG90eXBlLnJlbW92ZUNoaWxkLE49d2luZG93Lk5vZGUucHJvdG90eXBlLnJlcGxhY2VDaGlsZCxPPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iod2luZG93Lk5vZGUucHJvdG90eXBlLFxuXCJ0ZXh0Q29udGVudFwiKSxQPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5hdHRhY2hTaGFkb3csUT1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdy5FbGVtZW50LnByb3RvdHlwZSxcImlubmVySFRNTFwiKSxSPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGUsUz13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlLFQ9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZSxVPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5nZXRBdHRyaWJ1dGVOUyxqYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuc2V0QXR0cmlidXRlTlMsa2E9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlbW92ZUF0dHJpYnV0ZU5TLGxhPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5pbnNlcnRBZGphY2VudEVsZW1lbnQsbWE9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmluc2VydEFkamFjZW50SFRNTCxuYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucHJlcGVuZCxcbm9hPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5hcHBlbmQsVj13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYmVmb3JlLHBhPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5hZnRlcixxYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUucmVwbGFjZVdpdGgscmE9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlbW92ZSxzYT13aW5kb3cuSFRNTEVsZW1lbnQsVz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdy5IVE1MRWxlbWVudC5wcm90b3R5cGUsXCJpbm5lckhUTUxcIiksdGE9d2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZS5pbnNlcnRBZGphY2VudEVsZW1lbnQsdWE9d2luZG93LkhUTUxFbGVtZW50LnByb3RvdHlwZS5pbnNlcnRBZGphY2VudEhUTUw7ZnVuY3Rpb24gdmEoKXt2YXIgYj1YO3dpbmRvdy5IVE1MRWxlbWVudD1mdW5jdGlvbigpe2Z1bmN0aW9uIGEoKXt2YXIgYT10aGlzLmNvbnN0cnVjdG9yLGQ9Yi5zLmdldChhKTtpZighZCl0aHJvdyBFcnJvcihcIlRoZSBjdXN0b20gZWxlbWVudCBiZWluZyBjb25zdHJ1Y3RlZCB3YXMgbm90IHJlZ2lzdGVyZWQgd2l0aCBgY3VzdG9tRWxlbWVudHNgLlwiKTt2YXIgZT1kLmNvbnN0cnVjdGlvblN0YWNrO2lmKCFlLmxlbmd0aClyZXR1cm4gZT1ILmNhbGwoZG9jdW1lbnQsZC5sb2NhbE5hbWUpLE9iamVjdC5zZXRQcm90b3R5cGVPZihlLGEucHJvdG90eXBlKSxlLl9fQ0Vfc3RhdGU9MSxlLl9fQ0VfZGVmaW5pdGlvbj1kLHkoYixlKSxlO3ZhciBkPWUubGVuZ3RoLTEsZj1lW2RdO2lmKGY9PT1oKXRocm93IEVycm9yKFwiVGhlIEhUTUxFbGVtZW50IGNvbnN0cnVjdG9yIHdhcyBlaXRoZXIgY2FsbGVkIHJlZW50cmFudGx5IGZvciB0aGlzIGNvbnN0cnVjdG9yIG9yIGNhbGxlZCBtdWx0aXBsZSB0aW1lcy5cIik7XG5lW2RdPWg7T2JqZWN0LnNldFByb3RvdHlwZU9mKGYsYS5wcm90b3R5cGUpO3koYixmKTtyZXR1cm4gZn1hLnByb3RvdHlwZT1zYS5wcm90b3R5cGU7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEucHJvdG90eXBlLFwiY29uc3RydWN0b3JcIix7d3JpdGFibGU6ITAsY29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITEsdmFsdWU6YX0pO3JldHVybiBhfSgpfTtmdW5jdGlvbiBZKGIsYSxjKXtmdW5jdGlvbiBkKGEpe3JldHVybiBmdW5jdGlvbihjKXtmb3IodmFyIGU9W10sZD0wO2Q8YXJndW1lbnRzLmxlbmd0aDsrK2QpZVtkLTBdPWFyZ3VtZW50c1tkXTtmb3IodmFyIGQ9W10sZj1bXSxsPTA7bDxlLmxlbmd0aDtsKyspe3ZhciBxPWVbbF07cSBpbnN0YW5jZW9mIEVsZW1lbnQmJm4ocSkmJmYucHVzaChxKTtpZihxIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudClmb3IocT1xLmZpcnN0Q2hpbGQ7cTtxPXEubmV4dFNpYmxpbmcpZC5wdXNoKHEpO2Vsc2UgZC5wdXNoKHEpfWEuYXBwbHkodGhpcyxlKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSsrKUIoYixmW2VdKTtpZihuKHRoaXMpKWZvcihlPTA7ZTxkLmxlbmd0aDtlKyspZj1kW2VdLGYgaW5zdGFuY2VvZiBFbGVtZW50JiZ6KGIsZil9fWMuaCYmKGEucHJlcGVuZD1kKGMuaCkpO2MuYXBwZW5kJiYoYS5hcHBlbmQ9ZChjLmFwcGVuZCkpfTtmdW5jdGlvbiB3YSgpe3ZhciBiPVg7dShEb2N1bWVudC5wcm90b3R5cGUsXCJjcmVhdGVFbGVtZW50XCIsZnVuY3Rpb24oYSl7aWYodGhpcy5fX0NFX2hhc1JlZ2lzdHJ5KXt2YXIgYz1iLmEuZ2V0KGEpO2lmKGMpcmV0dXJuIG5ldyBjLmNvbnN0cnVjdG9yfWE9SC5jYWxsKHRoaXMsYSk7eShiLGEpO3JldHVybiBhfSk7dShEb2N1bWVudC5wcm90b3R5cGUsXCJpbXBvcnROb2RlXCIsZnVuY3Rpb24oYSxjKXthPWVhLmNhbGwodGhpcyxhLGMpO3RoaXMuX19DRV9oYXNSZWdpc3RyeT9DKGIsYSk6eChiLGEpO3JldHVybiBhfSk7dShEb2N1bWVudC5wcm90b3R5cGUsXCJjcmVhdGVFbGVtZW50TlNcIixmdW5jdGlvbihhLGMpe2lmKHRoaXMuX19DRV9oYXNSZWdpc3RyeSYmKG51bGw9PT1hfHxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIj09PWEpKXt2YXIgZD1iLmEuZ2V0KGMpO2lmKGQpcmV0dXJuIG5ldyBkLmNvbnN0cnVjdG9yfWE9SS5jYWxsKHRoaXMsYSxjKTt5KGIsYSk7cmV0dXJuIGF9KTtcblkoYixEb2N1bWVudC5wcm90b3R5cGUse2g6ZmEsYXBwZW5kOmdhfSl9O2Z1bmN0aW9uIHhhKCl7dmFyIGI9WDtmdW5jdGlvbiBhKGEsZCl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsXCJ0ZXh0Q29udGVudFwiLHtlbnVtZXJhYmxlOmQuZW51bWVyYWJsZSxjb25maWd1cmFibGU6ITAsZ2V0OmQuZ2V0LHNldDpmdW5jdGlvbihhKXtpZih0aGlzLm5vZGVUeXBlPT09Tm9kZS5URVhUX05PREUpZC5zZXQuY2FsbCh0aGlzLGEpO2Vsc2V7dmFyIGU9dm9pZCAwO2lmKHRoaXMuZmlyc3RDaGlsZCl7dmFyIGM9dGhpcy5jaGlsZE5vZGVzLGs9Yy5sZW5ndGg7aWYoMDxrJiZuKHRoaXMpKWZvcih2YXIgZT1BcnJheShrKSxnPTA7ZzxrO2crKyllW2ddPWNbZ119ZC5zZXQuY2FsbCh0aGlzLGEpO2lmKGUpZm9yKGE9MDthPGUubGVuZ3RoO2ErKylCKGIsZVthXSl9fX0pfXUoTm9kZS5wcm90b3R5cGUsXCJpbnNlcnRCZWZvcmVcIixmdW5jdGlvbihhLGQpe2lmKGEgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYS5jaGlsZE5vZGVzKTtcbmE9TC5jYWxsKHRoaXMsYSxkKTtpZihuKHRoaXMpKWZvcihkPTA7ZDxlLmxlbmd0aDtkKyspeihiLGVbZF0pO3JldHVybiBhfWU9bihhKTtkPUwuY2FsbCh0aGlzLGEsZCk7ZSYmQihiLGEpO24odGhpcykmJnooYixhKTtyZXR1cm4gZH0pO3UoTm9kZS5wcm90b3R5cGUsXCJhcHBlbmRDaGlsZFwiLGZ1bmN0aW9uKGEpe2lmKGEgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYS5jaGlsZE5vZGVzKTthPUsuY2FsbCh0aGlzLGEpO2lmKG4odGhpcykpZm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspeihiLGNbZV0pO3JldHVybiBhfWM9bihhKTtlPUsuY2FsbCh0aGlzLGEpO2MmJkIoYixhKTtuKHRoaXMpJiZ6KGIsYSk7cmV0dXJuIGV9KTt1KE5vZGUucHJvdG90eXBlLFwiY2xvbmVOb2RlXCIsZnVuY3Rpb24oYSl7YT1KLmNhbGwodGhpcyxhKTt0aGlzLm93bmVyRG9jdW1lbnQuX19DRV9oYXNSZWdpc3RyeT9DKGIsYSk6eChiLGEpO1xucmV0dXJuIGF9KTt1KE5vZGUucHJvdG90eXBlLFwicmVtb3ZlQ2hpbGRcIixmdW5jdGlvbihhKXt2YXIgYz1uKGEpLGU9TS5jYWxsKHRoaXMsYSk7YyYmQihiLGEpO3JldHVybiBlfSk7dShOb2RlLnByb3RvdHlwZSxcInJlcGxhY2VDaGlsZFwiLGZ1bmN0aW9uKGEsZCl7aWYoYSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpe3ZhciBlPUFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShhLmNoaWxkTm9kZXMpO2E9Ti5jYWxsKHRoaXMsYSxkKTtpZihuKHRoaXMpKWZvcihCKGIsZCksZD0wO2Q8ZS5sZW5ndGg7ZCsrKXooYixlW2RdKTtyZXR1cm4gYX12YXIgZT1uKGEpLGY9Ti5jYWxsKHRoaXMsYSxkKSxjPW4odGhpcyk7YyYmQihiLGQpO2UmJkIoYixhKTtjJiZ6KGIsYSk7cmV0dXJuIGZ9KTtPJiZPLmdldD9hKE5vZGUucHJvdG90eXBlLE8pOncoYixmdW5jdGlvbihiKXthKGIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe2Zvcih2YXIgYT1bXSxiPVxuMDtiPHRoaXMuY2hpbGROb2Rlcy5sZW5ndGg7YisrKWEucHVzaCh0aGlzLmNoaWxkTm9kZXNbYl0udGV4dENvbnRlbnQpO3JldHVybiBhLmpvaW4oXCJcIil9LHNldDpmdW5jdGlvbihhKXtmb3IoO3RoaXMuZmlyc3RDaGlsZDspTS5jYWxsKHRoaXMsdGhpcy5maXJzdENoaWxkKTtLLmNhbGwodGhpcyxkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShhKSl9fSl9KX07ZnVuY3Rpb24geWEoYil7dmFyIGE9RWxlbWVudC5wcm90b3R5cGU7ZnVuY3Rpb24gYyhhKXtyZXR1cm4gZnVuY3Rpb24oZSl7Zm9yKHZhciBjPVtdLGQ9MDtkPGFyZ3VtZW50cy5sZW5ndGg7KytkKWNbZC0wXT1hcmd1bWVudHNbZF07Zm9yKHZhciBkPVtdLGs9W10sZz0wO2c8Yy5sZW5ndGg7ZysrKXt2YXIgbD1jW2ddO2wgaW5zdGFuY2VvZiBFbGVtZW50JiZuKGwpJiZrLnB1c2gobCk7aWYobCBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpZm9yKGw9bC5maXJzdENoaWxkO2w7bD1sLm5leHRTaWJsaW5nKWQucHVzaChsKTtlbHNlIGQucHVzaChsKX1hLmFwcGx5KHRoaXMsYyk7Zm9yKGM9MDtjPGsubGVuZ3RoO2MrKylCKGIsa1tjXSk7aWYobih0aGlzKSlmb3IoYz0wO2M8ZC5sZW5ndGg7YysrKWs9ZFtjXSxrIGluc3RhbmNlb2YgRWxlbWVudCYmeihiLGspfX1WJiYoYS5iZWZvcmU9YyhWKSk7ViYmKGEuYWZ0ZXI9YyhwYSkpO3FhJiZ1KGEsXCJyZXBsYWNlV2l0aFwiLGZ1bmN0aW9uKGEpe2Zvcih2YXIgZT1cbltdLGM9MDtjPGFyZ3VtZW50cy5sZW5ndGg7KytjKWVbYy0wXT1hcmd1bWVudHNbY107Zm9yKHZhciBjPVtdLGQ9W10saz0wO2s8ZS5sZW5ndGg7aysrKXt2YXIgZz1lW2tdO2cgaW5zdGFuY2VvZiBFbGVtZW50JiZuKGcpJiZkLnB1c2goZyk7aWYoZyBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpZm9yKGc9Zy5maXJzdENoaWxkO2c7Zz1nLm5leHRTaWJsaW5nKWMucHVzaChnKTtlbHNlIGMucHVzaChnKX1rPW4odGhpcyk7cWEuYXBwbHkodGhpcyxlKTtmb3IoZT0wO2U8ZC5sZW5ndGg7ZSsrKUIoYixkW2VdKTtpZihrKWZvcihCKGIsdGhpcyksZT0wO2U8Yy5sZW5ndGg7ZSsrKWQ9Y1tlXSxkIGluc3RhbmNlb2YgRWxlbWVudCYmeihiLGQpfSk7cmEmJnUoYSxcInJlbW92ZVwiLGZ1bmN0aW9uKCl7dmFyIGE9bih0aGlzKTtyYS5jYWxsKHRoaXMpO2EmJkIoYix0aGlzKX0pfTtmdW5jdGlvbiB6YSgpe3ZhciBiPVg7ZnVuY3Rpb24gYShhLGMpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwiaW5uZXJIVE1MXCIse2VudW1lcmFibGU6Yy5lbnVtZXJhYmxlLGNvbmZpZ3VyYWJsZTohMCxnZXQ6Yy5nZXQsc2V0OmZ1bmN0aW9uKGEpe3ZhciBlPXRoaXMsZD12b2lkIDA7bih0aGlzKSYmKGQ9W10sdCh0aGlzLGZ1bmN0aW9uKGEpe2EhPT1lJiZkLnB1c2goYSl9KSk7Yy5zZXQuY2FsbCh0aGlzLGEpO2lmKGQpZm9yKHZhciBmPTA7ZjxkLmxlbmd0aDtmKyspe3ZhciByPWRbZl07MT09PXIuX19DRV9zdGF0ZSYmYi5kaXNjb25uZWN0ZWRDYWxsYmFjayhyKX10aGlzLm93bmVyRG9jdW1lbnQuX19DRV9oYXNSZWdpc3RyeT9DKGIsdGhpcyk6eChiLHRoaXMpO3JldHVybiBhfX0pfWZ1bmN0aW9uIGMoYSxjKXt1KGEsXCJpbnNlcnRBZGphY2VudEVsZW1lbnRcIixmdW5jdGlvbihhLGUpe3ZhciBkPW4oZSk7YT1jLmNhbGwodGhpcyxhLGUpO2QmJkIoYixlKTtuKGEpJiZ6KGIsZSk7XG5yZXR1cm4gYX0pfWZ1bmN0aW9uIGQoYSxjKXtmdW5jdGlvbiBlKGEsZSl7Zm9yKHZhciBjPVtdO2EhPT1lO2E9YS5uZXh0U2libGluZyljLnB1c2goYSk7Zm9yKGU9MDtlPGMubGVuZ3RoO2UrKylDKGIsY1tlXSl9dShhLFwiaW5zZXJ0QWRqYWNlbnRIVE1MXCIsZnVuY3Rpb24oYSxiKXthPWEudG9Mb3dlckNhc2UoKTtpZihcImJlZm9yZWJlZ2luXCI9PT1hKXt2YXIgZD10aGlzLnByZXZpb3VzU2libGluZztjLmNhbGwodGhpcyxhLGIpO2UoZHx8dGhpcy5wYXJlbnROb2RlLmZpcnN0Q2hpbGQsdGhpcyl9ZWxzZSBpZihcImFmdGVyYmVnaW5cIj09PWEpZD10aGlzLmZpcnN0Q2hpbGQsYy5jYWxsKHRoaXMsYSxiKSxlKHRoaXMuZmlyc3RDaGlsZCxkKTtlbHNlIGlmKFwiYmVmb3JlZW5kXCI9PT1hKWQ9dGhpcy5sYXN0Q2hpbGQsYy5jYWxsKHRoaXMsYSxiKSxlKGR8fHRoaXMuZmlyc3RDaGlsZCxudWxsKTtlbHNlIGlmKFwiYWZ0ZXJlbmRcIj09PWEpZD10aGlzLm5leHRTaWJsaW5nLGMuY2FsbCh0aGlzLFxuYSxiKSxlKHRoaXMubmV4dFNpYmxpbmcsZCk7ZWxzZSB0aHJvdyBuZXcgU3ludGF4RXJyb3IoXCJUaGUgdmFsdWUgcHJvdmlkZWQgKFwiK1N0cmluZyhhKStcIikgaXMgbm90IG9uZSBvZiAnYmVmb3JlYmVnaW4nLCAnYWZ0ZXJiZWdpbicsICdiZWZvcmVlbmQnLCBvciAnYWZ0ZXJlbmQnLlwiKTt9KX1QJiZ1KEVsZW1lbnQucHJvdG90eXBlLFwiYXR0YWNoU2hhZG93XCIsZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXMuX19DRV9zaGFkb3dSb290PWE9UC5jYWxsKHRoaXMsYSl9KTtRJiZRLmdldD9hKEVsZW1lbnQucHJvdG90eXBlLFEpOlcmJlcuZ2V0P2EoSFRNTEVsZW1lbnQucHJvdG90eXBlLFcpOncoYixmdW5jdGlvbihiKXthKGIse2VudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBKLmNhbGwodGhpcywhMCkuaW5uZXJIVE1MfSxzZXQ6ZnVuY3Rpb24oYSl7dmFyIGI9XCJ0ZW1wbGF0ZVwiPT09dGhpcy5sb2NhbE5hbWUsZT1iP3RoaXMuY29udGVudDp0aGlzLFxuYz1JLmNhbGwoZG9jdW1lbnQsdGhpcy5uYW1lc3BhY2VVUkksdGhpcy5sb2NhbE5hbWUpO2ZvcihjLmlubmVySFRNTD1hOzA8ZS5jaGlsZE5vZGVzLmxlbmd0aDspTS5jYWxsKGUsZS5jaGlsZE5vZGVzWzBdKTtmb3IoYT1iP2MuY29udGVudDpjOzA8YS5jaGlsZE5vZGVzLmxlbmd0aDspSy5jYWxsKGUsYS5jaGlsZE5vZGVzWzBdKX19KX0pO3UoRWxlbWVudC5wcm90b3R5cGUsXCJzZXRBdHRyaWJ1dGVcIixmdW5jdGlvbihhLGMpe2lmKDEhPT10aGlzLl9fQ0Vfc3RhdGUpcmV0dXJuIFMuY2FsbCh0aGlzLGEsYyk7dmFyIGU9Ui5jYWxsKHRoaXMsYSk7Uy5jYWxsKHRoaXMsYSxjKTtjPVIuY2FsbCh0aGlzLGEpO2IuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsYSxlLGMsbnVsbCl9KTt1KEVsZW1lbnQucHJvdG90eXBlLFwic2V0QXR0cmlidXRlTlNcIixmdW5jdGlvbihhLGMsZCl7aWYoMSE9PXRoaXMuX19DRV9zdGF0ZSlyZXR1cm4gamEuY2FsbCh0aGlzLGEsYyxkKTt2YXIgZT1VLmNhbGwodGhpcyxcbmEsYyk7amEuY2FsbCh0aGlzLGEsYyxkKTtkPVUuY2FsbCh0aGlzLGEsYyk7Yi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxjLGUsZCxhKX0pO3UoRWxlbWVudC5wcm90b3R5cGUsXCJyZW1vdmVBdHRyaWJ1dGVcIixmdW5jdGlvbihhKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBULmNhbGwodGhpcyxhKTt2YXIgYz1SLmNhbGwodGhpcyxhKTtULmNhbGwodGhpcyxhKTtudWxsIT09YyYmYi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxhLGMsbnVsbCxudWxsKX0pO3UoRWxlbWVudC5wcm90b3R5cGUsXCJyZW1vdmVBdHRyaWJ1dGVOU1wiLGZ1bmN0aW9uKGEsYyl7aWYoMSE9PXRoaXMuX19DRV9zdGF0ZSlyZXR1cm4ga2EuY2FsbCh0aGlzLGEsYyk7dmFyIGQ9VS5jYWxsKHRoaXMsYSxjKTtrYS5jYWxsKHRoaXMsYSxjKTt2YXIgZT1VLmNhbGwodGhpcyxhLGMpO2QhPT1lJiZiLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0aGlzLGMsZCxlLGEpfSk7dGE/YyhIVE1MRWxlbWVudC5wcm90b3R5cGUsXG50YSk6bGE/YyhFbGVtZW50LnByb3RvdHlwZSxsYSk6Y29uc29sZS53YXJuKFwiQ3VzdG9tIEVsZW1lbnRzOiBgRWxlbWVudCNpbnNlcnRBZGphY2VudEVsZW1lbnRgIHdhcyBub3QgcGF0Y2hlZC5cIik7dWE/ZChIVE1MRWxlbWVudC5wcm90b3R5cGUsdWEpOm1hP2QoRWxlbWVudC5wcm90b3R5cGUsbWEpOmNvbnNvbGUud2FybihcIkN1c3RvbSBFbGVtZW50czogYEVsZW1lbnQjaW5zZXJ0QWRqYWNlbnRIVE1MYCB3YXMgbm90IHBhdGNoZWQuXCIpO1koYixFbGVtZW50LnByb3RvdHlwZSx7aDpuYSxhcHBlbmQ6b2F9KTt5YShiKX07LypcblxuIENvcHlyaWdodCAoYykgMjAxNiBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuKi9cbnZhciBaPXdpbmRvdy5jdXN0b21FbGVtZW50cztpZighWnx8Wi5mb3JjZVBvbHlmaWxsfHxcImZ1bmN0aW9uXCIhPXR5cGVvZiBaLmRlZmluZXx8XCJmdW5jdGlvblwiIT10eXBlb2YgWi5nZXQpe3ZhciBYPW5ldyB2O3ZhKCk7d2EoKTtZKFgsRG9jdW1lbnRGcmFnbWVudC5wcm90b3R5cGUse2g6aGEsYXBwZW5kOmlhfSk7eGEoKTt6YSgpO2RvY3VtZW50Ll9fQ0VfaGFzUmVnaXN0cnk9ITA7dmFyIGN1c3RvbUVsZW1lbnRzPW5ldyBHKFgpO09iamVjdC5kZWZpbmVQcm9wZXJ0eSh3aW5kb3csXCJjdXN0b21FbGVtZW50c1wiLHtjb25maWd1cmFibGU6ITAsZW51bWVyYWJsZTohMCx2YWx1ZTpjdXN0b21FbGVtZW50c30pfTtcbn0pLmNhbGwoc2VsZik7XG5cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWN1c3RvbS1lbGVtZW50cy5taW4uanMubWFwXG5cblxuLyoqKi8gfSlcbi8qKioqKiovIF0pO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyBwb2x5ZmlsbGVkLmpzIiwiIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbiBcdGZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblxuIFx0XHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcbiBcdFx0aWYoaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0pIHtcbiBcdFx0XHRyZXR1cm4gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0uZXhwb3J0cztcbiBcdFx0fVxuIFx0XHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuIFx0XHR2YXIgbW9kdWxlID0gaW5zdGFsbGVkTW9kdWxlc1ttb2R1bGVJZF0gPSB7XG4gXHRcdFx0aTogbW9kdWxlSWQsXG4gXHRcdFx0bDogZmFsc2UsXG4gXHRcdFx0ZXhwb3J0czoge31cbiBcdFx0fTtcblxuIFx0XHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cbiBcdFx0bW9kdWxlc1ttb2R1bGVJZF0uY2FsbChtb2R1bGUuZXhwb3J0cywgbW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cbiBcdFx0Ly8gRmxhZyB0aGUgbW9kdWxlIGFzIGxvYWRlZFxuIFx0XHRtb2R1bGUubCA9IHRydWU7XG5cbiBcdFx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcbiBcdFx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xuIFx0fVxuXG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBtb2R1bGVzO1xuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZSBjYWNoZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5jID0gaW5zdGFsbGVkTW9kdWxlcztcblxuIFx0Ly8gZGVmaW5lIGdldHRlciBmdW5jdGlvbiBmb3IgaGFybW9ueSBleHBvcnRzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSBmdW5jdGlvbihleHBvcnRzLCBuYW1lLCBnZXR0ZXIpIHtcbiBcdFx0aWYoIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBuYW1lKSkge1xuIFx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBuYW1lLCB7XG4gXHRcdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuIFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcbiBcdFx0XHRcdGdldDogZ2V0dGVyXG4gXHRcdFx0fSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTEpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIHdlYnBhY2svYm9vdHN0cmFwIGE0MTc4YzRhZDljMDQ5Nzc2ZjRhIiwiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUge1N0b3JhZ2VEcml2ZXJ9IGZyb20gXCIuL2ludGVyZmFjZXNcIjtcblxuY29uc3QgcHJvcHNNYXA6IE1hcDxhbnksIGFueT4gPSBuZXcgTWFwO1xuXG5jb25zdCBldmVudHNNYXA6IE1hcDxhbnksIGFueT4gPSBuZXcgTWFwO1xuXG5leHBvcnQgY29uc3Qgc3RvcmFnZUtleXMgPSB7XG4gICAgUFJPUFM6IFwicHJvcHNcIixcbiAgICBFVkVOVFM6IFwiZXZlbnRzXCJcbn07XG5cbmNvbnN0IGRyaXZlcjogU3RvcmFnZURyaXZlciA9IHtcbiAgICBpdGVtczogT2JqZWN0LmNyZWF0ZSh7XG4gICAgICAgIFtzdG9yYWdlS2V5cy5QUk9QU106IHByb3BzTWFwLFxuICAgICAgICBbc3RvcmFnZUtleXMuRVZFTlRTXTogZXZlbnRzTWFwLFxuICAgIH0pLFxuICAgIHNldEl0ZW0oa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpIHtcbiAgICAgICAgdGhpcy5pdGVtc1trZXldID0gdmFsdWVcbiAgICB9LFxuICAgIGdldEl0ZW0oa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXNba2V5XVxuICAgIH0sXG4gICAgcmVtb3ZlSXRlbShrZXk6IHN0cmluZykge1xuICAgICAgICBkZWxldGUgdGhpcy5pdGVtc1trZXldXG4gICAgfSxcbiAgICBtaWdyYXRlKGRyaXZlcjogU3RvcmFnZURyaXZlcikge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiB0aGlzLml0ZW1zKSB7XG4gICAgICAgICAgICBkcml2ZXIuc2V0SXRlbShcbiAgICAgICAgICAgICAgICBrZXksXG4gICAgICAgICAgICAgICAgdGhpcy5pdGVtc1trZXldXG4gICAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGRyaXZlclxuICAgIH1cbn07XG5cbmV4cG9ydCBjb25zdCBzdG9yYWdlID0ge1xuICAgIGRyaXZlclxufTtcblxuZXhwb3J0IGZ1bmN0aW9uIHNldFN0b3JhZ2VEcml2ZXIoZHJpdmVyOiBTdG9yYWdlRHJpdmVyKTogdm9pZCB7XG4gICAgc3RvcmFnZS5kcml2ZXIgPSBzdG9yYWdlLmRyaXZlci5taWdyYXRlKGRyaXZlcilcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGdldFN0b3JhZ2Uoa2V5OiBzdHJpbmcpOiBhbnkge1xuICAgIHJldHVybiBzdG9yYWdlLmRyaXZlci5nZXRJdGVtKGtleSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZFN0b3JhZ2Uoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiB2b2lkIHtcbiAgICBzdG9yYWdlLmRyaXZlci5zZXRJdGVtKGtleSwgdmFsdWUpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVTdG9yYWdlKGtleTogc3RyaW5nKTogdm9pZCB7XG4gICAgc3RvcmFnZS5kcml2ZXIucmVtb3ZlSXRlbShrZXkpXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N0b3JhZ2UuanMiLCIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7V2ViQ29tcG9uZW50cyBhcyBJbXBsZW1lbnRhdGlvbn0gZnJvbSBcIi4vaW50ZXJmYWNlc1wiXG5cbmNvbnN0IGRlZmF1bHRJbXBsZW1lbnRhdGlvbjogSW1wbGVtZW50YXRpb24gPSB7XG4gICAgcmVnaXN0ZXJDb21wb25lbnQobmFtZTogc3RyaW5nLCBjb21wb25lbnQ6IENsYXNzPEVsZW1lbnQ+KSB7XG4gICAgICAgIGlmICgnY3VzdG9tRWxlbWVudHMnIGluIHdpbmRvdykge1xuICAgICAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKG5hbWUsIGNvbXBvbmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBjdXJyZW50UmVhZHlDaGVjaygpLnRoZW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgIHJlZ2lzdGVyQ29tcG9uZW50KG5hbWUsIGNvbXBvbmVudClcbiAgICAgICAgICAgIH0pXG4gICAgICAgIH1cbiAgICB9LFxuICAgIGlzQ3VzdG9tQ29tcG9uZW50KG5vZGU6IE5vZGUpIHtcbiAgICAgICAgcmV0dXJuIG5vZGUubm9kZU5hbWUuaW5jbHVkZXMoXCItXCIpXG4gICAgfVxufTtcblxubGV0IGN1cnJlbnRJbXBsZW1lbnRhdGlvbiA9IGRlZmF1bHRJbXBsZW1lbnRhdGlvbjtcblxuY29uc3QgcmVnaXN0ZXJDb21wb25lbnQgPSAobmFtZTogc3RyaW5nLCBjb21wb25lbnQ6IENsYXNzPEVsZW1lbnQ+KSA9PiB7XG4gICAgcmV0dXJuIGN1cnJlbnRJbXBsZW1lbnRhdGlvbi5yZWdpc3RlckNvbXBvbmVudChuYW1lLCBjb21wb25lbnQpO1xufTtcblxuZXhwb3J0IGNvbnN0IHNldEltcGxlbWVudGF0aW9uID0gKGltcGxlbWVudGF0aW9uOiBJbXBsZW1lbnRhdGlvbikgPT4ge1xuICAgIGN1cnJlbnRJbXBsZW1lbnRhdGlvbiA9IGltcGxlbWVudGF0aW9uO1xufTtcblxubGV0IGN1cnJlbnRSZWFkeUNoZWNrID0gKCkgPT4gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbmV4cG9ydCBjb25zdCBjb21wb25lbnRzUmVhZHkgPSAoKSA9PiB7XG4gICAgcmV0dXJuIGN1cnJlbnRSZWFkeUNoZWNrKClcbn07XG5cbmV4cG9ydCBjb25zdCBzZXRSZWFkeUNoZWNrID0gKHJlYWR5Q2hlY2s6IEZ1bmN0aW9uKSA9PiB7XG4gICAgY3VycmVudFJlYWR5Q2hlY2sgPSByZWFkeUNoZWNrO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVnaXN0ZXJDb21wb25lbnQ7XG5cbmV4cG9ydCBjb25zdCBpc0N1c3RvbUNvbXBvbmVudCA9IChub2RlOiBOb2RlKSA9PiB7XG4gICAgcmV0dXJuIGN1cnJlbnRJbXBsZW1lbnRhdGlvbi5pc0N1c3RvbUNvbXBvbmVudChub2RlKVxufTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvd2ViLWNvbXBvbmVudHMuanMiLCIvLyBAZmxvd1xuXG5pbXBvcnQgdHlwZSB7U3RvcmUsIFJlZHVjZXJ9IGZyb20gXCIuL2ludGVyZmFjZXNcIlxuXG5jb25zdCBzdHViSW1wbGVtZW50YXRpb246IFN0b3JlID0ge1xuICAgIHJlZHVjZXJzOiB7fSxcbiAgICBzdWJzY3JpcHRpb25zOiB7fSxcbiAgICBhZGRSZWR1Y2VyKGtleTogc3RyaW5nLCByZWR1Y2VyOiBSZWR1Y2VyKSB7XG4gICAgICAgIHRoaXMucmVkdWNlcnNba2V5XSA9IHJlZHVjZXI7XG4gICAgfSxcbiAgICByZW1vdmVSZWR1Y2VyKGtleTogc3RyaW5nKSB7XG4gICAgICAgIGRlbGV0ZSB0aGlzLnJlZHVjZXJzW2tleV07XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9LFxuICAgIHN1YnNjcmliZShrZXk6IHN0cmluZywgY2I6IEZ1bmN0aW9uKSB7XG4gICAgICAgIGlmICghdGhpcy5zdWJzY3JpcHRpb25zW2tleV0pIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1trZXldID0gW107XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zdWJzY3JpcHRpb25zW2tleV0ucHVzaChjYik7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICB1bnN1YnNjcmliZTogKCkgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9uc1trZXldID0gdGhpcy5zdWJzY3JpcHRpb25zW2tleV0uZmlsdGVyKGVsID0+IGVsICE9PSBjYilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0sXG4gICAgZ2V0U3RhdGUoa2V5OiBzdHJpbmcpIHt9LFxuICAgIG1pZ3JhdGUobmV3U3RvcmU6IFN0b3JlKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIHRoaXMucmVkdWNlcnMpIHtcbiAgICAgICAgICAgIGNvbnN0IHJlZHVjZXIgPSB0aGlzLnJlZHVjZXJzW2tleV07XG4gICAgICAgICAgICBuZXdTdG9yZS5hZGRSZWR1Y2VyKGtleSwgcmVkdWNlcik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yIChjb25zdCBrZXkgaW4gdGhpcy5zdWJzY3JpcHRpb25zKSB7XG4gICAgICAgICAgICBmb3IgKGNvbnN0IHN1YnNjcmlwdGlvbiBvZiB0aGlzLnN1YnNjcmlwdGlvbnNba2V5XSkge1xuICAgICAgICAgICAgICAgIG5ld1N0b3JlLnN1YnNjcmliZShrZXksIHN1YnNjcmlwdGlvbilcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3U3RvcmU7XG4gICAgfVxufTtcblxuY29uc3Qgc3RvcmUgPSB7XG4gICAgY3VycmVudEltcGxlbWVudGF0aW9uOiBzdHViSW1wbGVtZW50YXRpb25cbn07XG5cbmV4cG9ydCBjb25zdCBzZXRJbXBsZW1lbnRhdGlvbiA9IChpbXBsZW1lbnRhdGlvbjogU3RvcmUpID0+IHtcbiAgICBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24gPSBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24ubWlncmF0ZShpbXBsZW1lbnRhdGlvbilcbn07XG5cbmV4cG9ydCBjb25zdCByZWdpc3RlclJlZHVjZXIgPSAoa2V5OiBzdHJpbmcsIHJlZHVjZXI6IFJlZHVjZXIpID0+IHtcbiAgICBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24uYWRkUmVkdWNlcihrZXksIHJlZHVjZXIpXG59O1xuZXhwb3J0IGNvbnN0IHJlbW92ZVJlZHVjZXIgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICBzdG9yZS5jdXJyZW50SW1wbGVtZW50YXRpb24ucmVtb3ZlUmVkdWNlcihrZXkpXG59O1xuZXhwb3J0IGNvbnN0IHN1YnNjcmliZSA9IChrZXk6IHN0cmluZywgY2I6IEZ1bmN0aW9uKSA9PiB7XG4gICAgcmV0dXJuIHN0b3JlLmN1cnJlbnRJbXBsZW1lbnRhdGlvbi5zdWJzY3JpYmUoa2V5LCBjYilcbn07XG5leHBvcnQgY29uc3QgZ2V0U3RhdGUgPSAoa2V5OiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gc3RvcmUuY3VycmVudEltcGxlbWVudGF0aW9uLmdldFN0YXRlKGtleSlcbn07XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3N0b3JlLmpzIiwiLy8gQGZsb3dcblxuaW1wb3J0IHR5cGUge1RlbXBsYXRlSGFuZGxlcn0gZnJvbSBcIi4vaW50ZXJmYWNlc1wiXG5pbXBvcnQge2dldFN0b3JhZ2UsIHN0b3JhZ2VLZXlzfSBmcm9tIFwiLi9zdG9yYWdlXCJcbmltcG9ydCB7dGFnTmFtZVRvUHJvcH0gZnJvbSBcIi4vdXRpbHNcIjtcbmltcG9ydCB7aXNDdXN0b21Db21wb25lbnR9IGZyb20gXCIuL3dlYi1jb21wb25lbnRzXCI7XG5cbmNvbnN0IHByb3BzU3RvcmFnZSA9IGdldFN0b3JhZ2Uoc3RvcmFnZUtleXMuUFJPUFMpO1xuY29uc3QgZXZlbnRzU3RvcmFnZSA9IGdldFN0b3JhZ2Uoc3RvcmFnZUtleXMuRVZFTlRTKTtcblxuY29uc3QgRXZlbnRzVGFnSGFuZGxlcjogVGVtcGxhdGVIYW5kbGVyID0ge1xuICAgIGNhbGw6IChub2RlOiBhbnksIGFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpXTtcbiAgICAgICAgICAgIGlmIChhdHRyaWJ1dGUubm9kZU5hbWUuc3RhcnRzV2l0aChcIm9uXCIpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgbWF0Y2ggPSBhdHRyaWJ1dGUubm9kZVZhbHVlLm1hdGNoKC9fX0FSR19fKFxcZCspLyk7XG4gICAgICAgICAgICAgICAgaWYgKG1hdGNoICYmIG1hdGNoWzFdKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGluZGV4ID0gTnVtYmVyKG1hdGNoWzFdKTtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgbGlzdGVuZXIgPSBhcmdzW2luZGV4XTtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBsaXN0ZW5lciA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUubm9kZU5hbWVcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBldmVudE5hbWUgPSBhdHRyaWJ1dGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKS5zbGljZSgyKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBldmVudE5hbWUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJcbiAgICAgICAgICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IGxpc3RlbmVycyA9IGV2ZW50c1N0b3JhZ2UuZ2V0KG5vZGUpIHx8IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgZXZlbnRzU3RvcmFnZS5zZXQoXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC4uLmxpc3RlbmVycyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgW2V2ZW50TmFtZV06IGxpc3RlbmVyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuY29uc3QgTWFwSGFuZGxlcjogVGVtcGxhdGVIYW5kbGVyID0ge1xuICAgIGNhbGw6IChub2RlOiBOb2RlLCBhcmdzOiBhbnlbXSkgPT4ge1xuICAgICAgICBpZiAobm9kZSBpbnN0YW5jZW9mIEhUTUxUZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIGlmIChub2RlLmhhc0F0dHJpYnV0ZShcIm1hcFwiKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IG1hdGNoID0gU3RyaW5nKG5vZGUuZ2V0QXR0cmlidXRlKFwibWFwXCIpKS5tYXRjaCgvX19BUkdfXyhcXGQrKS8pO1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBpbmRleCA9IE51bWJlcihtYXRjaFsxXSk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGFyciA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCB0cGwgPSBub2RlLmlubmVySFRNTDtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCk7XG4gICAgICAgICAgICAgICAgICAgIGFyci5mb3JFYWNoKGVsID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiB0cGwucmVwbGFjZSgvX19BUkdfXyhcXGQrKS9nLCAobWF0Y2gsIGluZGV4KSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgYXJnID0gYXJnc1tpbmRleF07XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmcgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0cGxDYWxsID0gYXJnKGVsKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHRwbENhbGwgaW5zdGFuY2VvZiBIVE1MVGVtcGxhdGVFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZCh0cGxDYWxsLmNvbnRlbnQpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCB0bXBUcGwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0bXBUcGwuaW5uZXJIVE1MID0gdHBsQ2FsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZyYWdtZW50LmFwcGVuZENoaWxkKHRtcFRwbC5jb250ZW50KVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhcmdcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgICAgICAgICAgICAgIG5vZGUucGFyZW50Tm9kZS5yZXBsYWNlQ2hpbGQoXG4gICAgICAgICAgICAgICAgICAgICAgICBmcmFnbWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGVcbiAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn07XG5cbmZ1bmN0aW9uIHNob3VsZFNldFByb3BUb1N0b3JhZ2UodmFsdWU6IGFueSwgbm9kZTogTm9kZSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09IFwiZnVuY3Rpb25cIiB8fCB0eXBlb2YgdmFsdWUgPT09IFwib2JqZWN0XCIgfHwgaXNDdXN0b21Db21wb25lbnQobm9kZSlcbn1cblxuZnVuY3Rpb24gcGFyc2VBdHRyaWJ1dGUoYXR0cmlidXRlOiBOb2RlLCBub2RlOiBOb2RlLCBhcmdzOiBhbnlbXSkge1xuICAgIGNvbnN0IG1hdGNoID0gYXR0cmlidXRlLm5vZGVWYWx1ZS5tYXRjaCgvX19BUkdfXyhcXGQrKS8pO1xuICAgIGlmIChtYXRjaCAmJiBtYXRjaFsxXSkge1xuICAgICAgICBjb25zdCBpbmRleCA9IE51bWJlcihtYXRjaFsxXSk7XG4gICAgICAgIGNvbnN0IG5vZGVOYW1lID0gYXR0cmlidXRlLm5vZGVOYW1lO1xuICAgICAgICBjb25zdCBwcm9wTmFtZSA9IHRhZ05hbWVUb1Byb3Aobm9kZU5hbWUpO1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGFyZ3NbaW5kZXhdO1xuICAgICAgICByZXR1cm4gW3Byb3BOYW1lLCB2YWx1ZV1cbiAgICB9XG4gICAgcmV0dXJuIFthdHRyaWJ1dGUubm9kZU5hbWUsIGF0dHJpYnV0ZS5ub2RlVmFsdWVdXG59XG5cbmNvbnN0IFByb3BzSGFuZGxlcjogVGVtcGxhdGVIYW5kbGVyID0ge1xuICAgIGNhbGw6IChub2RlOiBhbnksIGFyZ3M6IGFueVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSBub2RlLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gYXR0cmlidXRlc1tpXTtcbiAgICAgICAgICAgIGNvbnN0IFtwcm9wTmFtZSwgdmFsdWVdID0gcGFyc2VBdHRyaWJ1dGUoXG4gICAgICAgICAgICAgICAgYXR0cmlidXRlLFxuICAgICAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICAgICAgYXJnc1xuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGlmIChzaG91bGRTZXRQcm9wVG9TdG9yYWdlKHZhbHVlLCBub2RlKSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IHByb3BzID0gcHJvcHNTdG9yYWdlLmdldChub2RlKSB8fCB7fTtcbiAgICAgICAgICAgICAgICBub2RlLnJlbW92ZUF0dHJpYnV0ZShcbiAgICAgICAgICAgICAgICAgICAgYXR0cmlidXRlLm5vZGVOYW1lLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgICAgcHJvcHNTdG9yYWdlLnNldChcbiAgICAgICAgICAgICAgICAgICAgbm9kZSxcbiAgICAgICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgICAgICAgLi4ucHJvcHMsXG4gICAgICAgICAgICAgICAgICAgICAgICBbcHJvcE5hbWVdOiB2YWx1ZVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufTtcblxuY29uc3QgY29yZUhhbmRsZXJzID0ge1xuICAgIGV2ZW50czogRXZlbnRzVGFnSGFuZGxlcixcbiAgICBtYXA6IE1hcEhhbmRsZXIsXG4gICAgcHJvcHM6IFByb3BzSGFuZGxlclxufTtcblxuY29uc3QgY3VzdG9tSGFuZGxlcnMgPSB7fTtcblxubGV0IGhhbmRsZXJzOiBBcnJheTxGdW5jdGlvbj4gPSBbXG4gICAgY29yZUhhbmRsZXJzLm1hcC5jYWxsLFxuICAgIGNvcmVIYW5kbGVycy5ldmVudHMuY2FsbCxcbiAgICBjb3JlSGFuZGxlcnMucHJvcHMuY2FsbCxcbl07XG5cbmV4cG9ydCBmdW5jdGlvbiBjYWxsSGFuZGxlcnMoZWxlbWVudDogRG9jdW1lbnRGcmFnbWVudCB8IE5vZGUsIGFyZ3M6IGFueVtdKTogdm9pZCB7XG4gICAgaWYgKCgoZWxlbWVudDogYW55KS5hdHRyaWJ1dGVzIHx8IFtdKS5sZW5ndGgpIHtcbiAgICAgICAgaGFuZGxlcnMuZm9yRWFjaChoYW5kbGVyID0+IHtcbiAgICAgICAgICAgIGhhbmRsZXIoZWxlbWVudCwgYXJncyk7XG4gICAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnQuY2hpbGROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjYWxsSGFuZGxlcnMoXG4gICAgICAgICAgICBlbGVtZW50LmNoaWxkTm9kZXNbaV0sXG4gICAgICAgICAgICBhcmdzXG4gICAgICAgIClcbiAgICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGRUZW1wbGF0ZUhhbmRsZXIoa2V5OnN0cmluZywgaGFuZGxlcjogVGVtcGxhdGVIYW5kbGVyKTogdm9pZCB7XG4gICAgY3VzdG9tSGFuZGxlcnNba2V5XSA9IGhhbmRsZXI7XG4gICAgLy8gJEZsb3dGaXhNZVxuICAgIGhhbmRsZXJzLnVuc2hpZnQoaGFuZGxlci5jYWxsKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWNjZXNzSGFuZGxlcihrZXk6IHN0cmluZyk6IFRlbXBsYXRlSGFuZGxlciB7XG4gICAgcmV0dXJuIGN1c3RvbUhhbmRsZXJzW2tleV1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVubG9hZEhhbmRsZXIoa2V5OiBzdHJpbmcpOiB2b2lkIHtcbiAgICBjb25zdCBoYW5kbGVyID0gY3VzdG9tSGFuZGxlcnNba2V5XTtcbiAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihlbCA9PiBlbCAhPT0gaGFuZGxlci5jYWxsKVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0Q29yZUhhbmRsZXIoa2V5OiBzdHJpbmcsIGhhbmRsZXI6IFRlbXBsYXRlSGFuZGxlcik6IHZvaWQge1xuICAgIGNvcmVIYW5kbGVyc1trZXldID0gaGFuZGxlclxufVxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL3NyYy9oYW5kbGVycy5qcyIsIi8vIEBmbG93XG5cbmltcG9ydCB7Z2V0U3RvcmFnZSwgc3RvcmFnZUtleXN9IGZyb20gXCIuL3N0b3JhZ2VcIjtcblxuY29uc3QgcHJvcHNTdG9yYWdlID0gZ2V0U3RvcmFnZShzdG9yYWdlS2V5cy5QUk9QUyk7XG5jb25zdCBldmVudHNTdG9yYWdlID0gZ2V0U3RvcmFnZShzdG9yYWdlS2V5cy5FVkVOVFMpO1xuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJQcm9wc1N0b3JhZ2UoKTogdm9pZCB7XG4gICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IG9mIHByb3BzU3RvcmFnZS5rZXlzKCkpIHtcbiAgICAgICAgICAgIGlmICgha2V5LmlzQ29ubmVjdGVkKSB7XG4gICAgICAgICAgICAgICAgcHJvcHNTdG9yYWdlLmRlbGV0ZShrZXkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJFdmVudHNTdG9yYWdlKCk6IHZvaWQge1xuICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiBldmVudHNTdG9yYWdlLmtleXMoKSkge1xuICAgICAgICAgICAgaWYgKCFrZXkuaXNDb25uZWN0ZWQpIHtcbiAgICAgICAgICAgICAgICBldmVudHNTdG9yYWdlLmRlbGV0ZShrZXkpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9KVxufVxuXG5leHBvcnQgZnVuY3Rpb24gdGFnTmFtZVRvUHJvcChub2RlTmFtZTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICByZXR1cm4gbm9kZU5hbWUuc3BsaXQoXCItXCIpLnJlZHVjZShcbiAgICAgICAgKGFjYywgbmV4dCkgPT4ge1xuICAgICAgICAgICAgaWYgKG5leHQpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gYWNjICsgbmV4dFswXS50b1VwcGVyQ2FzZSgpICsgbmV4dC5zbGljZSgxKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGFjY1xuICAgICAgICB9XG4gICAgKTtcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdXRpbHMuanMiLCIvLyBAZmxvd1xuXG5leHBvcnQge1xuICAgIHNldEltcGxlbWVudGF0aW9uIGFzIGNoYW5nZVdlYkNvbXBvbmVudHNJbXBsZW1lbmF0aW9uLFxuICAgIGNvbXBvbmVudHNSZWFkeSxcbiAgICBzZXRSZWFkeUNoZWNrIGFzIGNoYW5nZVdlYkNvbXBvbmVudHNSZWFkeUNoZWNrLFxuICAgIGRlZmF1bHQgYXMgcmVnaXN0ZXJDb21wb25lbnRcbn0gZnJvbSBcIi4vd2ViLWNvbXBvbmVudHNcIlxuXG5leHBvcnQge1xuICAgIHNldEltcGxlbWVudGF0aW9uIGFzIGNoYW5nZVN0b3JlSW1wbGVtZW50YXRpb24sXG4gICAgcmVnaXN0ZXJSZWR1Y2VyLFxuICAgIHJlbW92ZVJlZHVjZXIsXG4gICAgc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlXG59IGZyb20gXCIuL3N0b3JlXCJcblxuZXhwb3J0IHtcbiAgICBhZGRUZW1wbGF0ZUhhbmRsZXIsXG4gICAgc2V0Q29yZUhhbmRsZXIsXG4gICAgdW5sb2FkSGFuZGxlcixcbiAgICBhY2Nlc3NIYW5kbGVyLFxufSBmcm9tIFwiLi9oYW5kbGVyc1wiXG5cbmV4cG9ydCB7XG4gICAgaHRtbCxcbiAgICBjc3Ncbn0gZnJvbSBcIi4vdGFnXCJcblxuZXhwb3J0IHtcbiAgICBnZXRTdG9yYWdlLFxuICAgIGFkZFN0b3JhZ2UsXG4gICAgcmVtb3ZlU3RvcmFnZSxcbiAgICBzZXRTdG9yYWdlRHJpdmVyXG59IGZyb20gXCIuL3N0b3JhZ2VcIlxuXG5leHBvcnQge2JpbmR9IGZyb20gXCIuL2JpbmRcIlxuXG5leHBvcnQge2RlZmF1bHQgYXMgQ29tcG9uZW50fSBmcm9tIFwiLi9Db21wb25lbnRcIlxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2luZGV4LmpzIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtjYWxsSGFuZGxlcnN9IGZyb20gXCIuL2hhbmRsZXJzXCI7XG5cbmV4cG9ydCBmdW5jdGlvbiBodG1sKHN0cmluZ3M6IHN0cmluZ1tdLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGlmICghYXJncy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIHN0cmluZ3NbMF1cbiAgICB9XG5cbiAgICBjb25zdCBBUkcgPSBcIl9fQVJHX19cIjtcbiAgICBsZXQgdHBsOiBzdHJpbmcgPSBcIlwiO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICB0cGwgKz0gc3RyaW5nc1tpXTtcbiAgICAgICAgaWYgKGkgPCBzdHJpbmdzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICAgIGlmICh0eXBlb2YgYXJnc1tpXSA9PT0gXCJmdW5jdGlvblwiIHx8IHR5cGVvZiBhcmdzW2ldID09PSBcIm9iamVjdFwiKVxuICAgICAgICAgICAgICAgIHRwbCArPSBBUkcgKyBpO1xuICAgICAgICAgICAgZWxzZVxuICAgICAgICAgICAgICAgIHRwbCArPSBhcmdzW2ldXG4gICAgICAgIH1cbiAgICB9XG4gICAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwidGVtcGxhdGVcIik7XG4gICAgdGVtcGxhdGUuaW5uZXJIVE1MID0gdHBsO1xuICAgIGNhbGxIYW5kbGVycyh0ZW1wbGF0ZS5jb250ZW50LCBhcmdzKTtcbiAgICByZXR1cm4gdGVtcGxhdGVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNzcyhzdHJpbmdzOiBzdHJpbmdbXSwgLi4uYXJnczogYW55W10pIHtcbiAgICBsZXQgcmVzdWx0ID0gJyc7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc3VsdCArPSBzdHJpbmdzW2ldO1xuICAgICAgICBpZiAoaSA8IHN0cmluZ3MubGVuZ3RoIC0gMSkge1xuICAgICAgICAgICAgaWYgKHR5cGVvZiBhcmdzW2ldID09PSBcImZ1bmN0aW9uXCIpXG4gICAgICAgICAgICAgICAgcmVzdWx0ICs9IGFyZ3NbaV0oKTtcbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICByZXN1bHQgKz0gYXJnc1tpXVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRcbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvdGFnLmpzIiwiLy8gQGZsb3dcblxuaW1wb3J0IHthZGRTdG9yYWdlLCBnZXRTdG9yYWdlfSBmcm9tIFwiLi9zdG9yYWdlXCJcblxuY29uc3QgS0VZID0gXCJCT1VORFNcIjtcbmNvbnN0IE1BWF9TVE9SQUdFX1NJWkUgPSAxMDA7XG5cbmFkZFN0b3JhZ2UoXG4gICAgS0VZLFxuICAgIG5ldyBNYXAoKVxuKTtcblxuZnVuY3Rpb24gYXBwZW5kVG9TdG9yYWdlKGZuOiBGdW5jdGlvbiwgdmFsdWU6IE1hcDxhbnksIEZ1bmN0aW9uPik6IHZvaWQge1xuICAgIGNvbnN0IHN0b3JhZ2U6IE1hcDxGdW5jdGlvbiwgTWFwPGFueSwgRnVuY3Rpb24+PiA9IGdldFN0b3JhZ2UoS0VZKTtcbiAgICBpZiAoc3RvcmFnZS5zaXplID09PSBNQVhfU1RPUkFHRV9TSVpFKSB7XG4gICAgICAgIGNvbnN0IGtleXMgPSBzdG9yYWdlLmtleXMoKTtcbiAgICAgICAgLy8gJEZsb3dGaXhNZVxuICAgICAgICBzdG9yYWdlLmRlbGV0ZShrZXlzLm5leHQoKS52YWx1ZSk7XG4gICAgfVxuICAgIHN0b3JhZ2Uuc2V0KGZuLCB2YWx1ZSlcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGJpbmQoZm46IEZ1bmN0aW9uLCAuLi5hcmdzOiBhbnlbXSk6IEZ1bmN0aW9uIHtcbiAgICBjb25zdCBzdG9yYWdlOiBNYXA8RnVuY3Rpb24sIE1hcDxhbnksIEZ1bmN0aW9uPj4gPSBnZXRTdG9yYWdlKEtFWSk7XG4gICAgY29uc3QgYm91bmQgPSBzdG9yYWdlLmdldChmbik7XG4gICAgY29uc3QgZmlyc3RBcmcgPSBhcmdzWzBdO1xuICAgIGNvbnN0IGJvdW5kRm4gPSBmbi5iaW5kKG51bGwsIC4uLmFyZ3MpO1xuICAgIGlmIChib3VuZCkge1xuICAgICAgICBpZiAoIWJvdW5kLmdldChmaXJzdEFyZykpIHtcbiAgICAgICAgICAgIGJvdW5kLnNldChcbiAgICAgICAgICAgICAgICBmaXJzdEFyZyxcbiAgICAgICAgICAgICAgICBib3VuZEZuXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgcmV0dXJuIGJvdW5kRm5cbiAgICAgICAgfVxuICAgICAgICAvLyAkRmxvd0ZpeE1lXG4gICAgICAgIHJldHVybiBib3VuZC5nZXQoZmlyc3RBcmcpXG4gICAgfVxuXG4gICAgY29uc3QgZm5NYXAgPSBuZXcgTWFwKCk7XG4gICAgZm5NYXAuc2V0KFxuICAgICAgICBmaXJzdEFyZyxcbiAgICAgICAgYm91bmRGblxuICAgICk7XG4gICAgYXBwZW5kVG9TdG9yYWdlKFxuICAgICAgICBmbixcbiAgICAgICAgZm5NYXBcbiAgICApO1xuICAgIHJldHVybiBib3VuZEZuXG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL2JpbmQuanMiLCIvLyBAZmxvd1xuXG5pbXBvcnQge3N1YnNjcmliZSwgZ2V0U3RhdGV9IGZyb20gXCIuL3N0b3JlXCJcbmltcG9ydCB7cmVuZGVyfSBmcm9tIFwiLi9yZW5kZXJcIlxuaW1wb3J0IHtnZXRTdG9yYWdlLCBzdG9yYWdlS2V5c30gZnJvbSBcIi4vc3RvcmFnZVwiXG5pbXBvcnQge2NsZWFyRXZlbnRzU3RvcmFnZSwgY2xlYXJQcm9wc1N0b3JhZ2V9IGZyb20gXCIuL3V0aWxzXCI7XG5cbmNvbnN0IHByb3BzU3RvcmFnZSA9IGdldFN0b3JhZ2Uoc3RvcmFnZUtleXMuUFJPUFMpO1xuXG5mdW5jdGlvbiBwYXJzZUF0dHJpYnV0ZXMoYXR0cmlidXRlczogTmFtZWROb2RlTWFwKTogT2JqZWN0IHtcbiAgICBjb25zdCByZXN1bHQgPSB7fTtcbiAgICBmb3IgKGNvbnN0IGF0dHJpYnV0ZSBvZiBhdHRyaWJ1dGVzKSB7XG4gICAgICAgIHJlc3VsdFthdHRyaWJ1dGUubmFtZV0gPSBhdHRyaWJ1dGUudmFsdWU7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudCBleHRlbmRzIEhUTUxFbGVtZW50IHtcbiAgICBnZXQgbmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5jb25zdHJ1Y3Rvci5uYW1lXG4gICAgfVxuXG4gICAgZ2V0IGlzU2hhZG93KCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGdldCBwcm9wcygpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIC4uLnRoaXMuX19kZWZhdWx0UHJvcHMsXG4gICAgICAgICAgICAuLi5wYXJzZUF0dHJpYnV0ZXModGhpcy5hdHRyaWJ1dGVzKSxcbiAgICAgICAgICAgIC4uLihwcm9wc1N0b3JhZ2UuZ2V0KHRoaXMpIHx8IHt9KVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgc2V0IHByb3BzKHByb3BzOiBPYmplY3QpIHtcbiAgICAgICAgdGhpcy5fX2RlZmF1bHRQcm9wcyA9IHByb3BzO1xuICAgIH1cblxuICAgIGdldCBrZXlzKCkge1xuICAgICAgICByZXR1cm4gW11cbiAgICB9XG5cbiAgICBnZXQgc3R5bGVzKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBcIlwiXG4gICAgfVxuXG4gICAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKTogc3RyaW5nW10ge1xuICAgICAgICByZXR1cm4gdGhpcy5vYnNlcnZhYmxlUHJvcHMubWFwKChwcm9wOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICAgICAgICAgICAgbGV0IHJlcyA9IFwiXCI7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHByb3AubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAocHJvcFtpXSA9PT0gcHJvcFtpXS50b1VwcGVyQ2FzZSgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyArPSBcIi1cIitwcm9wW2ldLnRvTG93ZXJDYXNlKClcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICByZXMgKz0gcHJvcFtpXVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiByZXNcbiAgICAgICAgfSlcbiAgICB9XG5cbiAgICBzdGF0aWMgZ2V0IG9ic2VydmFibGVQcm9wcygpIHtcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgfVxuXG4gICAgX19kZWZhdWx0UHJvcHMgPSB7fTtcblxuICAgIHN1YnNjcmlwdGlvbnMgPSBbXTtcblxuICAgIHN0YXRlID0ge307XG5cbiAgICBtb3VudGVkID0gZmFsc2U7XG5cbiAgICBiZWZvcmVSZW5kZXIoKSB7fVxuXG4gICAgcmVuZGVyKCkge1xuICAgICAgICByZXR1cm4gJydcbiAgICB9XG5cbiAgICBhZnRlclJlbmRlcigpIHt9XG5cbiAgICBzdWJzY3JpYmVUb1N0b3JlKCkge1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBvZiB0aGlzLmtleXMpIHtcbiAgICAgICAgICAgIHRoaXMuc3Vic2NyaXB0aW9ucy5wdXNoKFxuICAgICAgICAgICAgICAgIHN1YnNjcmliZShrZXksIHN0YXRlID0+IHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5zdGF0ZVtrZXldID0gc3RhdGU7XG4gICAgICAgICAgICAgICAgICAgIHJlbmRlci5jYWxsKHRoaXMpXG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgICB0aGlzLnN0YXRlW2tleV0gPSBnZXRTdGF0ZShrZXkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgY29ubmVjdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9TdG9yZSgpO1xuICAgICAgICByZW5kZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLmNvbm5lY3RlZCgpXG4gICAgfVxuXG4gICAgY29ubmVjdGVkKCkge31cblxuICAgIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgICAgICBmb3IgKGNvbnN0IHN1YnNjcmlwdGlvbiBvZiB0aGlzLnN1YnNjcmlwdGlvbnMpIHtcbiAgICAgICAgICAgIHN1YnNjcmlwdGlvbi51bnN1YnNjcmliZSgpXG4gICAgICAgIH1cbiAgICAgICAgY2xlYXJQcm9wc1N0b3JhZ2UoKTtcbiAgICAgICAgY2xlYXJFdmVudHNTdG9yYWdlKCk7XG5cbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQoKVxuICAgIH1cblxuICAgIGRpc2Nvbm5lY3RlZCgpIHt9XG5cbiAgICBhZG9wdGVkQ2FsbGJhY2soKSB7XG4gICAgICAgIHRoaXMuc3Vic2NyaWJlVG9TdG9yZSgpO1xuICAgICAgICByZW5kZXIuY2FsbCh0aGlzKTtcblxuICAgICAgICB0aGlzLmFkb3B0ZWQoKVxuICAgIH1cblxuICAgIGFkb3B0ZWQoKSB7fVxuXG4gICAgYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKGF0dHJpYnV0ZU5hbWU6IHN0cmluZywgb2xkVmFsdWU6IHN0cmluZywgbmV3VmFsdWU6IHN0cmluZykge1xuICAgICAgICBpZiAodGhpcy5tb3VudGVkICYmIG9sZFZhbHVlICE9IG5ld1ZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLnByb3BzQ2hhbmdlZChcbiAgICAgICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgICAgIC4uLnRoaXMucHJvcHMsXG4gICAgICAgICAgICAgICAgICAgIFthdHRyaWJ1dGVOYW1lXTogbmV3VmFsdWUsXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHJlbmRlci5jYWxsKHRoaXMpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm9wc0NoYW5nZWQobmV3UHJvcHM6IE9iamVjdCkge31cbn1cblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvQ29tcG9uZW50LmpzIiwiLy8gQGZsb3dcblxuaW1wb3J0IHtpc0N1c3RvbUNvbXBvbmVudH0gZnJvbSBcIi4vd2ViLWNvbXBvbmVudHNcIlxuaW1wb3J0IHtnZXRTdG9yYWdlLCBzdG9yYWdlS2V5c30gZnJvbSBcIi4vc3RvcmFnZVwiXG5pbXBvcnQgc2hhbGxvd0VxdWFsIGZyb20gXCIuL3NoYWxsb3ctZXF1YWxcIjtcblxuY29uc3QgcHJvcHNTdG9yYWdlID0gZ2V0U3RvcmFnZShzdG9yYWdlS2V5cy5QUk9QUyk7XG5cbmZ1bmN0aW9uIG5vZGVFcXVhbHMoZWxlbWVudE5vZGU6IE5vZGUsIGZyYWdtZW50Tm9kZTogTm9kZSk6IGJvb2xlYW4ge1xuICAgIGNvbnN0IGVsQ2xvbmUgPSBlbGVtZW50Tm9kZS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgIGNvbnN0IGZyQ2xvbmUgPSBmcmFnbWVudE5vZGUuY2xvbmVOb2RlKGZhbHNlKTtcbiAgICBpZiAocHJvcHNTdG9yYWdlLmdldChmcmFnbWVudE5vZGUpKSB7XG4gICAgICAgIHJldHVybiBzaGFsbG93RXF1YWwoXG4gICAgICAgICAgICBwcm9wc1N0b3JhZ2UuZ2V0KGVsZW1lbnROb2RlKSxcbiAgICAgICAgICAgIHByb3BzU3RvcmFnZS5nZXQoZnJhZ21lbnROb2RlKVxuICAgICAgICApICYmIGVsQ2xvbmUuaXNFcXVhbE5vZGUoZnJDbG9uZSlcbiAgICB9XG4gICAgcmV0dXJuIGVsQ2xvbmUuaXNFcXVhbE5vZGUoZnJDbG9uZSlcbn1cblxuZnVuY3Rpb24gY29udGVudERpZmZlcihlbGVtZW50Tm9kZTogTm9kZSwgZnJhZ21lbnROb2RlOiBOb2RlKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIGVsZW1lbnROb2RlLmlzRXF1YWxOb2RlKGZyYWdtZW50Tm9kZSkgPT09IGZhbHNlXG59XG5cbmZ1bmN0aW9uIGVsZW1lbnRzRGVsZXRlZChlbGVtZW50Tm9kZXM6IE5vZGVbXSwgZnJhZ21lbnROb2RlczogTm9kZVtdKTogQXJyYXk8Tm9kZT4ge1xuICAgIGlmIChlbGVtZW50Tm9kZXMubGVuZ3RoID4gZnJhZ21lbnROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50Tm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgIGlmIChlbGVtZW50Tm9kZXNbaV0gJiYgIWZyYWdtZW50Tm9kZXNbaV0pIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gW2VsZW1lbnROb2Rlc1tpXV0uY29uY2F0KFxuICAgICAgICAgICAgICAgICAgICBlbGVtZW50c0RlbGV0ZWQoXG4gICAgICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGVsZW1lbnROb2Rlcykuc2xpY2UoaSArIDEpLFxuICAgICAgICAgICAgICAgICAgICAgICAgQXJyYXkuZnJvbShmcmFnbWVudE5vZGVzKS5zbGljZShpKVxuICAgICAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFub2RlRXF1YWxzKGVsZW1lbnROb2Rlc1tpXSwgZnJhZ21lbnROb2Rlc1tpXSkpIHtcbiAgICAgICAgICAgICAgICBjb25zdCBkZWxldGVkID0gZWxlbWVudHNEZWxldGVkKFxuICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGVsZW1lbnROb2Rlcykuc2xpY2UoaSArIDEpLFxuICAgICAgICAgICAgICAgICAgICBBcnJheS5mcm9tKGZyYWdtZW50Tm9kZXMpLnNsaWNlKGkpXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoZGVsZXRlZC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtlbGVtZW50Tm9kZXNbaV1dXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgIHJldHVybiBbXVxufVxuXG5mdW5jdGlvbiBjaGlsZHJlbkNoYW5nZWRDb3VudChlbGVtZW50Tm9kZXM6IE5vZGVbXSwgZnJhZ21lbnROb2RlczogTm9kZVtdKTogbnVtYmVyIHtcbiAgICBpZiAoZWxlbWVudE5vZGVzLmxlbmd0aCA+IGZyYWdtZW50Tm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmcmFnbWVudE5vZGVzLmxlbmd0aFxuICAgIH1cbiAgICBsZXQgY2hhbmdlZCA9IDA7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50Tm9kZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgY29uc3QgZWxDbG9uZSA9IGVsZW1lbnROb2Rlc1tpXS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICBjb25zdCBmckNsb25lID0gZnJhZ21lbnROb2Rlc1tpXS5jbG9uZU5vZGUoZmFsc2UpO1xuICAgICAgICBpZiAoIW5vZGVFcXVhbHMoZWxlbWVudE5vZGVzW2ldLCBmcmFnbWVudE5vZGVzW2ldKSkge1xuICAgICAgICAgICAgaWYgKCFpc0VtcHR5Tm9kZShlbENsb25lKSAmJiAhaXNFbXB0eU5vZGUoZnJDbG9uZSkpIHtcbiAgICAgICAgICAgICAgICBjaGFuZ2VkKytcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY2hhbmdlZFxufVxuXG5mdW5jdGlvbiBhcHBlbmRDaGlsZHJlbihlbGVtZW50Tm9kZTogTm9kZSwgZWxlbWVudENoaWxkcmVuOiBOb2RlW10sIGZyYWdtZW50Q2hpbGRyZW46IE5vZGVbXSk6IHZvaWQge1xuICAgIGNvbnN0IGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpO1xuICAgIGZvciAobGV0IGkgPSBlbGVtZW50Q2hpbGRyZW4ubGVuZ3RoOyBpIDwgZnJhZ21lbnRDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICBmcmFnbWVudC5hcHBlbmRDaGlsZChcbiAgICAgICAgICAgIGZyYWdtZW50Q2hpbGRyZW5baV1cbiAgICAgICAgKVxuICAgIH1cbiAgICBlbGVtZW50Tm9kZS5hcHBlbmRDaGlsZChcbiAgICAgICAgZnJhZ21lbnRcbiAgICApXG59XG5cbmZ1bmN0aW9uIHVwZGF0ZUF0dHJpYnV0ZXMoZWxlbWVudE5vZGU6IE5vZGUsIGZyYWdtZW50Tm9kZTogTm9kZSk6IHZvaWQge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSAoZnJhZ21lbnROb2RlOiBhbnkpLmF0dHJpYnV0ZXMgfHwgW107XG4gICAgY29uc3QgZWxlbWVudEF0dHJpYnV0ZXMgPSAoZWxlbWVudE5vZGU6IGFueSkuYXR0cmlidXRlcyB8fCBbXTtcbiAgICBpZiAoZWxlbWVudEF0dHJpYnV0ZXMubGVuZ3RoID4gYXR0cmlidXRlcy5sZW5ndGgpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbGVtZW50QXR0cmlidXRlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlID0gZWxlbWVudEF0dHJpYnV0ZXNbaV07XG4gICAgICAgICAgICBpZiAoIShmcmFnbWVudE5vZGU6IGFueSkuaGFzQXR0cmlidXRlKGF0dHJpYnV0ZS5ub2RlTmFtZSkpIHtcbiAgICAgICAgICAgICAgICAoZWxlbWVudE5vZGU6IGFueSkucmVtb3ZlQXR0cmlidXRlKFxuICAgICAgICAgICAgICAgICAgICBhdHRyaWJ1dGUubm9kZU5hbWVcbiAgICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGF0dHJpYnV0ZSA9IGF0dHJpYnV0ZXNbaV07XG4gICAgICAgIChlbGVtZW50Tm9kZTogYW55KS5zZXRBdHRyaWJ1dGUoXG4gICAgICAgICAgICBhdHRyaWJ1dGUubm9kZU5hbWUsXG4gICAgICAgICAgICBhdHRyaWJ1dGUubm9kZVZhbHVlXG4gICAgICAgICk7XG4gICAgfVxuICAgIGlmIChwcm9wc1N0b3JhZ2UuZ2V0KGZyYWdtZW50Tm9kZSkpIHtcbiAgICAgICAgY29uc3QgZWxQcm9wcyA9IHByb3BzU3RvcmFnZS5nZXQoZWxlbWVudE5vZGUpO1xuICAgICAgICBjb25zdCBmclByb3BzID0gcHJvcHNTdG9yYWdlLmdldChmcmFnbWVudE5vZGUpO1xuICAgICAgICBwcm9wc1N0b3JhZ2Uuc2V0KFxuICAgICAgICAgICAgZWxlbWVudE5vZGUsXG4gICAgICAgICAgICBmclByb3BzXG4gICAgICAgICk7XG4gICAgICAgIGlmICghc2hhbGxvd0VxdWFsKGVsUHJvcHMsIGZyUHJvcHMpKSB7XG4gICAgICAgICAgICBpZiAoaXNDdXN0b21Db21wb25lbnQoZWxlbWVudE5vZGUpKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyLmNhbGwoKGVsZW1lbnROb2RlOiBhbnkpKVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5mdW5jdGlvbiB1cGRhdGVFbGVtZW50KGVsZW1lbnROb2RlOiBOb2RlLCBmcmFnbWVudE5vZGU6IE5vZGUpOiB2b2lkIHtcbiAgICBpZiAoaXNDdXN0b21Db21wb25lbnQoZWxlbWVudE5vZGUpKSB7XG4gICAgICAgIHJldHVybiB1cGRhdGVBdHRyaWJ1dGVzKFxuICAgICAgICAgICAgZWxlbWVudE5vZGUsXG4gICAgICAgICAgICBmcmFnbWVudE5vZGVcbiAgICAgICAgKVxuICAgIH1cbiAgICBpZiAoIW5vZGVFcXVhbHMoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSkpIHtcbiAgICAgICAgdXBkYXRlQXR0cmlidXRlcyhcbiAgICAgICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICAgICAgZnJhZ21lbnROb2RlXG4gICAgICAgIClcbiAgICB9XG4gICAgdXBkYXRlQ2hpbGRyZW4oXG4gICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICBmcmFnbWVudE5vZGVcbiAgICApXG59XG5cbmZ1bmN0aW9uIGlzRW1wdHlOb2RlKG5vZGU6IE5vZGUpOiBib29sZWFuIHtcbiAgICBpZiAobm9kZS5ub2RlVHlwZSAhPT0gTm9kZS5URVhUX05PREUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIGlmIChub2RlLmNoaWxkTm9kZXMubGVuZ3RoKSB7XG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobm9kZS5pbm5lclRleHQpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4obm9kZS5pbm5lclRleHQudHJpbSgpKSA9PT0gZmFsc2VcbiAgICB9XG4gICAgaWYgKChub2RlOiBhbnkpLmlubmVySFRNTCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbigobm9kZTogYW55KS5pbm5lckhUTUwudHJpbSgpKSA9PT0gZmFsc2VcbiAgICB9XG4gICAgaWYgKChub2RlOiBhbnkpLnRleHRDb250ZW50KSB7XG4gICAgICAgIHJldHVybiBCb29sZWFuKChub2RlOiBhbnkpLnRleHRDb250ZW50LnRyaW0oKSkgPT09IGZhbHNlXG4gICAgfVxuICAgIHJldHVybiB0cnVlXG59XG5cbmZ1bmN0aW9uIG5vZGVGaWx0ZXIobm9kZTogTm9kZSk6IGJvb2xlYW4ge1xuICAgIGlmIChub2RlKSB7XG4gICAgICAgIHJldHVybiAobm9kZS5ub2RlVHlwZSA9PT0gTm9kZS5FTEVNRU5UX05PREUgfHxcbiAgICAgICAgICAgIG5vZGUubm9kZVR5cGUgPT09IE5vZGUuVEVYVF9OT0RFKSAmJlxuICAgICAgICAgICAgbm9kZS5ub2RlTmFtZSAhPT0gXCJTVFlMRVwiICYmXG4gICAgICAgICAgICAhaXNFbXB0eU5vZGUobm9kZSlcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG59XG5cbmZ1bmN0aW9uIGhhbmRsZUNoaWxkcmVuQ291bnRDaGFuZ2VkKGVsZW1lbnROb2RlOiBOb2RlLCBmcmFnbWVudE5vZGU6IE5vZGUsIGVsZW1lbnROb2RlczogTm9kZVtdLCBmcmFnbWVudE5vZGVzOiBOb2RlW10pOiB2b2lkIHtcbiAgICBjb25zdCBkZWxldGVkID0gZWxlbWVudHNEZWxldGVkKFxuICAgICAgICBlbGVtZW50Tm9kZXMsXG4gICAgICAgIGZyYWdtZW50Tm9kZXMsXG4gICAgKTtcbiAgICBpZiAoZnJhZ21lbnROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgcmV0dXJuIChlbGVtZW50Tm9kZS5wYXJlbnROb2RlOiBhbnkpLnJlcGxhY2VDaGlsZChcbiAgICAgICAgICAgIGZyYWdtZW50Tm9kZSxcbiAgICAgICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICApO1xuICAgIH1cbiAgICBpZiAoZGVsZXRlZC5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgKGRlbGV0ZWRbMF0ucGFyZW50Tm9kZTogYW55KS5yZW1vdmVDaGlsZChkZWxldGVkWzBdKTtcbiAgICAgICAgcmV0dXJuIHVwZGF0ZUNoaWxkcmVuKFxuICAgICAgICAgICAgZWxlbWVudE5vZGUsXG4gICAgICAgICAgICBmcmFnbWVudE5vZGVcbiAgICAgICAgKVxuICAgIH1cbiAgICBpZiAoY2hpbGRyZW5DaGFuZ2VkQ291bnQoZWxlbWVudE5vZGVzLCBmcmFnbWVudE5vZGVzKSA+IDApIHtcbiAgICAgICAgcmV0dXJuIChlbGVtZW50Tm9kZS5wYXJlbnROb2RlOiBhbnkpLnJlcGxhY2VDaGlsZChcbiAgICAgICAgICAgIGZyYWdtZW50Tm9kZSxcbiAgICAgICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gYXBwZW5kQ2hpbGRyZW4oXG4gICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICBlbGVtZW50Tm9kZXMsXG4gICAgICAgIGZyYWdtZW50Tm9kZXMsXG4gICAgKVxufVxuXG5mdW5jdGlvbiB1cGRhdGVDaGlsZHJlbihlbGVtZW50Tm9kZTogTm9kZSwgZnJhZ21lbnROb2RlOiBOb2RlKTogdm9pZCB7XG4gICAgY29uc3QgZWxlbWVudE5vZGVzID0gQXJyYXkuZnJvbShlbGVtZW50Tm9kZS5jaGlsZE5vZGVzKS5maWx0ZXIobm9kZUZpbHRlcik7XG4gICAgY29uc3QgZnJhZ21lbnROb2RlcyA9IEFycmF5LmZyb20oZnJhZ21lbnROb2RlLmNoaWxkTm9kZXMpLmZpbHRlcihub2RlRmlsdGVyKTtcbiAgICBpZiAoZWxlbWVudE5vZGVzLmxlbmd0aCAhPT0gZnJhZ21lbnROb2Rlcy5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGhhbmRsZUNoaWxkcmVuQ291bnRDaGFuZ2VkKFxuICAgICAgICAgICAgZWxlbWVudE5vZGUsXG4gICAgICAgICAgICBmcmFnbWVudE5vZGUsXG4gICAgICAgICAgICBlbGVtZW50Tm9kZXMsXG4gICAgICAgICAgICBmcmFnbWVudE5vZGVzXG4gICAgICAgIClcbiAgICB9XG4gICAgaWYgKGVsZW1lbnROb2Rlcy5sZW5ndGggPT09IDAgJiYgZnJhZ21lbnROb2Rlcy5sZW5ndGggPT09IDApIHtcbiAgICAgICAgaWYgKGNvbnRlbnREaWZmZXIoZWxlbWVudE5vZGUsIGZyYWdtZW50Tm9kZSkpIHtcbiAgICAgICAgICAgIHJldHVybiAoZWxlbWVudE5vZGUucGFyZW50Tm9kZTogYW55KS5yZXBsYWNlQ2hpbGQoXG4gICAgICAgICAgICAgICAgZnJhZ21lbnROb2RlLFxuICAgICAgICAgICAgICAgIGVsZW1lbnROb2RlLFxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVsZW1lbnROb2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICB1cGRhdGVFbGVtZW50KFxuICAgICAgICAgICAgZWxlbWVudE5vZGVzW2ldLFxuICAgICAgICAgICAgZnJhZ21lbnROb2Rlc1tpXVxuICAgICAgICApXG4gICAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVGcmFnbWVudEZyb21TdHIodHBsOiBzdHJpbmcpOiBIVE1MVGVtcGxhdGVFbGVtZW50IHtcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZW1wbGF0ZVwiKTtcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSB0cGw7XG4gICAgcmV0dXJuIHRlbXBsYXRlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW5kZXIoKSB7XG4gICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IHN0YXJ0IHJlbmRlcmluZycpO1xuICAgIHRoaXMuYmVmb3JlUmVuZGVyKCk7XG5cbiAgICBpZiAodGhpcy5pc1NoYWRvdyAmJiAhdGhpcy5zaGFkb3dSb290KSB7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBhdHRhY2hpbmcgcm9vdCcpO1xuICAgICAgICB0aGlzLmF0dGFjaFNoYWRvdyh7bW9kZTogJ29wZW4nfSk7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCByb290IGF0dGFjaGVkJyk7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXG4gICAgICAgICAgICBcIm11c2tvdCBhdHRhY2ggcm9vdFwiLFxuICAgICAgICAgICAgJ211c2tvdCBhdHRhY2hpbmcgcm9vdCcsXG4gICAgICAgICAgICAnbXVza290IHJvb3QgYXR0YWNoZWQnXG4gICAgICAgICk7XG4gICAgfVxuICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBjcmVhdGUgcmVuZGVyIERPTScpO1xuICAgIGNvbnN0IHJlbmRlclJlcyA9IHRoaXMucmVuZGVyKCk7XG4gICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IHJlbmRlciBET00gY3JlYXRlZCcpO1xuICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXG4gICAgICAgIFwibXVza290IGNvbXBvbmVudCByZW5kZXIgcmVzdWx0XCIsXG4gICAgICAgICdtdXNrb3QgY3JlYXRlIHJlbmRlciBET00nLFxuICAgICAgICAnbXVza290IHJlbmRlciBET00gY3JlYXRlZCdcbiAgICApO1xuXG4gICAgY29uc3Qgcm9vdCA9IHRoaXMuaXNTaGFkb3cgPyAodGhpcy5zaGFkb3dSb290OiBhbnkpIDogdGhpcztcbiAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgY3JlYXRlIGZyYWdtZW50Jyk7XG4gICAgY29uc3QgZnJhZ21lbnQgPSB0eXBlb2YgcmVuZGVyUmVzID09PSBcInN0cmluZ1wiID8gY3JlYXRlRnJhZ21lbnRGcm9tU3RyKHJlbmRlclJlcykgOiByZW5kZXJSZXM7XG4gICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGZyYWdtZW50IGNyZWF0ZWQnKTtcbiAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKFxuICAgICAgICBcIm11c2tvdCBmcmFnbWVudCBjcmVhdGlvblwiLFxuICAgICAgICAnbXVza290IGNyZWF0ZSBmcmFnbWVudCcsXG4gICAgICAgICdtdXNrb3QgZnJhZ21lbnQgY3JlYXRlZCdcbiAgICApO1xuXG4gICAgaWYgKCF0aGlzLm1vdW50ZWQpIHtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGluc2VydCBzdHlsZSBpbnRvIGNvbXBvbmVudCcpO1xuICAgICAgICByb290LmlubmVySFRNTCA9IGA8c3R5bGU+JHt0aGlzLnN0eWxlc308L3N0eWxlPmA7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBzdHlsZSBpbnNlcnRlZCcpO1xuICAgICAgICBwZXJmb3JtYW5jZS5tZWFzdXJlKFxuICAgICAgICAgICAgXCJtdXNrb3Qgc3R5bGUgY3JlYXRpb24gJiBpbnNlcnQgYnkgaW5uZXJIVE1MXCIsXG4gICAgICAgICAgICAnbXVza290IGluc2VydCBzdHlsZSBpbnRvIGNvbXBvbmVudCcsXG4gICAgICAgICAgICAnbXVza290IHN0eWxlIGluc2VydGVkJ1xuICAgICAgICApO1xuXG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBhcHBlbmQgY2hpbGQgd2l0aCBjb250ZW50Jyk7XG4gICAgICAgIHJvb3QuYXBwZW5kQ2hpbGQoZnJhZ21lbnQuY29udGVudCk7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBjb250ZW50IGFwcGVuZGVkJyk7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXG4gICAgICAgICAgICBcIm11c2tvdCBhcHBlbmQgY29udGVudCBvbiBpbml0aWFsIHJlbmRlclwiLFxuICAgICAgICAgICAgJ211c2tvdCBhcHBlbmQgY2hpbGQgd2l0aCBjb250ZW50JyxcbiAgICAgICAgICAgICdtdXNrb3QgY29udGVudCBhcHBlbmRlZCdcbiAgICAgICAgKTtcblxuICAgICAgICB0aGlzLm1vdW50ZWQgPSB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICAgIHBlcmZvcm1hbmNlLm1hcmsoJ211c2tvdCBpbnNlcnQgc3R5bGVzIGJlZm9yZSBjb250ZW50IG9uIHVwZGF0ZScpO1xuICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgICAgICAgc3R5bGUuaW5uZXJIVE1MID0gdGhpcy5zdHlsZXM7XG4gICAgICAgIGZyYWdtZW50LmNvbnRlbnQuaW5zZXJ0QmVmb3JlKFxuICAgICAgICAgICAgc3R5bGUsXG4gICAgICAgICAgICBmcmFnbWVudC5jb250ZW50LmZpcnN0Q2hpbGRcbiAgICAgICAgKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IHN0eWxlcyBpbnNlcnRlZCBvbiB1cGRhdGUnKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShcbiAgICAgICAgICAgIFwibXVza290IGFkZCBzdHlsZXMgYnkgaW5zZXJ0QmVmb3JlXCIsXG4gICAgICAgICAgICAnbXVza290IGluc2VydCBzdHlsZXMgYmVmb3JlIGNvbnRlbnQgb24gdXBkYXRlJyxcbiAgICAgICAgICAgICdtdXNrb3Qgc3R5bGVzIGluc2VydGVkIG9uIHVwZGF0ZSdcbiAgICAgICAgKTtcblxuICAgICAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgdXBkYXRlIGNoaWxkcmVuJyk7XG4gICAgICAgIHVwZGF0ZUNoaWxkcmVuKFxuICAgICAgICAgICAgcm9vdCxcbiAgICAgICAgICAgIGZyYWdtZW50LmNvbnRlbnRcbiAgICAgICAgKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWFyaygnbXVza290IGNoaWxkcmVuIHVwZGF0ZWQnKTtcbiAgICAgICAgcGVyZm9ybWFuY2UubWVhc3VyZShcbiAgICAgICAgICAgIFwibXVza290IHVwZGF0ZSBjb21wb25lbnQncyBjaGlsZHJlblwiLFxuICAgICAgICAgICAgJ211c2tvdCB1cGRhdGUgY2hpbGRyZW4nLFxuICAgICAgICAgICAgJ211c2tvdCBjaGlsZHJlbiB1cGRhdGVkJ1xuICAgICAgICApO1xuICAgIH1cbiAgICBwZXJmb3JtYW5jZS5tYXJrKCdtdXNrb3QgZmluaXNoIHJlbmRlcmluZycpO1xuICAgIHBlcmZvcm1hbmNlLm1lYXN1cmUoXG4gICAgICAgIFwibXVza290IGZ1bGwgcmVuZGVyXCIsXG4gICAgICAgICdtdXNrb3Qgc3RhcnQgcmVuZGVyaW5nJyxcbiAgICAgICAgJ211c2tvdCBmaW5pc2ggcmVuZGVyaW5nJ1xuICAgICk7XG5cbiAgICB0aGlzLmFmdGVyUmVuZGVyKCk7XG59XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3JlbmRlci5qcyIsImNvbnN0IGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBpbmxpbmVkIE9iamVjdC5pcyBwb2x5ZmlsbCB0byBhdm9pZCByZXF1aXJpbmcgY29uc3VtZXJzIHNoaXAgdGhlaXIgb3duXG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9KYXZhU2NyaXB0L1JlZmVyZW5jZS9HbG9iYWxfT2JqZWN0cy9PYmplY3QvaXNcbiAqL1xuZnVuY3Rpb24gaXMoeCwgeSkge1xuICAgIC8vIFNhbWVWYWx1ZSBhbGdvcml0aG1cbiAgICBpZiAoeCA9PT0geSkge1xuICAgICAgICAvLyBTdGVwcyAxLTUsIDctMTBcbiAgICAgICAgLy8gU3RlcHMgNi5iLTYuZTogKzAgIT0gLTBcbiAgICAgICAgLy8gQWRkZWQgdGhlIG5vbnplcm8geSBjaGVjayB0byBtYWtlIEZsb3cgaGFwcHksIGJ1dCBpdCBpcyByZWR1bmRhbnRcbiAgICAgICAgcmV0dXJuIHggIT09IDAgfHwgeSAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgLy8gU3RlcCA2LmE6IE5hTiA9PSBOYU5cbiAgICAgICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgICB9XG59XG5cbi8qKlxuICogUGVyZm9ybXMgZXF1YWxpdHkgYnkgaXRlcmF0aW5nIHRocm91Z2gga2V5cyBvbiBhbiBvYmplY3QgYW5kIHJldHVybmluZyBmYWxzZVxuICogd2hlbiBhbnkga2V5IGhhcyB2YWx1ZXMgd2hpY2ggYXJlIG5vdCBzdHJpY3RseSBlcXVhbCBiZXR3ZWVuIHRoZSBhcmd1bWVudHMuXG4gKiBSZXR1cm5zIHRydWUgd2hlbiB0aGUgdmFsdWVzIG9mIGFsbCBrZXlzIGFyZSBzdHJpY3RseSBlcXVhbC5cbiAqL1xuZnVuY3Rpb24gc2hhbGxvd0VxdWFsKG9iakE6IG1peGVkLCBvYmpCOiBtaXhlZCk6IGJvb2xlYW4ge1xuICAgIGlmIChpcyhvYmpBLCBvYmpCKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAoXG4gICAgICAgIHR5cGVvZiBvYmpBICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICBvYmpBID09PSBudWxsIHx8XG4gICAgICAgIHR5cGVvZiBvYmpCICE9PSAnb2JqZWN0JyB8fFxuICAgICAgICBvYmpCID09PSBudWxsXG4gICAgKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBjb25zdCBrZXlzQSA9IE9iamVjdC5rZXlzKG9iakEpO1xuICAgIGNvbnN0IGtleXNCID0gT2JqZWN0LmtleXMob2JqQik7XG5cbiAgICBpZiAoa2V5c0EubGVuZ3RoICE9PSBrZXlzQi5sZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8vIFRlc3QgZm9yIEEncyBrZXlzIGRpZmZlcmVudCBmcm9tIEIuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzQS5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhaGFzT3duUHJvcGVydHkuY2FsbChvYmpCLCBrZXlzQVtpXSkgfHxcbiAgICAgICAgICAgICFpcyhvYmpBW2tleXNBW2ldXSwgb2JqQltrZXlzQVtpXV0pXG4gICAgICAgICkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNoYWxsb3dFcXVhbDtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9zcmMvc2hhbGxvdy1lcXVhbC5qcyIsImltcG9ydCB7Y2hhbmdlV2ViQ29tcG9uZW50c1JlYWR5Q2hlY2t9IGZyb20gXCIuL2luZGV4XCJcblxuY2hhbmdlV2ViQ29tcG9uZW50c1JlYWR5Q2hlY2soXG4gICAgKCkgPT4ge1xuICAgICAgICBpZiAoJ2N1c3RvbUVsZW1lbnRzJyBpbiB3aW5kb3cpIHtcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBuZXcgUHJvbWlzZTxudWxsPigocmVzb2x2ZTogRnVuY3Rpb24pID0+IHtcbiAgICAgICAgICAgIHJlcXVpcmUoXCJAd2ViY29tcG9uZW50cy9jdXN0b20tZWxlbWVudHNcIikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ1dlYkNvbXBvbmVudHNSZWFkeScsIHJlc29sdmUpO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgfSlcbiAgICB9XG4pO1xuXG5leHBvcnQgKiBmcm9tIFwiLi9pbmRleFwiXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vc3JjL3dpdGgtcG9seWZpbGwuanMiLCIoZnVuY3Rpb24oKXtcbid1c2Ugc3RyaWN0Jzt2YXIgaD1uZXcgZnVuY3Rpb24oKXt9O3ZhciBhYT1uZXcgU2V0KFwiYW5ub3RhdGlvbi14bWwgY29sb3ItcHJvZmlsZSBmb250LWZhY2UgZm9udC1mYWNlLXNyYyBmb250LWZhY2UtdXJpIGZvbnQtZmFjZS1mb3JtYXQgZm9udC1mYWNlLW5hbWUgbWlzc2luZy1nbHlwaFwiLnNwbGl0KFwiIFwiKSk7ZnVuY3Rpb24gbShiKXt2YXIgYT1hYS5oYXMoYik7Yj0vXlthLXpdWy4wLTlfYS16XSotW1xcLS4wLTlfYS16XSokLy50ZXN0KGIpO3JldHVybiFhJiZifWZ1bmN0aW9uIG4oYil7dmFyIGE9Yi5pc0Nvbm5lY3RlZDtpZih2b2lkIDAhPT1hKXJldHVybiBhO2Zvcig7YiYmIShiLl9fQ0VfaXNJbXBvcnREb2N1bWVudHx8YiBpbnN0YW5jZW9mIERvY3VtZW50KTspYj1iLnBhcmVudE5vZGV8fCh3aW5kb3cuU2hhZG93Um9vdCYmYiBpbnN0YW5jZW9mIFNoYWRvd1Jvb3Q/Yi5ob3N0OnZvaWQgMCk7cmV0dXJuISghYnx8IShiLl9fQ0VfaXNJbXBvcnREb2N1bWVudHx8YiBpbnN0YW5jZW9mIERvY3VtZW50KSl9XG5mdW5jdGlvbiBwKGIsYSl7Zm9yKDthJiZhIT09YiYmIWEubmV4dFNpYmxpbmc7KWE9YS5wYXJlbnROb2RlO3JldHVybiBhJiZhIT09Yj9hLm5leHRTaWJsaW5nOm51bGx9XG5mdW5jdGlvbiB0KGIsYSxjKXtjPWM/YzpuZXcgU2V0O2Zvcih2YXIgZD1iO2Q7KXtpZihkLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREUpe3ZhciBlPWQ7YShlKTt2YXIgZj1lLmxvY2FsTmFtZTtpZihcImxpbmtcIj09PWYmJlwiaW1wb3J0XCI9PT1lLmdldEF0dHJpYnV0ZShcInJlbFwiKSl7ZD1lLmltcG9ydDtpZihkIGluc3RhbmNlb2YgTm9kZSYmIWMuaGFzKGQpKWZvcihjLmFkZChkKSxkPWQuZmlyc3RDaGlsZDtkO2Q9ZC5uZXh0U2libGluZyl0KGQsYSxjKTtkPXAoYixlKTtjb250aW51ZX1lbHNlIGlmKFwidGVtcGxhdGVcIj09PWYpe2Q9cChiLGUpO2NvbnRpbnVlfWlmKGU9ZS5fX0NFX3NoYWRvd1Jvb3QpZm9yKGU9ZS5maXJzdENoaWxkO2U7ZT1lLm5leHRTaWJsaW5nKXQoZSxhLGMpfWQ9ZC5maXJzdENoaWxkP2QuZmlyc3RDaGlsZDpwKGIsZCl9fWZ1bmN0aW9uIHUoYixhLGMpe2JbYV09Y307ZnVuY3Rpb24gdigpe3RoaXMuYT1uZXcgTWFwO3RoaXMucz1uZXcgTWFwO3RoaXMuZj1bXTt0aGlzLmI9ITF9ZnVuY3Rpb24gYmEoYixhLGMpe2IuYS5zZXQoYSxjKTtiLnMuc2V0KGMuY29uc3RydWN0b3IsYyl9ZnVuY3Rpb24gdyhiLGEpe2IuYj0hMDtiLmYucHVzaChhKX1mdW5jdGlvbiB4KGIsYSl7Yi5iJiZ0KGEsZnVuY3Rpb24oYSl7cmV0dXJuIHkoYixhKX0pfWZ1bmN0aW9uIHkoYixhKXtpZihiLmImJiFhLl9fQ0VfcGF0Y2hlZCl7YS5fX0NFX3BhdGNoZWQ9ITA7Zm9yKHZhciBjPTA7YzxiLmYubGVuZ3RoO2MrKyliLmZbY10oYSl9fWZ1bmN0aW9uIHooYixhKXt2YXIgYz1bXTt0KGEsZnVuY3Rpb24oYil7cmV0dXJuIGMucHVzaChiKX0pO2ZvcihhPTA7YTxjLmxlbmd0aDthKyspe3ZhciBkPWNbYV07MT09PWQuX19DRV9zdGF0ZT9iLmNvbm5lY3RlZENhbGxiYWNrKGQpOkEoYixkKX19XG5mdW5jdGlvbiBCKGIsYSl7dmFyIGM9W107dChhLGZ1bmN0aW9uKGIpe3JldHVybiBjLnB1c2goYil9KTtmb3IoYT0wO2E8Yy5sZW5ndGg7YSsrKXt2YXIgZD1jW2FdOzE9PT1kLl9fQ0Vfc3RhdGUmJmIuZGlzY29ubmVjdGVkQ2FsbGJhY2soZCl9fVxuZnVuY3Rpb24gQyhiLGEsYyl7Yz1jP2M6e307dmFyIGQ9Yy53fHxuZXcgU2V0LGU9Yy5pfHxmdW5jdGlvbihhKXtyZXR1cm4gQShiLGEpfSxmPVtdO3QoYSxmdW5jdGlvbihhKXtpZihcImxpbmtcIj09PWEubG9jYWxOYW1lJiZcImltcG9ydFwiPT09YS5nZXRBdHRyaWJ1dGUoXCJyZWxcIikpe3ZhciBjPWEuaW1wb3J0O2MgaW5zdGFuY2VvZiBOb2RlJiYoYy5fX0NFX2lzSW1wb3J0RG9jdW1lbnQ9ITAsYy5fX0NFX2hhc1JlZ2lzdHJ5PSEwKTtjJiZcImNvbXBsZXRlXCI9PT1jLnJlYWR5U3RhdGU/Yy5fX0NFX2RvY3VtZW50TG9hZEhhbmRsZWQ9ITA6YS5hZGRFdmVudExpc3RlbmVyKFwibG9hZFwiLGZ1bmN0aW9uKCl7dmFyIGM9YS5pbXBvcnQ7aWYoIWMuX19DRV9kb2N1bWVudExvYWRIYW5kbGVkKXtjLl9fQ0VfZG9jdW1lbnRMb2FkSGFuZGxlZD0hMDt2YXIgZj1uZXcgU2V0KGQpO2YuZGVsZXRlKGMpO0MoYixjLHt3OmYsaTplfSl9fSl9ZWxzZSBmLnB1c2goYSl9LGQpO2lmKGIuYilmb3IoYT0wO2E8XG5mLmxlbmd0aDthKyspeShiLGZbYV0pO2ZvcihhPTA7YTxmLmxlbmd0aDthKyspZShmW2FdKX1cbmZ1bmN0aW9uIEEoYixhKXtpZih2b2lkIDA9PT1hLl9fQ0Vfc3RhdGUpe3ZhciBjPWEub3duZXJEb2N1bWVudDtpZihjLmRlZmF1bHRWaWV3fHxjLl9fQ0VfaXNJbXBvcnREb2N1bWVudCYmYy5fX0NFX2hhc1JlZ2lzdHJ5KWlmKGM9Yi5hLmdldChhLmxvY2FsTmFtZSkpe2MuY29uc3RydWN0aW9uU3RhY2sucHVzaChhKTt2YXIgZD1jLmNvbnN0cnVjdG9yO3RyeXt0cnl7aWYobmV3IGQhPT1hKXRocm93IEVycm9yKFwiVGhlIGN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9yIGRpZCBub3QgcHJvZHVjZSB0aGUgZWxlbWVudCBiZWluZyB1cGdyYWRlZC5cIik7fWZpbmFsbHl7Yy5jb25zdHJ1Y3Rpb25TdGFjay5wb3AoKX19Y2F0Y2gocil7dGhyb3cgYS5fX0NFX3N0YXRlPTIscjt9YS5fX0NFX3N0YXRlPTE7YS5fX0NFX2RlZmluaXRpb249YztpZihjLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjaylmb3IoYz1jLm9ic2VydmVkQXR0cmlidXRlcyxkPTA7ZDxjLmxlbmd0aDtkKyspe3ZhciBlPWNbZF0sXG5mPWEuZ2V0QXR0cmlidXRlKGUpO251bGwhPT1mJiZiLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayhhLGUsbnVsbCxmLG51bGwpfW4oYSkmJmIuY29ubmVjdGVkQ2FsbGJhY2soYSl9fX12LnByb3RvdHlwZS5jb25uZWN0ZWRDYWxsYmFjaz1mdW5jdGlvbihiKXt2YXIgYT1iLl9fQ0VfZGVmaW5pdGlvbjthLmNvbm5lY3RlZENhbGxiYWNrJiZhLmNvbm5lY3RlZENhbGxiYWNrLmNhbGwoYil9O3YucHJvdG90eXBlLmRpc2Nvbm5lY3RlZENhbGxiYWNrPWZ1bmN0aW9uKGIpe3ZhciBhPWIuX19DRV9kZWZpbml0aW9uO2EuZGlzY29ubmVjdGVkQ2FsbGJhY2smJmEuZGlzY29ubmVjdGVkQ2FsbGJhY2suY2FsbChiKX07XG52LnByb3RvdHlwZS5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2s9ZnVuY3Rpb24oYixhLGMsZCxlKXt2YXIgZj1iLl9fQ0VfZGVmaW5pdGlvbjtmLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayYmLTE8Zi5vYnNlcnZlZEF0dHJpYnV0ZXMuaW5kZXhPZihhKSYmZi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2suY2FsbChiLGEsYyxkLGUpfTtmdW5jdGlvbiBEKGIsYSl7dGhpcy5jPWI7dGhpcy5hPWE7dGhpcy5iPXZvaWQgMDtDKHRoaXMuYyx0aGlzLmEpO1wibG9hZGluZ1wiPT09dGhpcy5hLnJlYWR5U3RhdGUmJih0aGlzLmI9bmV3IE11dGF0aW9uT2JzZXJ2ZXIodGhpcy5mLmJpbmQodGhpcykpLHRoaXMuYi5vYnNlcnZlKHRoaXMuYSx7Y2hpbGRMaXN0OiEwLHN1YnRyZWU6ITB9KSl9ZnVuY3Rpb24gRShiKXtiLmImJmIuYi5kaXNjb25uZWN0KCl9RC5wcm90b3R5cGUuZj1mdW5jdGlvbihiKXt2YXIgYT10aGlzLmEucmVhZHlTdGF0ZTtcImludGVyYWN0aXZlXCIhPT1hJiZcImNvbXBsZXRlXCIhPT1hfHxFKHRoaXMpO2ZvcihhPTA7YTxiLmxlbmd0aDthKyspZm9yKHZhciBjPWJbYV0uYWRkZWROb2RlcyxkPTA7ZDxjLmxlbmd0aDtkKyspQyh0aGlzLmMsY1tkXSl9O2Z1bmN0aW9uIGNhKCl7dmFyIGI9dGhpczt0aGlzLmI9dGhpcy5hPXZvaWQgMDt0aGlzLmY9bmV3IFByb21pc2UoZnVuY3Rpb24oYSl7Yi5iPWE7Yi5hJiZhKGIuYSl9KX1mdW5jdGlvbiBGKGIpe2lmKGIuYSl0aHJvdyBFcnJvcihcIkFscmVhZHkgcmVzb2x2ZWQuXCIpO2IuYT12b2lkIDA7Yi5iJiZiLmIodm9pZCAwKX07ZnVuY3Rpb24gRyhiKXt0aGlzLmo9ITE7dGhpcy5jPWI7dGhpcy5vPW5ldyBNYXA7dGhpcy5sPWZ1bmN0aW9uKGIpe3JldHVybiBiKCl9O3RoaXMuZz0hMTt0aGlzLm09W107dGhpcy51PW5ldyBEKGIsZG9jdW1lbnQpfVxuRy5wcm90b3R5cGUuZGVmaW5lPWZ1bmN0aW9uKGIsYSl7dmFyIGM9dGhpcztpZighKGEgaW5zdGFuY2VvZiBGdW5jdGlvbikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9ycyBtdXN0IGJlIGZ1bmN0aW9ucy5cIik7aWYoIW0oYikpdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIGVsZW1lbnQgbmFtZSAnXCIrYitcIicgaXMgbm90IHZhbGlkLlwiKTtpZih0aGlzLmMuYS5nZXQoYikpdGhyb3cgRXJyb3IoXCJBIGN1c3RvbSBlbGVtZW50IHdpdGggbmFtZSAnXCIrYitcIicgaGFzIGFscmVhZHkgYmVlbiBkZWZpbmVkLlwiKTtpZih0aGlzLmopdGhyb3cgRXJyb3IoXCJBIGN1c3RvbSBlbGVtZW50IGlzIGFscmVhZHkgYmVpbmcgZGVmaW5lZC5cIik7dGhpcy5qPSEwO3ZhciBkLGUsZixyLGs7dHJ5e3ZhciBnPWZ1bmN0aW9uKGIpe3ZhciBhPWxbYl07aWYodm9pZCAwIT09YSYmIShhIGluc3RhbmNlb2YgRnVuY3Rpb24pKXRocm93IEVycm9yKFwiVGhlICdcIitiK1wiJyBjYWxsYmFjayBtdXN0IGJlIGEgZnVuY3Rpb24uXCIpO1xucmV0dXJuIGF9LGw9YS5wcm90b3R5cGU7aWYoIShsIGluc3RhbmNlb2YgT2JqZWN0KSl0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIGN1c3RvbSBlbGVtZW50IGNvbnN0cnVjdG9yJ3MgcHJvdG90eXBlIGlzIG5vdCBhbiBvYmplY3QuXCIpO2Q9ZyhcImNvbm5lY3RlZENhbGxiYWNrXCIpO2U9ZyhcImRpc2Nvbm5lY3RlZENhbGxiYWNrXCIpO2Y9ZyhcImFkb3B0ZWRDYWxsYmFja1wiKTtyPWcoXCJhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tcIik7az1hLm9ic2VydmVkQXR0cmlidXRlc3x8W119Y2F0Y2gocSl7cmV0dXJufWZpbmFsbHl7dGhpcy5qPSExfWE9e2xvY2FsTmFtZTpiLGNvbnN0cnVjdG9yOmEsY29ubmVjdGVkQ2FsbGJhY2s6ZCxkaXNjb25uZWN0ZWRDYWxsYmFjazplLGFkb3B0ZWRDYWxsYmFjazpmLGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjazpyLG9ic2VydmVkQXR0cmlidXRlczprLGNvbnN0cnVjdGlvblN0YWNrOltdfTtiYSh0aGlzLmMsYixhKTt0aGlzLm0ucHVzaChhKTt0aGlzLmd8fFxuKHRoaXMuZz0hMCx0aGlzLmwoZnVuY3Rpb24oKXtyZXR1cm4gZGEoYyl9KSl9O0cucHJvdG90eXBlLmk9ZnVuY3Rpb24oYil7Qyh0aGlzLmMsYil9O2Z1bmN0aW9uIGRhKGIpe2lmKCExIT09Yi5nKXtiLmc9ITE7Zm9yKHZhciBhPWIubSxjPVtdLGQ9bmV3IE1hcCxlPTA7ZTxhLmxlbmd0aDtlKyspZC5zZXQoYVtlXS5sb2NhbE5hbWUsW10pO0MoYi5jLGRvY3VtZW50LHtpOmZ1bmN0aW9uKGEpe2lmKHZvaWQgMD09PWEuX19DRV9zdGF0ZSl7dmFyIGU9YS5sb2NhbE5hbWUsZj1kLmdldChlKTtmP2YucHVzaChhKTpiLmMuYS5nZXQoZSkmJmMucHVzaChhKX19fSk7Zm9yKGU9MDtlPGMubGVuZ3RoO2UrKylBKGIuYyxjW2VdKTtmb3IoOzA8YS5sZW5ndGg7KXtmb3IodmFyIGY9YS5zaGlmdCgpLGU9Zi5sb2NhbE5hbWUsZj1kLmdldChmLmxvY2FsTmFtZSkscj0wO3I8Zi5sZW5ndGg7cisrKUEoYi5jLGZbcl0pOyhlPWIuby5nZXQoZSkpJiZGKGUpfX19XG5HLnByb3RvdHlwZS5nZXQ9ZnVuY3Rpb24oYil7aWYoYj10aGlzLmMuYS5nZXQoYikpcmV0dXJuIGIuY29uc3RydWN0b3J9O0cucHJvdG90eXBlLndoZW5EZWZpbmVkPWZ1bmN0aW9uKGIpe2lmKCFtKGIpKXJldHVybiBQcm9taXNlLnJlamVjdChuZXcgU3ludGF4RXJyb3IoXCInXCIrYitcIicgaXMgbm90IGEgdmFsaWQgY3VzdG9tIGVsZW1lbnQgbmFtZS5cIikpO3ZhciBhPXRoaXMuby5nZXQoYik7aWYoYSlyZXR1cm4gYS5mO2E9bmV3IGNhO3RoaXMuby5zZXQoYixhKTt0aGlzLmMuYS5nZXQoYikmJiF0aGlzLm0uc29tZShmdW5jdGlvbihhKXtyZXR1cm4gYS5sb2NhbE5hbWU9PT1ifSkmJkYoYSk7cmV0dXJuIGEuZn07Ry5wcm90b3R5cGUudj1mdW5jdGlvbihiKXtFKHRoaXMudSk7dmFyIGE9dGhpcy5sO3RoaXMubD1mdW5jdGlvbihjKXtyZXR1cm4gYihmdW5jdGlvbigpe3JldHVybiBhKGMpfSl9fTt3aW5kb3cuQ3VzdG9tRWxlbWVudFJlZ2lzdHJ5PUc7XG5HLnByb3RvdHlwZS5kZWZpbmU9Ry5wcm90b3R5cGUuZGVmaW5lO0cucHJvdG90eXBlLnVwZ3JhZGU9Ry5wcm90b3R5cGUuaTtHLnByb3RvdHlwZS5nZXQ9Ry5wcm90b3R5cGUuZ2V0O0cucHJvdG90eXBlLndoZW5EZWZpbmVkPUcucHJvdG90eXBlLndoZW5EZWZpbmVkO0cucHJvdG90eXBlLnBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2s9Ry5wcm90b3R5cGUudjt2YXIgSD13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnQsST13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmNyZWF0ZUVsZW1lbnROUyxlYT13aW5kb3cuRG9jdW1lbnQucHJvdG90eXBlLmltcG9ydE5vZGUsZmE9d2luZG93LkRvY3VtZW50LnByb3RvdHlwZS5wcmVwZW5kLGdhPXdpbmRvdy5Eb2N1bWVudC5wcm90b3R5cGUuYXBwZW5kLGhhPXdpbmRvdy5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5wcmVwZW5kLGlhPXdpbmRvdy5Eb2N1bWVudEZyYWdtZW50LnByb3RvdHlwZS5hcHBlbmQsSj13aW5kb3cuTm9kZS5wcm90b3R5cGUuY2xvbmVOb2RlLEs9d2luZG93Lk5vZGUucHJvdG90eXBlLmFwcGVuZENoaWxkLEw9d2luZG93Lk5vZGUucHJvdG90eXBlLmluc2VydEJlZm9yZSxNPXdpbmRvdy5Ob2RlLnByb3RvdHlwZS5yZW1vdmVDaGlsZCxOPXdpbmRvdy5Ob2RlLnByb3RvdHlwZS5yZXBsYWNlQ2hpbGQsTz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHdpbmRvdy5Ob2RlLnByb3RvdHlwZSxcblwidGV4dENvbnRlbnRcIiksUD13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYXR0YWNoU2hhZG93LFE9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuRWxlbWVudC5wcm90b3R5cGUsXCJpbm5lckhUTUxcIiksUj13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlLFM9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZSxUPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGUsVT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuZ2V0QXR0cmlidXRlTlMsamE9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnNldEF0dHJpYnV0ZU5TLGthPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmVBdHRyaWJ1dGVOUyxsYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50LG1hPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5pbnNlcnRBZGphY2VudEhUTUwsbmE9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnByZXBlbmQsXG5vYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYXBwZW5kLFY9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLmJlZm9yZSxwYT13aW5kb3cuRWxlbWVudC5wcm90b3R5cGUuYWZ0ZXIscWE9d2luZG93LkVsZW1lbnQucHJvdG90eXBlLnJlcGxhY2VXaXRoLHJhPXdpbmRvdy5FbGVtZW50LnByb3RvdHlwZS5yZW1vdmUsc2E9d2luZG93LkhUTUxFbGVtZW50LFc9T2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih3aW5kb3cuSFRNTEVsZW1lbnQucHJvdG90eXBlLFwiaW5uZXJIVE1MXCIpLHRhPXdpbmRvdy5IVE1MRWxlbWVudC5wcm90b3R5cGUuaW5zZXJ0QWRqYWNlbnRFbGVtZW50LHVhPXdpbmRvdy5IVE1MRWxlbWVudC5wcm90b3R5cGUuaW5zZXJ0QWRqYWNlbnRIVE1MO2Z1bmN0aW9uIHZhKCl7dmFyIGI9WDt3aW5kb3cuSFRNTEVsZW1lbnQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3RvcixkPWIucy5nZXQoYSk7aWYoIWQpdGhyb3cgRXJyb3IoXCJUaGUgY3VzdG9tIGVsZW1lbnQgYmVpbmcgY29uc3RydWN0ZWQgd2FzIG5vdCByZWdpc3RlcmVkIHdpdGggYGN1c3RvbUVsZW1lbnRzYC5cIik7dmFyIGU9ZC5jb25zdHJ1Y3Rpb25TdGFjaztpZighZS5sZW5ndGgpcmV0dXJuIGU9SC5jYWxsKGRvY3VtZW50LGQubG9jYWxOYW1lKSxPYmplY3Quc2V0UHJvdG90eXBlT2YoZSxhLnByb3RvdHlwZSksZS5fX0NFX3N0YXRlPTEsZS5fX0NFX2RlZmluaXRpb249ZCx5KGIsZSksZTt2YXIgZD1lLmxlbmd0aC0xLGY9ZVtkXTtpZihmPT09aCl0aHJvdyBFcnJvcihcIlRoZSBIVE1MRWxlbWVudCBjb25zdHJ1Y3RvciB3YXMgZWl0aGVyIGNhbGxlZCByZWVudHJhbnRseSBmb3IgdGhpcyBjb25zdHJ1Y3RvciBvciBjYWxsZWQgbXVsdGlwbGUgdGltZXMuXCIpO1xuZVtkXT1oO09iamVjdC5zZXRQcm90b3R5cGVPZihmLGEucHJvdG90eXBlKTt5KGIsZik7cmV0dXJuIGZ9YS5wcm90b3R5cGU9c2EucHJvdG90eXBlO09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLnByb3RvdHlwZSxcImNvbnN0cnVjdG9yXCIse3dyaXRhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxlbnVtZXJhYmxlOiExLHZhbHVlOmF9KTtyZXR1cm4gYX0oKX07ZnVuY3Rpb24gWShiLGEsYyl7ZnVuY3Rpb24gZChhKXtyZXR1cm4gZnVuY3Rpb24oYyl7Zm9yKHZhciBlPVtdLGQ9MDtkPGFyZ3VtZW50cy5sZW5ndGg7KytkKWVbZC0wXT1hcmd1bWVudHNbZF07Zm9yKHZhciBkPVtdLGY9W10sbD0wO2w8ZS5sZW5ndGg7bCsrKXt2YXIgcT1lW2xdO3EgaW5zdGFuY2VvZiBFbGVtZW50JiZuKHEpJiZmLnB1c2gocSk7aWYocSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpZm9yKHE9cS5maXJzdENoaWxkO3E7cT1xLm5leHRTaWJsaW5nKWQucHVzaChxKTtlbHNlIGQucHVzaChxKX1hLmFwcGx5KHRoaXMsZSk7Zm9yKGU9MDtlPGYubGVuZ3RoO2UrKylCKGIsZltlXSk7aWYobih0aGlzKSlmb3IoZT0wO2U8ZC5sZW5ndGg7ZSsrKWY9ZFtlXSxmIGluc3RhbmNlb2YgRWxlbWVudCYmeihiLGYpfX1jLmgmJihhLnByZXBlbmQ9ZChjLmgpKTtjLmFwcGVuZCYmKGEuYXBwZW5kPWQoYy5hcHBlbmQpKX07ZnVuY3Rpb24gd2EoKXt2YXIgYj1YO3UoRG9jdW1lbnQucHJvdG90eXBlLFwiY3JlYXRlRWxlbWVudFwiLGZ1bmN0aW9uKGEpe2lmKHRoaXMuX19DRV9oYXNSZWdpc3RyeSl7dmFyIGM9Yi5hLmdldChhKTtpZihjKXJldHVybiBuZXcgYy5jb25zdHJ1Y3Rvcn1hPUguY2FsbCh0aGlzLGEpO3koYixhKTtyZXR1cm4gYX0pO3UoRG9jdW1lbnQucHJvdG90eXBlLFwiaW1wb3J0Tm9kZVwiLGZ1bmN0aW9uKGEsYyl7YT1lYS5jYWxsKHRoaXMsYSxjKTt0aGlzLl9fQ0VfaGFzUmVnaXN0cnk/QyhiLGEpOngoYixhKTtyZXR1cm4gYX0pO3UoRG9jdW1lbnQucHJvdG90eXBlLFwiY3JlYXRlRWxlbWVudE5TXCIsZnVuY3Rpb24oYSxjKXtpZih0aGlzLl9fQ0VfaGFzUmVnaXN0cnkmJihudWxsPT09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hKSl7dmFyIGQ9Yi5hLmdldChjKTtpZihkKXJldHVybiBuZXcgZC5jb25zdHJ1Y3Rvcn1hPUkuY2FsbCh0aGlzLGEsYyk7eShiLGEpO3JldHVybiBhfSk7XG5ZKGIsRG9jdW1lbnQucHJvdG90eXBlLHtoOmZhLGFwcGVuZDpnYX0pfTtmdW5jdGlvbiB4YSgpe3ZhciBiPVg7ZnVuY3Rpb24gYShhLGQpe09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLFwidGV4dENvbnRlbnRcIix7ZW51bWVyYWJsZTpkLmVudW1lcmFibGUsY29uZmlndXJhYmxlOiEwLGdldDpkLmdldCxzZXQ6ZnVuY3Rpb24oYSl7aWYodGhpcy5ub2RlVHlwZT09PU5vZGUuVEVYVF9OT0RFKWQuc2V0LmNhbGwodGhpcyxhKTtlbHNle3ZhciBlPXZvaWQgMDtpZih0aGlzLmZpcnN0Q2hpbGQpe3ZhciBjPXRoaXMuY2hpbGROb2RlcyxrPWMubGVuZ3RoO2lmKDA8ayYmbih0aGlzKSlmb3IodmFyIGU9QXJyYXkoayksZz0wO2c8aztnKyspZVtnXT1jW2ddfWQuc2V0LmNhbGwodGhpcyxhKTtpZihlKWZvcihhPTA7YTxlLmxlbmd0aDthKyspQihiLGVbYV0pfX19KX11KE5vZGUucHJvdG90eXBlLFwiaW5zZXJ0QmVmb3JlXCIsZnVuY3Rpb24oYSxkKXtpZihhIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCl7dmFyIGU9QXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGEuY2hpbGROb2Rlcyk7XG5hPUwuY2FsbCh0aGlzLGEsZCk7aWYobih0aGlzKSlmb3IoZD0wO2Q8ZS5sZW5ndGg7ZCsrKXooYixlW2RdKTtyZXR1cm4gYX1lPW4oYSk7ZD1MLmNhbGwodGhpcyxhLGQpO2UmJkIoYixhKTtuKHRoaXMpJiZ6KGIsYSk7cmV0dXJuIGR9KTt1KE5vZGUucHJvdG90eXBlLFwiYXBwZW5kQ2hpbGRcIixmdW5jdGlvbihhKXtpZihhIGluc3RhbmNlb2YgRG9jdW1lbnRGcmFnbWVudCl7dmFyIGM9QXJyYXkucHJvdG90eXBlLnNsaWNlLmFwcGx5KGEuY2hpbGROb2Rlcyk7YT1LLmNhbGwodGhpcyxhKTtpZihuKHRoaXMpKWZvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKXooYixjW2VdKTtyZXR1cm4gYX1jPW4oYSk7ZT1LLmNhbGwodGhpcyxhKTtjJiZCKGIsYSk7bih0aGlzKSYmeihiLGEpO3JldHVybiBlfSk7dShOb2RlLnByb3RvdHlwZSxcImNsb25lTm9kZVwiLGZ1bmN0aW9uKGEpe2E9Si5jYWxsKHRoaXMsYSk7dGhpcy5vd25lckRvY3VtZW50Ll9fQ0VfaGFzUmVnaXN0cnk/QyhiLGEpOngoYixhKTtcbnJldHVybiBhfSk7dShOb2RlLnByb3RvdHlwZSxcInJlbW92ZUNoaWxkXCIsZnVuY3Rpb24oYSl7dmFyIGM9bihhKSxlPU0uY2FsbCh0aGlzLGEpO2MmJkIoYixhKTtyZXR1cm4gZX0pO3UoTm9kZS5wcm90b3R5cGUsXCJyZXBsYWNlQ2hpbGRcIixmdW5jdGlvbihhLGQpe2lmKGEgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KXt2YXIgZT1BcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkoYS5jaGlsZE5vZGVzKTthPU4uY2FsbCh0aGlzLGEsZCk7aWYobih0aGlzKSlmb3IoQihiLGQpLGQ9MDtkPGUubGVuZ3RoO2QrKyl6KGIsZVtkXSk7cmV0dXJuIGF9dmFyIGU9bihhKSxmPU4uY2FsbCh0aGlzLGEsZCksYz1uKHRoaXMpO2MmJkIoYixkKTtlJiZCKGIsYSk7YyYmeihiLGEpO3JldHVybiBmfSk7TyYmTy5nZXQ/YShOb2RlLnByb3RvdHlwZSxPKTp3KGIsZnVuY3Rpb24oYil7YShiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtmb3IodmFyIGE9W10sYj1cbjA7Yjx0aGlzLmNoaWxkTm9kZXMubGVuZ3RoO2IrKylhLnB1c2godGhpcy5jaGlsZE5vZGVzW2JdLnRleHRDb250ZW50KTtyZXR1cm4gYS5qb2luKFwiXCIpfSxzZXQ6ZnVuY3Rpb24oYSl7Zm9yKDt0aGlzLmZpcnN0Q2hpbGQ7KU0uY2FsbCh0aGlzLHRoaXMuZmlyc3RDaGlsZCk7Sy5jYWxsKHRoaXMsZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoYSkpfX0pfSl9O2Z1bmN0aW9uIHlhKGIpe3ZhciBhPUVsZW1lbnQucHJvdG90eXBlO2Z1bmN0aW9uIGMoYSl7cmV0dXJuIGZ1bmN0aW9uKGUpe2Zvcih2YXIgYz1bXSxkPTA7ZDxhcmd1bWVudHMubGVuZ3RoOysrZCljW2QtMF09YXJndW1lbnRzW2RdO2Zvcih2YXIgZD1bXSxrPVtdLGc9MDtnPGMubGVuZ3RoO2crKyl7dmFyIGw9Y1tnXTtsIGluc3RhbmNlb2YgRWxlbWVudCYmbihsKSYmay5wdXNoKGwpO2lmKGwgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KWZvcihsPWwuZmlyc3RDaGlsZDtsO2w9bC5uZXh0U2libGluZylkLnB1c2gobCk7ZWxzZSBkLnB1c2gobCl9YS5hcHBseSh0aGlzLGMpO2ZvcihjPTA7YzxrLmxlbmd0aDtjKyspQihiLGtbY10pO2lmKG4odGhpcykpZm9yKGM9MDtjPGQubGVuZ3RoO2MrKylrPWRbY10sayBpbnN0YW5jZW9mIEVsZW1lbnQmJnooYixrKX19ViYmKGEuYmVmb3JlPWMoVikpO1YmJihhLmFmdGVyPWMocGEpKTtxYSYmdShhLFwicmVwbGFjZVdpdGhcIixmdW5jdGlvbihhKXtmb3IodmFyIGU9XG5bXSxjPTA7Yzxhcmd1bWVudHMubGVuZ3RoOysrYyllW2MtMF09YXJndW1lbnRzW2NdO2Zvcih2YXIgYz1bXSxkPVtdLGs9MDtrPGUubGVuZ3RoO2srKyl7dmFyIGc9ZVtrXTtnIGluc3RhbmNlb2YgRWxlbWVudCYmbihnKSYmZC5wdXNoKGcpO2lmKGcgaW5zdGFuY2VvZiBEb2N1bWVudEZyYWdtZW50KWZvcihnPWcuZmlyc3RDaGlsZDtnO2c9Zy5uZXh0U2libGluZyljLnB1c2goZyk7ZWxzZSBjLnB1c2goZyl9az1uKHRoaXMpO3FhLmFwcGx5KHRoaXMsZSk7Zm9yKGU9MDtlPGQubGVuZ3RoO2UrKylCKGIsZFtlXSk7aWYoaylmb3IoQihiLHRoaXMpLGU9MDtlPGMubGVuZ3RoO2UrKylkPWNbZV0sZCBpbnN0YW5jZW9mIEVsZW1lbnQmJnooYixkKX0pO3JhJiZ1KGEsXCJyZW1vdmVcIixmdW5jdGlvbigpe3ZhciBhPW4odGhpcyk7cmEuY2FsbCh0aGlzKTthJiZCKGIsdGhpcyl9KX07ZnVuY3Rpb24gemEoKXt2YXIgYj1YO2Z1bmN0aW9uIGEoYSxjKXtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxcImlubmVySFRNTFwiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZSxjb25maWd1cmFibGU6ITAsZ2V0OmMuZ2V0LHNldDpmdW5jdGlvbihhKXt2YXIgZT10aGlzLGQ9dm9pZCAwO24odGhpcykmJihkPVtdLHQodGhpcyxmdW5jdGlvbihhKXthIT09ZSYmZC5wdXNoKGEpfSkpO2Muc2V0LmNhbGwodGhpcyxhKTtpZihkKWZvcih2YXIgZj0wO2Y8ZC5sZW5ndGg7ZisrKXt2YXIgcj1kW2ZdOzE9PT1yLl9fQ0Vfc3RhdGUmJmIuZGlzY29ubmVjdGVkQ2FsbGJhY2socil9dGhpcy5vd25lckRvY3VtZW50Ll9fQ0VfaGFzUmVnaXN0cnk/QyhiLHRoaXMpOngoYix0aGlzKTtyZXR1cm4gYX19KX1mdW5jdGlvbiBjKGEsYyl7dShhLFwiaW5zZXJ0QWRqYWNlbnRFbGVtZW50XCIsZnVuY3Rpb24oYSxlKXt2YXIgZD1uKGUpO2E9Yy5jYWxsKHRoaXMsYSxlKTtkJiZCKGIsZSk7bihhKSYmeihiLGUpO1xucmV0dXJuIGF9KX1mdW5jdGlvbiBkKGEsYyl7ZnVuY3Rpb24gZShhLGUpe2Zvcih2YXIgYz1bXTthIT09ZTthPWEubmV4dFNpYmxpbmcpYy5wdXNoKGEpO2ZvcihlPTA7ZTxjLmxlbmd0aDtlKyspQyhiLGNbZV0pfXUoYSxcImluc2VydEFkamFjZW50SFRNTFwiLGZ1bmN0aW9uKGEsYil7YT1hLnRvTG93ZXJDYXNlKCk7aWYoXCJiZWZvcmViZWdpblwiPT09YSl7dmFyIGQ9dGhpcy5wcmV2aW91c1NpYmxpbmc7Yy5jYWxsKHRoaXMsYSxiKTtlKGR8fHRoaXMucGFyZW50Tm9kZS5maXJzdENoaWxkLHRoaXMpfWVsc2UgaWYoXCJhZnRlcmJlZ2luXCI9PT1hKWQ9dGhpcy5maXJzdENoaWxkLGMuY2FsbCh0aGlzLGEsYiksZSh0aGlzLmZpcnN0Q2hpbGQsZCk7ZWxzZSBpZihcImJlZm9yZWVuZFwiPT09YSlkPXRoaXMubGFzdENoaWxkLGMuY2FsbCh0aGlzLGEsYiksZShkfHx0aGlzLmZpcnN0Q2hpbGQsbnVsbCk7ZWxzZSBpZihcImFmdGVyZW5kXCI9PT1hKWQ9dGhpcy5uZXh0U2libGluZyxjLmNhbGwodGhpcyxcbmEsYiksZSh0aGlzLm5leHRTaWJsaW5nLGQpO2Vsc2UgdGhyb3cgbmV3IFN5bnRheEVycm9yKFwiVGhlIHZhbHVlIHByb3ZpZGVkIChcIitTdHJpbmcoYSkrXCIpIGlzIG5vdCBvbmUgb2YgJ2JlZm9yZWJlZ2luJywgJ2FmdGVyYmVnaW4nLCAnYmVmb3JlZW5kJywgb3IgJ2FmdGVyZW5kJy5cIik7fSl9UCYmdShFbGVtZW50LnByb3RvdHlwZSxcImF0dGFjaFNoYWRvd1wiLGZ1bmN0aW9uKGEpe3JldHVybiB0aGlzLl9fQ0Vfc2hhZG93Um9vdD1hPVAuY2FsbCh0aGlzLGEpfSk7USYmUS5nZXQ/YShFbGVtZW50LnByb3RvdHlwZSxRKTpXJiZXLmdldD9hKEhUTUxFbGVtZW50LnByb3RvdHlwZSxXKTp3KGIsZnVuY3Rpb24oYil7YShiLHtlbnVtZXJhYmxlOiEwLGNvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gSi5jYWxsKHRoaXMsITApLmlubmVySFRNTH0sc2V0OmZ1bmN0aW9uKGEpe3ZhciBiPVwidGVtcGxhdGVcIj09PXRoaXMubG9jYWxOYW1lLGU9Yj90aGlzLmNvbnRlbnQ6dGhpcyxcbmM9SS5jYWxsKGRvY3VtZW50LHRoaXMubmFtZXNwYWNlVVJJLHRoaXMubG9jYWxOYW1lKTtmb3IoYy5pbm5lckhUTUw9YTswPGUuY2hpbGROb2Rlcy5sZW5ndGg7KU0uY2FsbChlLGUuY2hpbGROb2Rlc1swXSk7Zm9yKGE9Yj9jLmNvbnRlbnQ6YzswPGEuY2hpbGROb2Rlcy5sZW5ndGg7KUsuY2FsbChlLGEuY2hpbGROb2Rlc1swXSl9fSl9KTt1KEVsZW1lbnQucHJvdG90eXBlLFwic2V0QXR0cmlidXRlXCIsZnVuY3Rpb24oYSxjKXtpZigxIT09dGhpcy5fX0NFX3N0YXRlKXJldHVybiBTLmNhbGwodGhpcyxhLGMpO3ZhciBlPVIuY2FsbCh0aGlzLGEpO1MuY2FsbCh0aGlzLGEsYyk7Yz1SLmNhbGwodGhpcyxhKTtiLmF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFjayh0aGlzLGEsZSxjLG51bGwpfSk7dShFbGVtZW50LnByb3RvdHlwZSxcInNldEF0dHJpYnV0ZU5TXCIsZnVuY3Rpb24oYSxjLGQpe2lmKDEhPT10aGlzLl9fQ0Vfc3RhdGUpcmV0dXJuIGphLmNhbGwodGhpcyxhLGMsZCk7dmFyIGU9VS5jYWxsKHRoaXMsXG5hLGMpO2phLmNhbGwodGhpcyxhLGMsZCk7ZD1VLmNhbGwodGhpcyxhLGMpO2IuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsYyxlLGQsYSl9KTt1KEVsZW1lbnQucHJvdG90eXBlLFwicmVtb3ZlQXR0cmlidXRlXCIsZnVuY3Rpb24oYSl7aWYoMSE9PXRoaXMuX19DRV9zdGF0ZSlyZXR1cm4gVC5jYWxsKHRoaXMsYSk7dmFyIGM9Ui5jYWxsKHRoaXMsYSk7VC5jYWxsKHRoaXMsYSk7bnVsbCE9PWMmJmIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKHRoaXMsYSxjLG51bGwsbnVsbCl9KTt1KEVsZW1lbnQucHJvdG90eXBlLFwicmVtb3ZlQXR0cmlidXRlTlNcIixmdW5jdGlvbihhLGMpe2lmKDEhPT10aGlzLl9fQ0Vfc3RhdGUpcmV0dXJuIGthLmNhbGwodGhpcyxhLGMpO3ZhciBkPVUuY2FsbCh0aGlzLGEsYyk7a2EuY2FsbCh0aGlzLGEsYyk7dmFyIGU9VS5jYWxsKHRoaXMsYSxjKTtkIT09ZSYmYi5hdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sodGhpcyxjLGQsZSxhKX0pO3RhP2MoSFRNTEVsZW1lbnQucHJvdG90eXBlLFxudGEpOmxhP2MoRWxlbWVudC5wcm90b3R5cGUsbGEpOmNvbnNvbGUud2FybihcIkN1c3RvbSBFbGVtZW50czogYEVsZW1lbnQjaW5zZXJ0QWRqYWNlbnRFbGVtZW50YCB3YXMgbm90IHBhdGNoZWQuXCIpO3VhP2QoSFRNTEVsZW1lbnQucHJvdG90eXBlLHVhKTptYT9kKEVsZW1lbnQucHJvdG90eXBlLG1hKTpjb25zb2xlLndhcm4oXCJDdXN0b20gRWxlbWVudHM6IGBFbGVtZW50I2luc2VydEFkamFjZW50SFRNTGAgd2FzIG5vdCBwYXRjaGVkLlwiKTtZKGIsRWxlbWVudC5wcm90b3R5cGUse2g6bmEsYXBwZW5kOm9hfSk7eWEoYil9Oy8qXG5cbiBDb3B5cmlnaHQgKGMpIDIwMTYgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0IGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiovXG52YXIgWj13aW5kb3cuY3VzdG9tRWxlbWVudHM7aWYoIVp8fFouZm9yY2VQb2x5ZmlsbHx8XCJmdW5jdGlvblwiIT10eXBlb2YgWi5kZWZpbmV8fFwiZnVuY3Rpb25cIiE9dHlwZW9mIFouZ2V0KXt2YXIgWD1uZXcgdjt2YSgpO3dhKCk7WShYLERvY3VtZW50RnJhZ21lbnQucHJvdG90eXBlLHtoOmhhLGFwcGVuZDppYX0pO3hhKCk7emEoKTtkb2N1bWVudC5fX0NFX2hhc1JlZ2lzdHJ5PSEwO3ZhciBjdXN0b21FbGVtZW50cz1uZXcgRyhYKTtPYmplY3QuZGVmaW5lUHJvcGVydHkod2luZG93LFwiY3VzdG9tRWxlbWVudHNcIix7Y29uZmlndXJhYmxlOiEwLGVudW1lcmFibGU6ITAsdmFsdWU6Y3VzdG9tRWxlbWVudHN9KX07XG59KS5jYWxsKHNlbGYpO1xuXG4vLyMgc291cmNlTWFwcGluZ1VSTD1jdXN0b20tZWxlbWVudHMubWluLmpzLm1hcFxuXG5cblxuLy8vLy8vLy8vLy8vLy8vLy8vXG4vLyBXRUJQQUNLIEZPT1RFUlxuLy8gLi9ub2RlX21vZHVsZXMvQHdlYmNvbXBvbmVudHMvY3VzdG9tLWVsZW1lbnRzL2N1c3RvbS1lbGVtZW50cy5taW4uanNcbi8vIG1vZHVsZSBpZCA9IDEyXG4vLyBtb2R1bGUgY2h1bmtzID0gMCJdLCJzb3VyY2VSb290IjoiIn0=