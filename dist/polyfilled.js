module.exports=function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="",t(t.s=9)}([function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e){d.driver=d.driver.migrate(e)}function i(e){return d.driver.getItem(e)}function a(e,t){d.driver.setItem(e,t)}function c(e){d.driver.removeItem(e)}Object.defineProperty(t,"__esModule",{value:!0});var u;t.setStorageDriver=o,t.getStorage=i,t.addStorage=a,t.removeStorage=c;var s=new Map,l=new Map,f=t.storageKeys={PROPS:"props",EVENTS:"events"},p={items:Object.create((u={},r(u,f.PROPS,s),r(u,f.EVENTS,l),u)),setItem:function(e,t){this.items[e]=t},getItem:function(e){return this.items[e]},removeItem:function(e){delete this.items[e]},migrate:function(e){for(var t in this.items)e.setItem(t,this.items[t]);return e}},d=t.storage={driver:p}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={registerComponent:function(e,t){"customElements"in window?customElements.define(e,t):a().then(function(){i(e,t)})},isCustomComponent:function(e){return e.nodeName.includes("-")}},o=r,i=function(e,t){return o.registerComponent(e,t)},a=(t.setImplementation=function(e){o=e},function(){return Promise.resolve()});t.componentsReady=function(){return a()},t.setReadyCheck=function(e){a=e};t.default=i;t.isCustomComponent=function(e){return o.isCustomComponent(e)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r={reducers:{},subscriptions:{},addReducer:function(e,t){this.reducers[e]=t},removeReducer:function(e){return delete this.reducers[e],!1},subscribe:function(e,t){var n=this;return this.subscriptions[e]||(this.subscriptions[e]=[]),this.subscriptions[e].push(t),{unsubscribe:function(){n.subscriptions[e]=n.subscriptions[e].filter(function(e){return e!==t})}}},getState:function(e){},migrate:function(e){for(var t in this.reducers){var n=this.reducers[t];e.addReducer(t,n)}for(var r in this.subscriptions){var o=!0,i=!1,a=void 0;try{for(var c,u=this.subscriptions[r][Symbol.iterator]();!(o=(c=u.next()).done);o=!0){var s=c.value;e.subscribe(r,s)}}catch(e){i=!0,a=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw a}}}return e}},o={currentImplementation:r};t.setImplementation=function(e){o.currentImplementation=o.currentImplementation.migrate(e)},t.registerReducer=function(e,t){o.currentImplementation.addReducer(e,t)},t.removeReducer=function(e){o.currentImplementation.removeReducer(e)},t.subscribe=function(e,t){return o.currentImplementation.subscribe(e,t)},t.getState=function(e){return o.currentImplementation.getState(e)}},function(e,t,n){"use strict";function r(e){return e.split("-").reduce(function(e,t){return t?e+t[0].toUpperCase()+t.slice(1):e})}function o(e){for(var t="",n=0;n<e.length;n++)e[n]===e[n].toUpperCase()?t+="-"+e[n].toLowerCase():t+=e[n];return t}function i(e,t){return t?"__ARG__"+e:"\x3c!--__ARG__"+e+"--\x3e"}function a(e){return e.match(/(?:<!--)?__ARG__(\d+)(?:-->)?/)}function c(e,t){return e.replace(/(?:<!--)?__ARG__(\d+)(?:-->)?/g,t)}function u(e){return'="'===e.trim().slice(-2)}Object.defineProperty(t,"__esModule",{value:!0}),t.tagNameToProp=r,t.propNameToTag=o,t.createTagArg=i,t.matchTagArg=a,t.replaceTagArg=c,t.attributeStarts=u},function(e,t,n){"use strict";function r(e){return e&&e.__esModule?e:{default:e}}Object.defineProperty(t,"__esModule",{value:!0});var o=n(1);Object.defineProperty(t,"changeWebComponentsImplemenation",{enumerable:!0,get:function(){return o.setImplementation}}),Object.defineProperty(t,"componentsReady",{enumerable:!0,get:function(){return o.componentsReady}}),Object.defineProperty(t,"changeWebComponentsReadyCheck",{enumerable:!0,get:function(){return o.setReadyCheck}}),Object.defineProperty(t,"registerComponent",{enumerable:!0,get:function(){return r(o).default}});var i=n(2);Object.defineProperty(t,"changeStoreImplementation",{enumerable:!0,get:function(){return i.setImplementation}}),Object.defineProperty(t,"registerReducer",{enumerable:!0,get:function(){return i.registerReducer}}),Object.defineProperty(t,"removeReducer",{enumerable:!0,get:function(){return i.removeReducer}}),Object.defineProperty(t,"subscribe",{enumerable:!0,get:function(){return i.subscribe}}),Object.defineProperty(t,"getState",{enumerable:!0,get:function(){return i.getState}});var a=n(5);Object.defineProperty(t,"css",{enumerable:!0,get:function(){return a.css}});var c=n(0);Object.defineProperty(t,"getStorage",{enumerable:!0,get:function(){return c.getStorage}}),Object.defineProperty(t,"addStorage",{enumerable:!0,get:function(){return c.addStorage}}),Object.defineProperty(t,"removeStorage",{enumerable:!0,get:function(){return c.removeStorage}}),Object.defineProperty(t,"setStorageDriver",{enumerable:!0,get:function(){return c.setStorageDriver}});var u=n(6);Object.defineProperty(t,"bind",{enumerable:!0,get:function(){return u.bind}});var s=n(3);Object.defineProperty(t,"matchTagArg",{enumerable:!0,get:function(){return s.matchTagArg}}),Object.defineProperty(t,"replaceTagArg",{enumerable:!0,get:function(){return s.replaceTagArg}});var l=n(7);Object.defineProperty(t,"Component",{enumerable:!0,get:function(){return r(l).default}}),Object.defineProperty(t,"connect",{enumerable:!0,get:function(){return l.connect}}),Object.defineProperty(t,"define",{enumerable:!0,get:function(){return l.define}}),Object.defineProperty(t,"props",{enumerable:!0,get:function(){return l.props}})},function(e,t,n){"use strict";function r(e){return function(e){for(var t=arguments.length,n=Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];for(var o="",i=0;i<e.length;i++)o+=e[i],i<e.length-1&&("function"==typeof n[i]?o+=n[i]():o+=n[i]);return o}}Object.defineProperty(t,"__esModule",{value:!0}),t.css=r},function(e,t,n){"use strict";function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}function o(e,t){var n=(0,a.getStorage)(c);if(n.size===u){var r=n.keys();n.delete(r.next().value)}n.set(e,t)}function i(e){for(var t=(0,a.getStorage)(c),n=t.get(e),i=arguments.length,u=Array(i>1?i-1:0),s=1;s<i;s++)u[s-1]=arguments[s];var l=u[0],f=e.bind.apply(e,[null].concat(r(u)));if(n)return n.get(l)?n.get(l):(n.set(l,f),f);var p=new Map;return p.set(l,f),o(e,p),f}Object.defineProperty(t,"__esModule",{value:!0}),t.bind=i;var a=n(0),c="BOUNDS",u=100;(0,a.addStorage)(c,new Map)},function(e,t,n){"use strict";function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function i(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}function a(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}function c(e){var t={},n=!0,r=!1,o=void 0;try{for(var i,a=e[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var c=i.value;t[(0,v.tagNameToProp)(c.name)]=c.value}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}return t}function u(e){return function(t){return function(t){function n(){return o(this,n),i(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return a(n,t),d(n,[{key:"keys",get:function(){return[e]}}]),n}(t)}}function s(e){return function(t){return(0,m.default)(e,t),t}}function l(e){var t=E++;return w.set(t,e),{"props-id":t,toString:function(){return'props-id="'+t+'"'}}}Object.defineProperty(t,"__esModule",{value:!0}),t.default=void 0;var f="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},d=function(){function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}return function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}();t.connect=u,t.define=s,t.props=l;var h=n(1),m=function(e){return e&&e.__esModule?e:{default:e}}(h),b=n(2),y=n(8),g=n(0),v=n(3),_=function(e){var t=e.getPrototypeOf||function(e){return e.__proto__},n=e.setPrototypeOf||function(e,t){return e.__proto__=t,e},r="object"===("undefined"==typeof Reflect?"undefined":f(Reflect))?Reflect.construct:function(e,t,r){var o,i=[null];return i.push.apply(i,t),o=e.bind.apply(e,i),n(new o,r.prototype)};return function(e){var o=t(e);return n(e,n(function(){return r(o,arguments,t(this).constructor)},o))}}(Object),w=(0,g.getStorage)(g.storageKeys.PROPS),C=_(function(e){function t(){var e,n,r,a;o(this,t);for(var c=arguments.length,u=Array(c),s=0;s<c;s++)u[s]=arguments[s];return n=r=i(this,(e=t.__proto__||Object.getPrototypeOf(t)).call.apply(e,[this].concat(u))),r.__defaultProps={},r.subscriptions=[],r.state={},r.mounted=!1,a=n,i(r,a)}return a(t,e),d(t,[{key:"beforeRender",value:function(){}},{key:"render",value:function(){return""}},{key:"insertContent",value:function(e,t){if("string"!=typeof t)throw new Error("default renderer can handle only strings");e.innerHTML=t}},{key:"afterRender",value:function(){}},{key:"subscribeToStore",value:function(){var e=this,t=!0,n=!1,r=void 0;try{for(var o,i=this.keys[Symbol.iterator]();!(t=(o=i.next()).done);t=!0){var a=o.value;this.subscriptions.push((0,b.subscribe)(a,function(t){e.state=t,y.render.call(e)})),this.state=(0,b.getState)(a)}}catch(e){n=!0,r=e}finally{try{!t&&i.return&&i.return()}finally{if(n)throw r}}}},{key:"connectedCallback",value:function(){this.subscribeToStore(),y.render.call(this),this.connected()}},{key:"connected",value:function(){}},{key:"disconnectedCallback",value:function(){var e=!0,t=!1,n=void 0;try{for(var r,o=this.subscriptions[Symbol.iterator]();!(e=(r=o.next()).done);e=!0){r.value.unsubscribe()}}catch(e){t=!0,n=e}finally{try{!e&&o.return&&o.return()}finally{if(t)throw n}}this.disconnected()}},{key:"disconnected",value:function(){}},{key:"adoptedCallback",value:function(){this.subscribeToStore(),y.render.call(this),this.adopted()}},{key:"adopted",value:function(){}},{key:"attributeChangedCallback",value:function(e,t,n){this.mounted&&t!=n&&(this.propsChanged(p({},this.props,r({},e,n))),y.render.call(this))}},{key:"propsChanged",value:function(e){}},{key:"name",get:function(){return Object.getPrototypeOf(this).constructor.name}},{key:"isShadow",get:function(){return!0}},{key:"props",get:function(){var e=c(this.attributes),t=Number(e.propsId);return p({},this.__defaultProps,e,w.get(t)||{})},set:function(e){this.__defaultProps=e}},{key:"keys",get:function(){return[]}},{key:"styles",get:function(){return""}}],[{key:"observedAttributes",get:function(){return this.observableProps.map(v.propNameToTag).concat("props-id")}},{key:"observableProps",get:function(){return[]}}]),t}(HTMLElement));t.default=C;var E=0},function(e,t,n){"use strict";function r(){this.beforeRender(),this.isShadow&&!this.shadowRoot&&this.attachShadow({mode:"open"}),this.root||(this.isShadow?(this.shadowRoot.innerHTML="<style>"+this.styles+"</style>",this.root=document.createElement("div"),this.shadowRoot.appendChild(this.root),this.root.style="display: contents"):(this.innerHTML="<style>"+this.styles+"</style>",this.root=this));var e=this.render();e&&this.insertContent(this.root,e),this.mounted=!0,this.afterRender()}Object.defineProperty(t,"__esModule",{value:!0}),t.render=r},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(4);Object.keys(r).forEach(function(e){"default"!==e&&"__esModule"!==e&&Object.defineProperty(t,e,{enumerable:!0,get:function(){return r[e]}})}),(0,r.changeWebComponentsReadyCheck)(function(){return"customElements"in window?Promise.resolve():new Promise<null>function(e){n(10).then(function(){window.addEventListener("WebComponentsReady",e)})}})},function(e,t){(function(){"use strict";function e(e){var t=E.has(e);return e=/^[a-z][.0-9_a-z]*-[\-.0-9_a-z]*$/.test(e),!t&&e}function t(e){var t=e.isConnected;if(void 0!==t)return t;for(;e&&!(e.__CE_isImportDocument||e instanceof Document);)e=e.parentNode||(window.ShadowRoot&&e instanceof ShadowRoot?e.host:void 0);return!(!e||!(e.__CE_isImportDocument||e instanceof Document))}function n(e,t){for(;t&&t!==e&&!t.nextSibling;)t=t.parentNode;return t&&t!==e?t.nextSibling:null}function r(e,t,o){o=o||new Set;for(var i=e;i;){if(i.nodeType===Node.ELEMENT_NODE){var a=i;t(a);var c=a.localName;if("link"===c&&"import"===a.getAttribute("rel")){if((i=a.import)instanceof Node&&!o.has(i))for(o.add(i),i=i.firstChild;i;i=i.nextSibling)r(i,t,o);i=n(e,a);continue}if("template"===c){i=n(e,a);continue}if(a=a.__CE_shadowRoot)for(a=a.firstChild;a;a=a.nextSibling)r(a,t,o)}i=i.firstChild?i.firstChild:n(e,i)}}function o(e,t,n){e[t]=n}function i(){this.a=new Map,this.s=new Map,this.f=[],this.b=!1}function a(e,t,n){e.a.set(t,n),e.s.set(n.constructor,n)}function c(e,t){e.b=!0,e.f.push(t)}function u(e,t){e.b&&r(t,function(t){return s(e,t)})}function s(e,t){if(e.b&&!t.__CE_patched){t.__CE_patched=!0;for(var n=0;n<e.f.length;n++)e.f[n](t)}}function l(e,t){var n=[];for(r(t,function(e){return n.push(e)}),t=0;t<n.length;t++){var o=n[t];1===o.__CE_state?e.connectedCallback(o):d(e,o)}}function f(e,t){var n=[];for(r(t,function(e){return n.push(e)}),t=0;t<n.length;t++){var o=n[t];1===o.__CE_state&&e.disconnectedCallback(o)}}function p(e,t,n){n=n||{};var o=n.w||new Set,i=n.i||function(t){return d(e,t)},a=[];if(r(t,function(t){if("link"===t.localName&&"import"===t.getAttribute("rel")){var n=t.import;n instanceof Node&&(n.__CE_isImportDocument=!0,n.__CE_hasRegistry=!0),n&&"complete"===n.readyState?n.__CE_documentLoadHandled=!0:t.addEventListener("load",function(){var n=t.import;if(!n.__CE_documentLoadHandled){n.__CE_documentLoadHandled=!0;var r=new Set(o);r.delete(n),p(e,n,{w:r,i:i})}})}else a.push(t)},o),e.b)for(t=0;t<a.length;t++)s(e,a[t]);for(t=0;t<a.length;t++)i(a[t])}function d(e,n){if(void 0===n.__CE_state){var r=n.ownerDocument;if((r.defaultView||r.__CE_isImportDocument&&r.__CE_hasRegistry)&&(r=e.a.get(n.localName))){r.constructionStack.push(n);var o=r.constructor;try{try{if(new o!==n)throw Error("The custom element constructor did not produce the element being upgraded.")}finally{r.constructionStack.pop()}}catch(e){throw n.__CE_state=2,e}if(n.__CE_state=1,n.__CE_definition=r,r.attributeChangedCallback)for(r=r.observedAttributes,o=0;o<r.length;o++){var i=r[o],a=n.getAttribute(i);null!==a&&e.attributeChangedCallback(n,i,null,a,null)}t(n)&&e.connectedCallback(n)}}}function h(e,t){this.c=e,this.a=t,this.b=void 0,p(this.c,this.a),"loading"===this.a.readyState&&(this.b=new MutationObserver(this.f.bind(this)),this.b.observe(this.a,{childList:!0,subtree:!0}))}function m(e){e.b&&e.b.disconnect()}function b(){var e=this;this.b=this.a=void 0,this.f=new Promise(function(t){e.b=t,e.a&&t(e.a)})}function y(e){if(e.a)throw Error("Already resolved.");e.a=void 0,e.b&&e.b(void 0)}function g(e){this.j=!1,this.c=e,this.o=new Map,this.l=function(e){return e()},this.g=!1,this.m=[],this.u=new h(e,document)}function v(e){if(!1!==e.g){e.g=!1;for(var t=e.m,n=[],r=new Map,o=0;o<t.length;o++)r.set(t[o].localName,[]);for(p(e.c,document,{i:function(t){if(void 0===t.__CE_state){var o=t.localName,i=r.get(o);i?i.push(t):e.c.a.get(o)&&n.push(t)}}}),o=0;o<n.length;o++)d(e.c,n[o]);for(;0<t.length;){for(var i=t.shift(),o=i.localName,i=r.get(i.localName),a=0;a<i.length;a++)d(e.c,i[a]);(o=e.o.get(o))&&y(o)}}}function _(e,n,r){function o(n){return function(r){for(var o=[],i=0;i<arguments.length;++i)o[i-0]=arguments[i];for(var i=[],a=[],c=0;c<o.length;c++){var u=o[c];if(u instanceof Element&&t(u)&&a.push(u),u instanceof DocumentFragment)for(u=u.firstChild;u;u=u.nextSibling)i.push(u);else i.push(u)}for(n.apply(this,o),o=0;o<a.length;o++)f(e,a[o]);if(t(this))for(o=0;o<i.length;o++)(a=i[o])instanceof Element&&l(e,a)}}r.h&&(n.prepend=o(r.h)),r.append&&(n.append=o(r.append))}function w(e){function n(n){return function(r){for(var o=[],i=0;i<arguments.length;++i)o[i-0]=arguments[i];for(var i=[],a=[],c=0;c<o.length;c++){var u=o[c];if(u instanceof Element&&t(u)&&a.push(u),u instanceof DocumentFragment)for(u=u.firstChild;u;u=u.nextSibling)i.push(u);else i.push(u)}for(n.apply(this,o),o=0;o<a.length;o++)f(e,a[o]);if(t(this))for(o=0;o<i.length;o++)(a=i[o])instanceof Element&&l(e,a)}}var r=Element.prototype;q&&(r.before=n(q)),q&&(r.after=n(J)),Q&&o(r,"replaceWith",function(n){for(var r=[],o=0;o<arguments.length;++o)r[o-0]=arguments[o];for(var o=[],i=[],a=0;a<r.length;a++){var c=r[a];if(c instanceof Element&&t(c)&&i.push(c),c instanceof DocumentFragment)for(c=c.firstChild;c;c=c.nextSibling)o.push(c);else o.push(c)}for(a=t(this),Q.apply(this,r),r=0;r<i.length;r++)f(e,i[r]);if(a)for(f(e,this),r=0;r<o.length;r++)(i=o[r])instanceof Element&&l(e,i)}),Y&&o(r,"remove",function(){var n=t(this);Y.call(this),n&&f(e,this)})}var C=new function(){},E=new Set("annotation-xml color-profile font-face font-face-src font-face-uri font-face-format font-face-name missing-glyph".split(" "));i.prototype.connectedCallback=function(e){var t=e.__CE_definition;t.connectedCallback&&t.connectedCallback.call(e)},i.prototype.disconnectedCallback=function(e){var t=e.__CE_definition;t.disconnectedCallback&&t.disconnectedCallback.call(e)},i.prototype.attributeChangedCallback=function(e,t,n,r,o){var i=e.__CE_definition;i.attributeChangedCallback&&-1<i.observedAttributes.indexOf(t)&&i.attributeChangedCallback.call(e,t,n,r,o)},h.prototype.f=function(e){var t=this.a.readyState;for("interactive"!==t&&"complete"!==t||m(this),t=0;t<e.length;t++)for(var n=e[t].addedNodes,r=0;r<n.length;r++)p(this.c,n[r])},g.prototype.define=function(t,n){var r=this;if(!(n instanceof Function))throw new TypeError("Custom element constructors must be functions.");if(!e(t))throw new SyntaxError("The element name '"+t+"' is not valid.");if(this.c.a.get(t))throw Error("A custom element with name '"+t+"' has already been defined.");if(this.j)throw Error("A custom element is already being defined.");this.j=!0;var o,i,c,u,s;try{var l=function(e){var t=f[e];if(void 0!==t&&!(t instanceof Function))throw Error("The '"+e+"' callback must be a function.");return t},f=n.prototype;if(!(f instanceof Object))throw new TypeError("The custom element constructor's prototype is not an object.");o=l("connectedCallback"),i=l("disconnectedCallback"),c=l("adoptedCallback"),u=l("attributeChangedCallback"),s=n.observedAttributes||[]}catch(e){return}finally{this.j=!1}n={localName:t,constructor:n,connectedCallback:o,disconnectedCallback:i,adoptedCallback:c,attributeChangedCallback:u,observedAttributes:s,constructionStack:[]},a(this.c,t,n),this.m.push(n),this.g||(this.g=!0,this.l(function(){return v(r)}))},g.prototype.i=function(e){p(this.c,e)},g.prototype.get=function(e){if(e=this.c.a.get(e))return e.constructor},g.prototype.whenDefined=function(t){if(!e(t))return Promise.reject(new SyntaxError("'"+t+"' is not a valid custom element name."));var n=this.o.get(t);return n?n.f:(n=new b,this.o.set(t,n),this.c.a.get(t)&&!this.m.some(function(e){return e.localName===t})&&y(n),n.f)},g.prototype.v=function(e){m(this.u);var t=this.l;this.l=function(n){return e(function(){return t(n)})}},window.CustomElementRegistry=g,g.prototype.define=g.prototype.define,g.prototype.upgrade=g.prototype.i,g.prototype.get=g.prototype.get,g.prototype.whenDefined=g.prototype.whenDefined,g.prototype.polyfillWrapFlushCallback=g.prototype.v;var S=window.Document.prototype.createElement,O=window.Document.prototype.createElementNS,j=window.Document.prototype.importNode,P=window.Document.prototype.prepend,k=window.Document.prototype.append,N=window.DocumentFragment.prototype.prepend,T=window.DocumentFragment.prototype.append,A=window.Node.prototype.cloneNode,R=window.Node.prototype.appendChild,M=window.Node.prototype.insertBefore,D=window.Node.prototype.removeChild,x=window.Node.prototype.replaceChild,L=Object.getOwnPropertyDescriptor(window.Node.prototype,"textContent"),I=window.Element.prototype.attachShadow,H=Object.getOwnPropertyDescriptor(window.Element.prototype,"innerHTML"),F=window.Element.prototype.getAttribute,W=window.Element.prototype.setAttribute,z=window.Element.prototype.removeAttribute,G=window.Element.prototype.getAttributeNS,U=window.Element.prototype.setAttributeNS,B=window.Element.prototype.removeAttributeNS,V=window.Element.prototype.insertAdjacentElement,K=window.Element.prototype.insertAdjacentHTML,X=window.Element.prototype.prepend,$=window.Element.prototype.append,q=window.Element.prototype.before,J=window.Element.prototype.after,Q=window.Element.prototype.replaceWith,Y=window.Element.prototype.remove,Z=window.HTMLElement,ee=Object.getOwnPropertyDescriptor(window.HTMLElement.prototype,"innerHTML"),te=window.HTMLElement.prototype.insertAdjacentElement,ne=window.HTMLElement.prototype.insertAdjacentHTML,re=window.customElements;if(!re||re.forcePolyfill||"function"!=typeof re.define||"function"!=typeof re.get){var oe=new i;!function(){var e=oe;window.HTMLElement=function(){function t(){var t=this.constructor,n=e.s.get(t);if(!n)throw Error("The custom element being constructed was not registered with `customElements`.");var r=n.constructionStack;if(!r.length)return r=S.call(document,n.localName),Object.setPrototypeOf(r,t.prototype),r.__CE_state=1,r.__CE_definition=n,s(e,r),r;var n=r.length-1,o=r[n];if(o===C)throw Error("The HTMLElement constructor was either called reentrantly for this constructor or called multiple times.");return r[n]=C,Object.setPrototypeOf(o,t.prototype),s(e,o),o}return t.prototype=Z.prototype,Object.defineProperty(t.prototype,"constructor",{writable:!0,configurable:!0,enumerable:!1,value:t}),t}()}(),function(){var e=oe;o(Document.prototype,"createElement",function(t){if(this.__CE_hasRegistry){var n=e.a.get(t);if(n)return new n.constructor}return t=S.call(this,t),s(e,t),t}),o(Document.prototype,"importNode",function(t,n){return t=j.call(this,t,n),this.__CE_hasRegistry?p(e,t):u(e,t),t}),o(Document.prototype,"createElementNS",function(t,n){if(this.__CE_hasRegistry&&(null===t||"http://www.w3.org/1999/xhtml"===t)){var r=e.a.get(n);if(r)return new r.constructor}return t=O.call(this,t,n),s(e,t),t}),_(e,Document.prototype,{h:P,append:k})}(),_(oe,DocumentFragment.prototype,{h:N,append:T}),function(){function e(e,r){Object.defineProperty(e,"textContent",{enumerable:r.enumerable,configurable:!0,get:r.get,set:function(e){if(this.nodeType===Node.TEXT_NODE)r.set.call(this,e);else{var o=void 0;if(this.firstChild){var i=this.childNodes,a=i.length;if(0<a&&t(this))for(var o=Array(a),c=0;c<a;c++)o[c]=i[c]}if(r.set.call(this,e),o)for(e=0;e<o.length;e++)f(n,o[e])}}})}var n=oe;o(Node.prototype,"insertBefore",function(e,r){if(e instanceof DocumentFragment){var o=Array.prototype.slice.apply(e.childNodes);if(e=M.call(this,e,r),t(this))for(r=0;r<o.length;r++)l(n,o[r]);return e}return o=t(e),r=M.call(this,e,r),o&&f(n,e),t(this)&&l(n,e),r}),o(Node.prototype,"appendChild",function(e){if(e instanceof DocumentFragment){var r=Array.prototype.slice.apply(e.childNodes);if(e=R.call(this,e),t(this))for(var o=0;o<r.length;o++)l(n,r[o]);return e}return r=t(e),o=R.call(this,e),r&&f(n,e),t(this)&&l(n,e),o}),o(Node.prototype,"cloneNode",function(e){return e=A.call(this,e),this.ownerDocument.__CE_hasRegistry?p(n,e):u(n,e),e}),o(Node.prototype,"removeChild",function(e){var r=t(e),o=D.call(this,e);return r&&f(n,e),o}),o(Node.prototype,"replaceChild",function(e,r){if(e instanceof DocumentFragment){var o=Array.prototype.slice.apply(e.childNodes);if(e=x.call(this,e,r),t(this))for(f(n,r),r=0;r<o.length;r++)l(n,o[r]);return e}var o=t(e),i=x.call(this,e,r),a=t(this);return a&&f(n,r),o&&f(n,e),a&&l(n,e),i}),L&&L.get?e(Node.prototype,L):c(n,function(t){e(t,{enumerable:!0,configurable:!0,get:function(){for(var e=[],t=0;t<this.childNodes.length;t++)e.push(this.childNodes[t].textContent);return e.join("")},set:function(e){for(;this.firstChild;)D.call(this,this.firstChild);R.call(this,document.createTextNode(e))}})})}(),function(){function e(e,n){Object.defineProperty(e,"innerHTML",{enumerable:n.enumerable,configurable:!0,get:n.get,set:function(e){var o=this,i=void 0;if(t(this)&&(i=[],r(this,function(e){e!==o&&i.push(e)})),n.set.call(this,e),i)for(var c=0;c<i.length;c++){var s=i[c];1===s.__CE_state&&a.disconnectedCallback(s)}return this.ownerDocument.__CE_hasRegistry?p(a,this):u(a,this),e}})}function n(e,n){o(e,"insertAdjacentElement",function(e,r){var o=t(r);return e=n.call(this,e,r),o&&f(a,r),t(e)&&l(a,r),e})}function i(e,t){function n(e,t){for(var n=[];e!==t;e=e.nextSibling)n.push(e);for(t=0;t<n.length;t++)p(a,n[t])}o(e,"insertAdjacentHTML",function(e,r){if("beforebegin"===(e=e.toLowerCase())){var o=this.previousSibling;t.call(this,e,r),n(o||this.parentNode.firstChild,this)}else if("afterbegin"===e)o=this.firstChild,t.call(this,e,r),n(this.firstChild,o);else if("beforeend"===e)o=this.lastChild,t.call(this,e,r),n(o||this.firstChild,null);else{if("afterend"!==e)throw new SyntaxError("The value provided ("+String(e)+") is not one of 'beforebegin', 'afterbegin', 'beforeend', or 'afterend'.");o=this.nextSibling,t.call(this,e,r),n(this.nextSibling,o)}})}var a=oe;I&&o(Element.prototype,"attachShadow",function(e){return this.__CE_shadowRoot=e=I.call(this,e)}),H&&H.get?e(Element.prototype,H):ee&&ee.get?e(HTMLElement.prototype,ee):c(a,function(t){e(t,{enumerable:!0,configurable:!0,get:function(){return A.call(this,!0).innerHTML},set:function(e){var t="template"===this.localName,n=t?this.content:this,r=O.call(document,this.namespaceURI,this.localName);for(r.innerHTML=e;0<n.childNodes.length;)D.call(n,n.childNodes[0]);for(e=t?r.content:r;0<e.childNodes.length;)R.call(n,e.childNodes[0])}})}),o(Element.prototype,"setAttribute",function(e,t){if(1!==this.__CE_state)return W.call(this,e,t);var n=F.call(this,e);W.call(this,e,t),t=F.call(this,e),a.attributeChangedCallback(this,e,n,t,null)}),o(Element.prototype,"setAttributeNS",function(e,t,n){if(1!==this.__CE_state)return U.call(this,e,t,n);var r=G.call(this,e,t);U.call(this,e,t,n),n=G.call(this,e,t),a.attributeChangedCallback(this,t,r,n,e)}),o(Element.prototype,"removeAttribute",function(e){if(1!==this.__CE_state)return z.call(this,e);var t=F.call(this,e);z.call(this,e),null!==t&&a.attributeChangedCallback(this,e,t,null,null)}),o(Element.prototype,"removeAttributeNS",function(e,t){if(1!==this.__CE_state)return B.call(this,e,t);var n=G.call(this,e,t);B.call(this,e,t);var r=G.call(this,e,t);n!==r&&a.attributeChangedCallback(this,t,n,r,e)}),te?n(HTMLElement.prototype,te):V?n(Element.prototype,V):console.warn("Custom Elements: `Element#insertAdjacentElement` was not patched."),ne?i(HTMLElement.prototype,ne):K?i(Element.prototype,K):console.warn("Custom Elements: `Element#insertAdjacentHTML` was not patched."),_(a,Element.prototype,{h:X,append:$}),w(a)}(),document.__CE_hasRegistry=!0;var ie=new g(oe);Object.defineProperty(window,"customElements",{configurable:!0,enumerable:!0,value:ie})}}).call(self)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,